// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void init_vm_api()")
  fmt.Fprintln(os.Stderr, "  void init_apply_request()")
  fmt.Fprintln(os.Stderr, "  void enable_debug_contract(i32 id, string contract, bool enable)")
  fmt.Fprintln(os.Stderr, "  bool is_debug_contract_enabled(i32 id, string contract)")
  fmt.Fprintln(os.Stderr, "  string pack_abi(string abi)")
  fmt.Fprintln(os.Stderr, "  string pack_action_args(i32 id, string contract, string action, string action_args)")
  fmt.Fprintln(os.Stderr, "  string unpack_action_args(i32 id, string contract, string action, string raw_args)")
  fmt.Fprintln(os.Stderr, "  i32 new_chain(bool initialize)")
  fmt.Fprintln(os.Stderr, "  i32 free_chain(i32 id)")
  fmt.Fprintln(os.Stderr, "  string get_info(i32 id)")
  fmt.Fprintln(os.Stderr, "  string create_key(string key_type)")
  fmt.Fprintln(os.Stderr, "  string get_account(i32 id, string account)")
  fmt.Fprintln(os.Stderr, "  string create_account(i32 id, string creator, string account, string owner_key, string active_key, i64 ram_bytes, i64 stake_net, i64 stake_cpu)")
  fmt.Fprintln(os.Stderr, "  bool import_key(i32 id, string pub_key, string priv_key)")
  fmt.Fprintln(os.Stderr, "  string get_required_keys(i32 id, string transaction,  available_keys)")
  fmt.Fprintln(os.Stderr, "  void produce_block(i32 id, i64 next_block_skip_seconds)")
  fmt.Fprintln(os.Stderr, "  string push_action(i32 id, string account, string action, ActionArguments arguments, string permissions)")
  fmt.Fprintln(os.Stderr, "  string push_actions(i32 id,  actions)")
  fmt.Fprintln(os.Stderr, "  string deploy_contract(i32 id, string account, string wasm, string abi)")
  fmt.Fprintln(os.Stderr, "  string get_table_rows(i32 id, bool json, string code, string scope, string table, string lower_bound, string upper_bound, i64 limit, string key_type, string index_position, bool reverse, bool show_payer)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewIPCChainTesterClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "init_vm_api":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "InitVMAPI requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.InitVMAPI(context.Background()))
    fmt.Print("\n")
    break
  case "init_apply_request":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "InitApplyRequest requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.InitApplyRequest(context.Background()))
    fmt.Print("\n")
    break
  case "enable_debug_contract":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "EnableDebugContract requires 3 args")
      flag.Usage()
    }
    tmp0, err60 := (strconv.Atoi(flag.Arg(1)))
    if err60 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.EnableDebugContract(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "is_debug_contract_enabled":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsDebugContractEnabled requires 2 args")
      flag.Usage()
    }
    tmp0, err63 := (strconv.Atoi(flag.Arg(1)))
    if err63 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsDebugContractEnabled(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pack_abi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PackAbi requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PackAbi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "pack_action_args":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "PackActionArgs_ requires 4 args")
      flag.Usage()
    }
    tmp0, err66 := (strconv.Atoi(flag.Arg(1)))
    if err66 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.PackActionArgs_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "unpack_action_args":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UnpackActionArgs_ requires 4 args")
      flag.Usage()
    }
    tmp0, err70 := (strconv.Atoi(flag.Arg(1)))
    if err70 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.UnpackActionArgs_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "new_chain":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NewChain_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.NewChain_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "free_chain":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FreeChain requires 1 args")
      flag.Usage()
    }
    tmp0, err75 := (strconv.Atoi(flag.Arg(1)))
    if err75 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.FreeChain(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_info":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err76 := (strconv.Atoi(flag.Arg(1)))
    if err76 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CreateKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_account":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAccount requires 2 args")
      flag.Usage()
    }
    tmp0, err78 := (strconv.Atoi(flag.Arg(1)))
    if err78 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAccount(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_account":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "CreateAccount requires 8 args")
      flag.Usage()
    }
    tmp0, err80 := (strconv.Atoi(flag.Arg(1)))
    if err80 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5, err85 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err85 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6, err86 := (strconv.ParseInt(flag.Arg(7), 10, 64))
    if err86 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    argvalue7, err87 := (strconv.ParseInt(flag.Arg(8), 10, 64))
    if err87 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    fmt.Print(client.CreateAccount(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "import_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ImportKey requires 3 args")
      flag.Usage()
    }
    tmp0, err88 := (strconv.Atoi(flag.Arg(1)))
    if err88 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.ImportKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_required_keys":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRequiredKeys requires 3 args")
      flag.Usage()
    }
    tmp0, err91 := (strconv.Atoi(flag.Arg(1)))
    if err91 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg93 := flag.Arg(3)
    mbTrans94 := thrift.NewTMemoryBufferLen(len(arg93))
    defer mbTrans94.Close()
    _, err95 := mbTrans94.WriteString(arg93)
    if err95 != nil { 
      Usage()
      return
    }
    factory96 := thrift.NewTJSONProtocolFactory()
    jsProt97 := factory96.GetProtocol(mbTrans94)
    containerStruct2 := interfaces.NewIPCChainTesterGetRequiredKeysArgs()
    err98 := containerStruct2.ReadField3(context.Background(), jsProt97)
    if err98 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.AvailableKeys
    value2 := argvalue2
    fmt.Print(client.GetRequiredKeys(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "produce_block":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ProduceBlock requires 2 args")
      flag.Usage()
    }
    tmp0, err99 := (strconv.Atoi(flag.Arg(1)))
    if err99 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1, err100 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err100 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ProduceBlock(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "push_action":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "PushAction requires 5 args")
      flag.Usage()
    }
    tmp0, err101 := (strconv.Atoi(flag.Arg(1)))
    if err101 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg104 := flag.Arg(4)
    mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
    defer mbTrans105.Close()
    _, err106 := mbTrans105.WriteString(arg104)
    if err106 != nil {
      Usage()
      return
    }
    factory107 := thrift.NewTJSONProtocolFactory()
    jsProt108 := factory107.GetProtocol(mbTrans105)
    argvalue3 := interfaces.NewActionArguments()
    err109 := argvalue3.Read(context.Background(), jsProt108)
    if err109 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.PushAction(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "push_actions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PushActions requires 2 args")
      flag.Usage()
    }
    tmp0, err111 := (strconv.Atoi(flag.Arg(1)))
    if err111 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg112 := flag.Arg(2)
    mbTrans113 := thrift.NewTMemoryBufferLen(len(arg112))
    defer mbTrans113.Close()
    _, err114 := mbTrans113.WriteString(arg112)
    if err114 != nil { 
      Usage()
      return
    }
    factory115 := thrift.NewTJSONProtocolFactory()
    jsProt116 := factory115.GetProtocol(mbTrans113)
    containerStruct1 := interfaces.NewIPCChainTesterPushActionsArgs()
    err117 := containerStruct1.ReadField2(context.Background(), jsProt116)
    if err117 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Actions
    value1 := argvalue1
    fmt.Print(client.PushActions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deploy_contract":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeployContract requires 4 args")
      flag.Usage()
    }
    tmp0, err118 := (strconv.Atoi(flag.Arg(1)))
    if err118 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeployContract(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_rows":
    if flag.NArg() - 1 != 12 {
      fmt.Fprintln(os.Stderr, "GetTableRows requires 12 args")
      flag.Usage()
    }
    tmp0, err122 := (strconv.Atoi(flag.Arg(1)))
    if err122 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7, err129 := (strconv.ParseInt(flag.Arg(8), 10, 64))
    if err129 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    argvalue8 := flag.Arg(9)
    value8 := argvalue8
    argvalue9 := flag.Arg(10)
    value9 := argvalue9
    argvalue10 := flag.Arg(11) == "true"
    value10 := argvalue10
    argvalue11 := flag.Arg(12) == "true"
    value11 := argvalue11
    fmt.Print(client.GetTableRows(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
