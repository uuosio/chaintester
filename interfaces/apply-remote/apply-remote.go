// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  void set_action_return_value(string data)")
  fmt.Fprintln(os.Stderr, "  string get_code_hash(Uint64 account, i64 struct_version)")
  fmt.Fprintln(os.Stderr, "  i64 get_block_num()")
  fmt.Fprintln(os.Stderr, "  string sha3(string data, i32 keccak)")
  fmt.Fprintln(os.Stderr, "  string blake2_f(i64 rounds, string state, string msg, string t0_offset, string t1_offset, i32 final)")
  fmt.Fprintln(os.Stderr, "  string k1_recover(string sig, string dig)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_add(string op1, string op2)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_mul(string g1, string scalar)")
  fmt.Fprintln(os.Stderr, "  i32 alt_bn128_pair(string pairs)")
  fmt.Fprintln(os.Stderr, "  string mod_exp(string base, string exp, string mod)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := interfaces.NewUint64()
    err627 := argvalue0.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg628 := flag.Arg(1)
    mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewTJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue0 := interfaces.NewUint64()
    err633 := argvalue0.Read(context.Background(), jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err634 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err634 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err635 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err635 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err636 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err636 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg638 := flag.Arg(1)
    mbTrans639 := thrift.NewTMemoryBufferLen(len(arg638))
    defer mbTrans639.Close()
    _, err640 := mbTrans639.WriteString(arg638)
    if err640 != nil {
      Usage()
      return
    }
    factory641 := thrift.NewTJSONProtocolFactory()
    jsProt642 := factory641.GetProtocol(mbTrans639)
    argvalue0 := interfaces.NewUint64()
    err643 := argvalue0.Read(context.Background(), jsProt642)
    if err643 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg645 := flag.Arg(1)
    mbTrans646 := thrift.NewTMemoryBufferLen(len(arg645))
    defer mbTrans646.Close()
    _, err647 := mbTrans646.WriteString(arg645)
    if err647 != nil {
      Usage()
      return
    }
    factory648 := thrift.NewTJSONProtocolFactory()
    jsProt649 := factory648.GetProtocol(mbTrans646)
    argvalue0 := interfaces.NewUint64()
    err650 := argvalue0.Read(context.Background(), jsProt649)
    if err650 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg651 := flag.Arg(1)
    mbTrans652 := thrift.NewTMemoryBufferLen(len(arg651))
    defer mbTrans652.Close()
    _, err653 := mbTrans652.WriteString(arg651)
    if err653 != nil {
      Usage()
      return
    }
    factory654 := thrift.NewTJSONProtocolFactory()
    jsProt655 := factory654.GetProtocol(mbTrans652)
    argvalue0 := interfaces.NewUint64()
    err656 := argvalue0.Read(context.Background(), jsProt655)
    if err656 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg663 := flag.Arg(1)
    mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
    defer mbTrans664.Close()
    _, err665 := mbTrans664.WriteString(arg663)
    if err665 != nil {
      Usage()
      return
    }
    factory666 := thrift.NewTJSONProtocolFactory()
    jsProt667 := factory666.GetProtocol(mbTrans664)
    argvalue0 := interfaces.NewUint64()
    err668 := argvalue0.Read(context.Background(), jsProt667)
    if err668 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg669 := flag.Arg(2)
    mbTrans670 := thrift.NewTMemoryBufferLen(len(arg669))
    defer mbTrans670.Close()
    _, err671 := mbTrans670.WriteString(arg669)
    if err671 != nil {
      Usage()
      return
    }
    factory672 := thrift.NewTJSONProtocolFactory()
    jsProt673 := factory672.GetProtocol(mbTrans670)
    argvalue1 := interfaces.NewUint64()
    err674 := argvalue1.Read(context.Background(), jsProt673)
    if err674 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg677 := flag.Arg(5)
    mbTrans678 := thrift.NewTMemoryBufferLen(len(arg677))
    defer mbTrans678.Close()
    _, err679 := mbTrans678.WriteString(arg677)
    if err679 != nil {
      Usage()
      return
    }
    factory680 := thrift.NewTJSONProtocolFactory()
    jsProt681 := factory680.GetProtocol(mbTrans678)
    argvalue4 := interfaces.NewUint64()
    err682 := argvalue4.Read(context.Background(), jsProt681)
    if err682 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg683 := flag.Arg(1)
    mbTrans684 := thrift.NewTMemoryBufferLen(len(arg683))
    defer mbTrans684.Close()
    _, err685 := mbTrans684.WriteString(arg683)
    if err685 != nil {
      Usage()
      return
    }
    factory686 := thrift.NewTJSONProtocolFactory()
    jsProt687 := factory686.GetProtocol(mbTrans684)
    argvalue0 := interfaces.NewUint64()
    err688 := argvalue0.Read(context.Background(), jsProt687)
    if err688 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg689 := flag.Arg(2)
    mbTrans690 := thrift.NewTMemoryBufferLen(len(arg689))
    defer mbTrans690.Close()
    _, err691 := mbTrans690.WriteString(arg689)
    if err691 != nil {
      Usage()
      return
    }
    factory692 := thrift.NewTJSONProtocolFactory()
    jsProt693 := factory692.GetProtocol(mbTrans690)
    argvalue1 := interfaces.NewUint64()
    err694 := argvalue1.Read(context.Background(), jsProt693)
    if err694 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg695 := flag.Arg(1)
    mbTrans696 := thrift.NewTMemoryBufferLen(len(arg695))
    defer mbTrans696.Close()
    _, err697 := mbTrans696.WriteString(arg695)
    if err697 != nil {
      Usage()
      return
    }
    factory698 := thrift.NewTJSONProtocolFactory()
    jsProt699 := factory698.GetProtocol(mbTrans696)
    argvalue0 := interfaces.NewUint64()
    err700 := argvalue0.Read(context.Background(), jsProt699)
    if err700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err703 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err703 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg704 := flag.Arg(1)
    mbTrans705 := thrift.NewTMemoryBufferLen(len(arg704))
    defer mbTrans705.Close()
    _, err706 := mbTrans705.WriteString(arg704)
    if err706 != nil {
      Usage()
      return
    }
    factory707 := thrift.NewTJSONProtocolFactory()
    jsProt708 := factory707.GetProtocol(mbTrans705)
    argvalue0 := interfaces.NewUint64()
    err709 := argvalue0.Read(context.Background(), jsProt708)
    if err709 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg715 := flag.Arg(1)
    mbTrans716 := thrift.NewTMemoryBufferLen(len(arg715))
    defer mbTrans716.Close()
    _, err717 := mbTrans716.WriteString(arg715)
    if err717 != nil {
      Usage()
      return
    }
    factory718 := thrift.NewTJSONProtocolFactory()
    jsProt719 := factory718.GetProtocol(mbTrans716)
    argvalue0 := interfaces.NewUint64()
    err720 := argvalue0.Read(context.Background(), jsProt719)
    if err720 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg722 := flag.Arg(1)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue0 := interfaces.NewUint64()
    err727 := argvalue0.Read(context.Background(), jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg728 := flag.Arg(1)
    mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewTJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue0 := interfaces.NewUint64()
    err733 := argvalue0.Read(context.Background(), jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg734 := flag.Arg(1)
    mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewTJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue0 := interfaces.NewUint64()
    err739 := argvalue0.Read(context.Background(), jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg740 := flag.Arg(1)
    mbTrans741 := thrift.NewTMemoryBufferLen(len(arg740))
    defer mbTrans741.Close()
    _, err742 := mbTrans741.WriteString(arg740)
    if err742 != nil {
      Usage()
      return
    }
    factory743 := thrift.NewTJSONProtocolFactory()
    jsProt744 := factory743.GetProtocol(mbTrans741)
    argvalue0 := interfaces.NewUint64()
    err745 := argvalue0.Read(context.Background(), jsProt744)
    if err745 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg746 := flag.Arg(2)
    mbTrans747 := thrift.NewTMemoryBufferLen(len(arg746))
    defer mbTrans747.Close()
    _, err748 := mbTrans747.WriteString(arg746)
    if err748 != nil {
      Usage()
      return
    }
    factory749 := thrift.NewTJSONProtocolFactory()
    jsProt750 := factory749.GetProtocol(mbTrans747)
    argvalue1 := interfaces.NewUint64()
    err751 := argvalue1.Read(context.Background(), jsProt750)
    if err751 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg752 := flag.Arg(1)
    mbTrans753 := thrift.NewTMemoryBufferLen(len(arg752))
    defer mbTrans753.Close()
    _, err754 := mbTrans753.WriteString(arg752)
    if err754 != nil {
      Usage()
      return
    }
    factory755 := thrift.NewTJSONProtocolFactory()
    jsProt756 := factory755.GetProtocol(mbTrans753)
    argvalue0 := interfaces.NewUint64()
    err757 := argvalue0.Read(context.Background(), jsProt756)
    if err757 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg765 := flag.Arg(2)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil {
      Usage()
      return
    }
    factory768 := thrift.NewTJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    argvalue1 := interfaces.NewUint64()
    err770 := argvalue1.Read(context.Background(), jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err771 := (strconv.Atoi(flag.Arg(1)))
    if err771 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg791 := flag.Arg(2)
    mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewTJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue1 := interfaces.NewUint64()
    err796 := argvalue1.Read(context.Background(), jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err798 := (strconv.Atoi(flag.Arg(4)))
    if err798 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err800 := (strconv.Atoi(flag.Arg(1)))
    if err800 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err801 := (strconv.Atoi(flag.Arg(2)))
    if err801 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err802 := (strconv.Atoi(flag.Arg(1)))
    if err802 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg803 := flag.Arg(1)
    mbTrans804 := thrift.NewTMemoryBufferLen(len(arg803))
    defer mbTrans804.Close()
    _, err805 := mbTrans804.WriteString(arg803)
    if err805 != nil {
      Usage()
      return
    }
    factory806 := thrift.NewTJSONProtocolFactory()
    jsProt807 := factory806.GetProtocol(mbTrans804)
    argvalue0 := interfaces.NewUint64()
    err808 := argvalue0.Read(context.Background(), jsProt807)
    if err808 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg809 := flag.Arg(2)
    mbTrans810 := thrift.NewTMemoryBufferLen(len(arg809))
    defer mbTrans810.Close()
    _, err811 := mbTrans810.WriteString(arg809)
    if err811 != nil {
      Usage()
      return
    }
    factory812 := thrift.NewTJSONProtocolFactory()
    jsProt813 := factory812.GetProtocol(mbTrans810)
    argvalue1 := interfaces.NewUint64()
    err814 := argvalue1.Read(context.Background(), jsProt813)
    if err814 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg815 := flag.Arg(3)
    mbTrans816 := thrift.NewTMemoryBufferLen(len(arg815))
    defer mbTrans816.Close()
    _, err817 := mbTrans816.WriteString(arg815)
    if err817 != nil {
      Usage()
      return
    }
    factory818 := thrift.NewTJSONProtocolFactory()
    jsProt819 := factory818.GetProtocol(mbTrans816)
    argvalue2 := interfaces.NewUint64()
    err820 := argvalue2.Read(context.Background(), jsProt819)
    if err820 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg821 := flag.Arg(4)
    mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewTJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue3 := interfaces.NewUint64()
    err826 := argvalue3.Read(context.Background(), jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err828 := (strconv.Atoi(flag.Arg(1)))
    if err828 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg829 := flag.Arg(2)
    mbTrans830 := thrift.NewTMemoryBufferLen(len(arg829))
    defer mbTrans830.Close()
    _, err831 := mbTrans830.WriteString(arg829)
    if err831 != nil {
      Usage()
      return
    }
    factory832 := thrift.NewTJSONProtocolFactory()
    jsProt833 := factory832.GetProtocol(mbTrans830)
    argvalue1 := interfaces.NewUint64()
    err834 := argvalue1.Read(context.Background(), jsProt833)
    if err834 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err836 := (strconv.Atoi(flag.Arg(1)))
    if err836 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err837 := (strconv.Atoi(flag.Arg(1)))
    if err837 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err838 := (strconv.Atoi(flag.Arg(1)))
    if err838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err839 := (strconv.Atoi(flag.Arg(1)))
    if err839 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg840 := flag.Arg(1)
    mbTrans841 := thrift.NewTMemoryBufferLen(len(arg840))
    defer mbTrans841.Close()
    _, err842 := mbTrans841.WriteString(arg840)
    if err842 != nil {
      Usage()
      return
    }
    factory843 := thrift.NewTJSONProtocolFactory()
    jsProt844 := factory843.GetProtocol(mbTrans841)
    argvalue0 := interfaces.NewUint64()
    err845 := argvalue0.Read(context.Background(), jsProt844)
    if err845 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg846 := flag.Arg(2)
    mbTrans847 := thrift.NewTMemoryBufferLen(len(arg846))
    defer mbTrans847.Close()
    _, err848 := mbTrans847.WriteString(arg846)
    if err848 != nil {
      Usage()
      return
    }
    factory849 := thrift.NewTJSONProtocolFactory()
    jsProt850 := factory849.GetProtocol(mbTrans847)
    argvalue1 := interfaces.NewUint64()
    err851 := argvalue1.Read(context.Background(), jsProt850)
    if err851 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg852 := flag.Arg(3)
    mbTrans853 := thrift.NewTMemoryBufferLen(len(arg852))
    defer mbTrans853.Close()
    _, err854 := mbTrans853.WriteString(arg852)
    if err854 != nil {
      Usage()
      return
    }
    factory855 := thrift.NewTJSONProtocolFactory()
    jsProt856 := factory855.GetProtocol(mbTrans853)
    argvalue2 := interfaces.NewUint64()
    err857 := argvalue2.Read(context.Background(), jsProt856)
    if err857 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg858 := flag.Arg(4)
    mbTrans859 := thrift.NewTMemoryBufferLen(len(arg858))
    defer mbTrans859.Close()
    _, err860 := mbTrans859.WriteString(arg858)
    if err860 != nil {
      Usage()
      return
    }
    factory861 := thrift.NewTJSONProtocolFactory()
    jsProt862 := factory861.GetProtocol(mbTrans859)
    argvalue3 := interfaces.NewUint64()
    err863 := argvalue3.Read(context.Background(), jsProt862)
    if err863 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg864 := flag.Arg(1)
    mbTrans865 := thrift.NewTMemoryBufferLen(len(arg864))
    defer mbTrans865.Close()
    _, err866 := mbTrans865.WriteString(arg864)
    if err866 != nil {
      Usage()
      return
    }
    factory867 := thrift.NewTJSONProtocolFactory()
    jsProt868 := factory867.GetProtocol(mbTrans865)
    argvalue0 := interfaces.NewUint64()
    err869 := argvalue0.Read(context.Background(), jsProt868)
    if err869 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg870 := flag.Arg(2)
    mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
    defer mbTrans871.Close()
    _, err872 := mbTrans871.WriteString(arg870)
    if err872 != nil {
      Usage()
      return
    }
    factory873 := thrift.NewTJSONProtocolFactory()
    jsProt874 := factory873.GetProtocol(mbTrans871)
    argvalue1 := interfaces.NewUint64()
    err875 := argvalue1.Read(context.Background(), jsProt874)
    if err875 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg876 := flag.Arg(3)
    mbTrans877 := thrift.NewTMemoryBufferLen(len(arg876))
    defer mbTrans877.Close()
    _, err878 := mbTrans877.WriteString(arg876)
    if err878 != nil {
      Usage()
      return
    }
    factory879 := thrift.NewTJSONProtocolFactory()
    jsProt880 := factory879.GetProtocol(mbTrans877)
    argvalue2 := interfaces.NewUint64()
    err881 := argvalue2.Read(context.Background(), jsProt880)
    if err881 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg882 := flag.Arg(4)
    mbTrans883 := thrift.NewTMemoryBufferLen(len(arg882))
    defer mbTrans883.Close()
    _, err884 := mbTrans883.WriteString(arg882)
    if err884 != nil {
      Usage()
      return
    }
    factory885 := thrift.NewTJSONProtocolFactory()
    jsProt886 := factory885.GetProtocol(mbTrans883)
    argvalue3 := interfaces.NewUint64()
    err887 := argvalue3.Read(context.Background(), jsProt886)
    if err887 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg888 := flag.Arg(1)
    mbTrans889 := thrift.NewTMemoryBufferLen(len(arg888))
    defer mbTrans889.Close()
    _, err890 := mbTrans889.WriteString(arg888)
    if err890 != nil {
      Usage()
      return
    }
    factory891 := thrift.NewTJSONProtocolFactory()
    jsProt892 := factory891.GetProtocol(mbTrans889)
    argvalue0 := interfaces.NewUint64()
    err893 := argvalue0.Read(context.Background(), jsProt892)
    if err893 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg894 := flag.Arg(2)
    mbTrans895 := thrift.NewTMemoryBufferLen(len(arg894))
    defer mbTrans895.Close()
    _, err896 := mbTrans895.WriteString(arg894)
    if err896 != nil {
      Usage()
      return
    }
    factory897 := thrift.NewTJSONProtocolFactory()
    jsProt898 := factory897.GetProtocol(mbTrans895)
    argvalue1 := interfaces.NewUint64()
    err899 := argvalue1.Read(context.Background(), jsProt898)
    if err899 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg900 := flag.Arg(3)
    mbTrans901 := thrift.NewTMemoryBufferLen(len(arg900))
    defer mbTrans901.Close()
    _, err902 := mbTrans901.WriteString(arg900)
    if err902 != nil {
      Usage()
      return
    }
    factory903 := thrift.NewTJSONProtocolFactory()
    jsProt904 := factory903.GetProtocol(mbTrans901)
    argvalue2 := interfaces.NewUint64()
    err905 := argvalue2.Read(context.Background(), jsProt904)
    if err905 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg906 := flag.Arg(4)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil {
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    argvalue3 := interfaces.NewUint64()
    err911 := argvalue3.Read(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg912 := flag.Arg(1)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue0 := interfaces.NewUint64()
    err917 := argvalue0.Read(context.Background(), jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg918 := flag.Arg(2)
    mbTrans919 := thrift.NewTMemoryBufferLen(len(arg918))
    defer mbTrans919.Close()
    _, err920 := mbTrans919.WriteString(arg918)
    if err920 != nil {
      Usage()
      return
    }
    factory921 := thrift.NewTJSONProtocolFactory()
    jsProt922 := factory921.GetProtocol(mbTrans919)
    argvalue1 := interfaces.NewUint64()
    err923 := argvalue1.Read(context.Background(), jsProt922)
    if err923 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg924 := flag.Arg(3)
    mbTrans925 := thrift.NewTMemoryBufferLen(len(arg924))
    defer mbTrans925.Close()
    _, err926 := mbTrans925.WriteString(arg924)
    if err926 != nil {
      Usage()
      return
    }
    factory927 := thrift.NewTJSONProtocolFactory()
    jsProt928 := factory927.GetProtocol(mbTrans925)
    argvalue2 := interfaces.NewUint64()
    err929 := argvalue2.Read(context.Background(), jsProt928)
    if err929 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg930 := flag.Arg(1)
    mbTrans931 := thrift.NewTMemoryBufferLen(len(arg930))
    defer mbTrans931.Close()
    _, err932 := mbTrans931.WriteString(arg930)
    if err932 != nil {
      Usage()
      return
    }
    factory933 := thrift.NewTJSONProtocolFactory()
    jsProt934 := factory933.GetProtocol(mbTrans931)
    argvalue0 := interfaces.NewUint64()
    err935 := argvalue0.Read(context.Background(), jsProt934)
    if err935 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg936 := flag.Arg(2)
    mbTrans937 := thrift.NewTMemoryBufferLen(len(arg936))
    defer mbTrans937.Close()
    _, err938 := mbTrans937.WriteString(arg936)
    if err938 != nil {
      Usage()
      return
    }
    factory939 := thrift.NewTJSONProtocolFactory()
    jsProt940 := factory939.GetProtocol(mbTrans937)
    argvalue1 := interfaces.NewUint64()
    err941 := argvalue1.Read(context.Background(), jsProt940)
    if err941 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg942 := flag.Arg(3)
    mbTrans943 := thrift.NewTMemoryBufferLen(len(arg942))
    defer mbTrans943.Close()
    _, err944 := mbTrans943.WriteString(arg942)
    if err944 != nil {
      Usage()
      return
    }
    factory945 := thrift.NewTJSONProtocolFactory()
    jsProt946 := factory945.GetProtocol(mbTrans943)
    argvalue2 := interfaces.NewUint64()
    err947 := argvalue2.Read(context.Background(), jsProt946)
    if err947 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg948 := flag.Arg(4)
    mbTrans949 := thrift.NewTMemoryBufferLen(len(arg948))
    defer mbTrans949.Close()
    _, err950 := mbTrans949.WriteString(arg948)
    if err950 != nil {
      Usage()
      return
    }
    factory951 := thrift.NewTJSONProtocolFactory()
    jsProt952 := factory951.GetProtocol(mbTrans949)
    argvalue3 := interfaces.NewUint64()
    err953 := argvalue3.Read(context.Background(), jsProt952)
    if err953 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg954 := flag.Arg(5)
    mbTrans955 := thrift.NewTMemoryBufferLen(len(arg954))
    defer mbTrans955.Close()
    _, err956 := mbTrans955.WriteString(arg954)
    if err956 != nil {
      Usage()
      return
    }
    factory957 := thrift.NewTJSONProtocolFactory()
    jsProt958 := factory957.GetProtocol(mbTrans955)
    argvalue4 := interfaces.NewUint64()
    err959 := argvalue4.Read(context.Background(), jsProt958)
    if err959 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err960 := (strconv.Atoi(flag.Arg(1)))
    if err960 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg961 := flag.Arg(2)
    mbTrans962 := thrift.NewTMemoryBufferLen(len(arg961))
    defer mbTrans962.Close()
    _, err963 := mbTrans962.WriteString(arg961)
    if err963 != nil {
      Usage()
      return
    }
    factory964 := thrift.NewTJSONProtocolFactory()
    jsProt965 := factory964.GetProtocol(mbTrans962)
    argvalue1 := interfaces.NewUint64()
    err966 := argvalue1.Read(context.Background(), jsProt965)
    if err966 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg967 := flag.Arg(3)
    mbTrans968 := thrift.NewTMemoryBufferLen(len(arg967))
    defer mbTrans968.Close()
    _, err969 := mbTrans968.WriteString(arg967)
    if err969 != nil {
      Usage()
      return
    }
    factory970 := thrift.NewTJSONProtocolFactory()
    jsProt971 := factory970.GetProtocol(mbTrans968)
    argvalue2 := interfaces.NewUint64()
    err972 := argvalue2.Read(context.Background(), jsProt971)
    if err972 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err973 := (strconv.Atoi(flag.Arg(1)))
    if err973 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err974 := (strconv.Atoi(flag.Arg(1)))
    if err974 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err975 := (strconv.Atoi(flag.Arg(1)))
    if err975 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg976 := flag.Arg(1)
    mbTrans977 := thrift.NewTMemoryBufferLen(len(arg976))
    defer mbTrans977.Close()
    _, err978 := mbTrans977.WriteString(arg976)
    if err978 != nil {
      Usage()
      return
    }
    factory979 := thrift.NewTJSONProtocolFactory()
    jsProt980 := factory979.GetProtocol(mbTrans977)
    argvalue0 := interfaces.NewUint64()
    err981 := argvalue0.Read(context.Background(), jsProt980)
    if err981 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg982 := flag.Arg(2)
    mbTrans983 := thrift.NewTMemoryBufferLen(len(arg982))
    defer mbTrans983.Close()
    _, err984 := mbTrans983.WriteString(arg982)
    if err984 != nil {
      Usage()
      return
    }
    factory985 := thrift.NewTJSONProtocolFactory()
    jsProt986 := factory985.GetProtocol(mbTrans983)
    argvalue1 := interfaces.NewUint64()
    err987 := argvalue1.Read(context.Background(), jsProt986)
    if err987 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg988 := flag.Arg(3)
    mbTrans989 := thrift.NewTMemoryBufferLen(len(arg988))
    defer mbTrans989.Close()
    _, err990 := mbTrans989.WriteString(arg988)
    if err990 != nil {
      Usage()
      return
    }
    factory991 := thrift.NewTJSONProtocolFactory()
    jsProt992 := factory991.GetProtocol(mbTrans989)
    argvalue2 := interfaces.NewUint64()
    err993 := argvalue2.Read(context.Background(), jsProt992)
    if err993 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg994 := flag.Arg(4)
    mbTrans995 := thrift.NewTMemoryBufferLen(len(arg994))
    defer mbTrans995.Close()
    _, err996 := mbTrans995.WriteString(arg994)
    if err996 != nil {
      Usage()
      return
    }
    factory997 := thrift.NewTJSONProtocolFactory()
    jsProt998 := factory997.GetProtocol(mbTrans995)
    argvalue3 := interfaces.NewUint64()
    err999 := argvalue3.Read(context.Background(), jsProt998)
    if err999 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1000 := flag.Arg(1)
    mbTrans1001 := thrift.NewTMemoryBufferLen(len(arg1000))
    defer mbTrans1001.Close()
    _, err1002 := mbTrans1001.WriteString(arg1000)
    if err1002 != nil {
      Usage()
      return
    }
    factory1003 := thrift.NewTJSONProtocolFactory()
    jsProt1004 := factory1003.GetProtocol(mbTrans1001)
    argvalue0 := interfaces.NewUint64()
    err1005 := argvalue0.Read(context.Background(), jsProt1004)
    if err1005 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1006 := flag.Arg(2)
    mbTrans1007 := thrift.NewTMemoryBufferLen(len(arg1006))
    defer mbTrans1007.Close()
    _, err1008 := mbTrans1007.WriteString(arg1006)
    if err1008 != nil {
      Usage()
      return
    }
    factory1009 := thrift.NewTJSONProtocolFactory()
    jsProt1010 := factory1009.GetProtocol(mbTrans1007)
    argvalue1 := interfaces.NewUint64()
    err1011 := argvalue1.Read(context.Background(), jsProt1010)
    if err1011 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1012 := flag.Arg(3)
    mbTrans1013 := thrift.NewTMemoryBufferLen(len(arg1012))
    defer mbTrans1013.Close()
    _, err1014 := mbTrans1013.WriteString(arg1012)
    if err1014 != nil {
      Usage()
      return
    }
    factory1015 := thrift.NewTJSONProtocolFactory()
    jsProt1016 := factory1015.GetProtocol(mbTrans1013)
    argvalue2 := interfaces.NewUint64()
    err1017 := argvalue2.Read(context.Background(), jsProt1016)
    if err1017 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1018 := flag.Arg(4)
    mbTrans1019 := thrift.NewTMemoryBufferLen(len(arg1018))
    defer mbTrans1019.Close()
    _, err1020 := mbTrans1019.WriteString(arg1018)
    if err1020 != nil {
      Usage()
      return
    }
    factory1021 := thrift.NewTJSONProtocolFactory()
    jsProt1022 := factory1021.GetProtocol(mbTrans1019)
    argvalue3 := interfaces.NewUint64()
    err1023 := argvalue3.Read(context.Background(), jsProt1022)
    if err1023 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1024 := flag.Arg(1)
    mbTrans1025 := thrift.NewTMemoryBufferLen(len(arg1024))
    defer mbTrans1025.Close()
    _, err1026 := mbTrans1025.WriteString(arg1024)
    if err1026 != nil {
      Usage()
      return
    }
    factory1027 := thrift.NewTJSONProtocolFactory()
    jsProt1028 := factory1027.GetProtocol(mbTrans1025)
    argvalue0 := interfaces.NewUint64()
    err1029 := argvalue0.Read(context.Background(), jsProt1028)
    if err1029 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1030 := flag.Arg(2)
    mbTrans1031 := thrift.NewTMemoryBufferLen(len(arg1030))
    defer mbTrans1031.Close()
    _, err1032 := mbTrans1031.WriteString(arg1030)
    if err1032 != nil {
      Usage()
      return
    }
    factory1033 := thrift.NewTJSONProtocolFactory()
    jsProt1034 := factory1033.GetProtocol(mbTrans1031)
    argvalue1 := interfaces.NewUint64()
    err1035 := argvalue1.Read(context.Background(), jsProt1034)
    if err1035 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1036 := flag.Arg(3)
    mbTrans1037 := thrift.NewTMemoryBufferLen(len(arg1036))
    defer mbTrans1037.Close()
    _, err1038 := mbTrans1037.WriteString(arg1036)
    if err1038 != nil {
      Usage()
      return
    }
    factory1039 := thrift.NewTJSONProtocolFactory()
    jsProt1040 := factory1039.GetProtocol(mbTrans1037)
    argvalue2 := interfaces.NewUint64()
    err1041 := argvalue2.Read(context.Background(), jsProt1040)
    if err1041 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1042 := flag.Arg(4)
    mbTrans1043 := thrift.NewTMemoryBufferLen(len(arg1042))
    defer mbTrans1043.Close()
    _, err1044 := mbTrans1043.WriteString(arg1042)
    if err1044 != nil {
      Usage()
      return
    }
    factory1045 := thrift.NewTJSONProtocolFactory()
    jsProt1046 := factory1045.GetProtocol(mbTrans1043)
    argvalue3 := interfaces.NewUint64()
    err1047 := argvalue3.Read(context.Background(), jsProt1046)
    if err1047 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1048 := flag.Arg(5)
    mbTrans1049 := thrift.NewTMemoryBufferLen(len(arg1048))
    defer mbTrans1049.Close()
    _, err1050 := mbTrans1049.WriteString(arg1048)
    if err1050 != nil {
      Usage()
      return
    }
    factory1051 := thrift.NewTJSONProtocolFactory()
    jsProt1052 := factory1051.GetProtocol(mbTrans1049)
    argvalue4 := interfaces.NewUint64()
    err1053 := argvalue4.Read(context.Background(), jsProt1052)
    if err1053 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg1054 := flag.Arg(1)
    mbTrans1055 := thrift.NewTMemoryBufferLen(len(arg1054))
    defer mbTrans1055.Close()
    _, err1056 := mbTrans1055.WriteString(arg1054)
    if err1056 != nil {
      Usage()
      return
    }
    factory1057 := thrift.NewTJSONProtocolFactory()
    jsProt1058 := factory1057.GetProtocol(mbTrans1055)
    argvalue0 := interfaces.NewUint64()
    err1059 := argvalue0.Read(context.Background(), jsProt1058)
    if err1059 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1060 := flag.Arg(2)
    mbTrans1061 := thrift.NewTMemoryBufferLen(len(arg1060))
    defer mbTrans1061.Close()
    _, err1062 := mbTrans1061.WriteString(arg1060)
    if err1062 != nil {
      Usage()
      return
    }
    factory1063 := thrift.NewTJSONProtocolFactory()
    jsProt1064 := factory1063.GetProtocol(mbTrans1061)
    argvalue1 := interfaces.NewUint64()
    err1065 := argvalue1.Read(context.Background(), jsProt1064)
    if err1065 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1066 := flag.Arg(3)
    mbTrans1067 := thrift.NewTMemoryBufferLen(len(arg1066))
    defer mbTrans1067.Close()
    _, err1068 := mbTrans1067.WriteString(arg1066)
    if err1068 != nil {
      Usage()
      return
    }
    factory1069 := thrift.NewTJSONProtocolFactory()
    jsProt1070 := factory1069.GetProtocol(mbTrans1067)
    argvalue2 := interfaces.NewUint64()
    err1071 := argvalue2.Read(context.Background(), jsProt1070)
    if err1071 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1072 := flag.Arg(4)
    mbTrans1073 := thrift.NewTMemoryBufferLen(len(arg1072))
    defer mbTrans1073.Close()
    _, err1074 := mbTrans1073.WriteString(arg1072)
    if err1074 != nil {
      Usage()
      return
    }
    factory1075 := thrift.NewTJSONProtocolFactory()
    jsProt1076 := factory1075.GetProtocol(mbTrans1073)
    argvalue3 := interfaces.NewUint64()
    err1077 := argvalue3.Read(context.Background(), jsProt1076)
    if err1077 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1078 := flag.Arg(5)
    mbTrans1079 := thrift.NewTMemoryBufferLen(len(arg1078))
    defer mbTrans1079.Close()
    _, err1080 := mbTrans1079.WriteString(arg1078)
    if err1080 != nil {
      Usage()
      return
    }
    factory1081 := thrift.NewTJSONProtocolFactory()
    jsProt1082 := factory1081.GetProtocol(mbTrans1079)
    argvalue4 := interfaces.NewUint64()
    err1083 := argvalue4.Read(context.Background(), jsProt1082)
    if err1083 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1084 := flag.Arg(1)
    mbTrans1085 := thrift.NewTMemoryBufferLen(len(arg1084))
    defer mbTrans1085.Close()
    _, err1086 := mbTrans1085.WriteString(arg1084)
    if err1086 != nil {
      Usage()
      return
    }
    factory1087 := thrift.NewTJSONProtocolFactory()
    jsProt1088 := factory1087.GetProtocol(mbTrans1085)
    argvalue0 := interfaces.NewUint64()
    err1089 := argvalue0.Read(context.Background(), jsProt1088)
    if err1089 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1090 := flag.Arg(2)
    mbTrans1091 := thrift.NewTMemoryBufferLen(len(arg1090))
    defer mbTrans1091.Close()
    _, err1092 := mbTrans1091.WriteString(arg1090)
    if err1092 != nil {
      Usage()
      return
    }
    factory1093 := thrift.NewTJSONProtocolFactory()
    jsProt1094 := factory1093.GetProtocol(mbTrans1091)
    argvalue1 := interfaces.NewUint64()
    err1095 := argvalue1.Read(context.Background(), jsProt1094)
    if err1095 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1096 := flag.Arg(3)
    mbTrans1097 := thrift.NewTMemoryBufferLen(len(arg1096))
    defer mbTrans1097.Close()
    _, err1098 := mbTrans1097.WriteString(arg1096)
    if err1098 != nil {
      Usage()
      return
    }
    factory1099 := thrift.NewTJSONProtocolFactory()
    jsProt1100 := factory1099.GetProtocol(mbTrans1097)
    argvalue2 := interfaces.NewUint64()
    err1101 := argvalue2.Read(context.Background(), jsProt1100)
    if err1101 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1102 := flag.Arg(1)
    mbTrans1103 := thrift.NewTMemoryBufferLen(len(arg1102))
    defer mbTrans1103.Close()
    _, err1104 := mbTrans1103.WriteString(arg1102)
    if err1104 != nil {
      Usage()
      return
    }
    factory1105 := thrift.NewTJSONProtocolFactory()
    jsProt1106 := factory1105.GetProtocol(mbTrans1103)
    argvalue0 := interfaces.NewUint64()
    err1107 := argvalue0.Read(context.Background(), jsProt1106)
    if err1107 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1108 := flag.Arg(2)
    mbTrans1109 := thrift.NewTMemoryBufferLen(len(arg1108))
    defer mbTrans1109.Close()
    _, err1110 := mbTrans1109.WriteString(arg1108)
    if err1110 != nil {
      Usage()
      return
    }
    factory1111 := thrift.NewTJSONProtocolFactory()
    jsProt1112 := factory1111.GetProtocol(mbTrans1109)
    argvalue1 := interfaces.NewUint64()
    err1113 := argvalue1.Read(context.Background(), jsProt1112)
    if err1113 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1114 := flag.Arg(3)
    mbTrans1115 := thrift.NewTMemoryBufferLen(len(arg1114))
    defer mbTrans1115.Close()
    _, err1116 := mbTrans1115.WriteString(arg1114)
    if err1116 != nil {
      Usage()
      return
    }
    factory1117 := thrift.NewTJSONProtocolFactory()
    jsProt1118 := factory1117.GetProtocol(mbTrans1115)
    argvalue2 := interfaces.NewUint64()
    err1119 := argvalue2.Read(context.Background(), jsProt1118)
    if err1119 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1120 := flag.Arg(4)
    mbTrans1121 := thrift.NewTMemoryBufferLen(len(arg1120))
    defer mbTrans1121.Close()
    _, err1122 := mbTrans1121.WriteString(arg1120)
    if err1122 != nil {
      Usage()
      return
    }
    factory1123 := thrift.NewTJSONProtocolFactory()
    jsProt1124 := factory1123.GetProtocol(mbTrans1121)
    argvalue3 := interfaces.NewUint64()
    err1125 := argvalue3.Read(context.Background(), jsProt1124)
    if err1125 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1127 := (strconv.Atoi(flag.Arg(1)))
    if err1127 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1128 := flag.Arg(2)
    mbTrans1129 := thrift.NewTMemoryBufferLen(len(arg1128))
    defer mbTrans1129.Close()
    _, err1130 := mbTrans1129.WriteString(arg1128)
    if err1130 != nil {
      Usage()
      return
    }
    factory1131 := thrift.NewTJSONProtocolFactory()
    jsProt1132 := factory1131.GetProtocol(mbTrans1129)
    argvalue1 := interfaces.NewUint64()
    err1133 := argvalue1.Read(context.Background(), jsProt1132)
    if err1133 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1135 := (strconv.Atoi(flag.Arg(1)))
    if err1135 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1136 := (strconv.Atoi(flag.Arg(1)))
    if err1136 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1137 := (strconv.Atoi(flag.Arg(1)))
    if err1137 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1138 := flag.Arg(1)
    mbTrans1139 := thrift.NewTMemoryBufferLen(len(arg1138))
    defer mbTrans1139.Close()
    _, err1140 := mbTrans1139.WriteString(arg1138)
    if err1140 != nil {
      Usage()
      return
    }
    factory1141 := thrift.NewTJSONProtocolFactory()
    jsProt1142 := factory1141.GetProtocol(mbTrans1139)
    argvalue0 := interfaces.NewUint64()
    err1143 := argvalue0.Read(context.Background(), jsProt1142)
    if err1143 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1144 := flag.Arg(2)
    mbTrans1145 := thrift.NewTMemoryBufferLen(len(arg1144))
    defer mbTrans1145.Close()
    _, err1146 := mbTrans1145.WriteString(arg1144)
    if err1146 != nil {
      Usage()
      return
    }
    factory1147 := thrift.NewTJSONProtocolFactory()
    jsProt1148 := factory1147.GetProtocol(mbTrans1145)
    argvalue1 := interfaces.NewUint64()
    err1149 := argvalue1.Read(context.Background(), jsProt1148)
    if err1149 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1150 := flag.Arg(3)
    mbTrans1151 := thrift.NewTMemoryBufferLen(len(arg1150))
    defer mbTrans1151.Close()
    _, err1152 := mbTrans1151.WriteString(arg1150)
    if err1152 != nil {
      Usage()
      return
    }
    factory1153 := thrift.NewTJSONProtocolFactory()
    jsProt1154 := factory1153.GetProtocol(mbTrans1151)
    argvalue2 := interfaces.NewUint64()
    err1155 := argvalue2.Read(context.Background(), jsProt1154)
    if err1155 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1156 := flag.Arg(4)
    mbTrans1157 := thrift.NewTMemoryBufferLen(len(arg1156))
    defer mbTrans1157.Close()
    _, err1158 := mbTrans1157.WriteString(arg1156)
    if err1158 != nil {
      Usage()
      return
    }
    factory1159 := thrift.NewTJSONProtocolFactory()
    jsProt1160 := factory1159.GetProtocol(mbTrans1157)
    argvalue3 := interfaces.NewUint64()
    err1161 := argvalue3.Read(context.Background(), jsProt1160)
    if err1161 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1162 := flag.Arg(1)
    mbTrans1163 := thrift.NewTMemoryBufferLen(len(arg1162))
    defer mbTrans1163.Close()
    _, err1164 := mbTrans1163.WriteString(arg1162)
    if err1164 != nil {
      Usage()
      return
    }
    factory1165 := thrift.NewTJSONProtocolFactory()
    jsProt1166 := factory1165.GetProtocol(mbTrans1163)
    argvalue0 := interfaces.NewUint64()
    err1167 := argvalue0.Read(context.Background(), jsProt1166)
    if err1167 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1168 := flag.Arg(2)
    mbTrans1169 := thrift.NewTMemoryBufferLen(len(arg1168))
    defer mbTrans1169.Close()
    _, err1170 := mbTrans1169.WriteString(arg1168)
    if err1170 != nil {
      Usage()
      return
    }
    factory1171 := thrift.NewTJSONProtocolFactory()
    jsProt1172 := factory1171.GetProtocol(mbTrans1169)
    argvalue1 := interfaces.NewUint64()
    err1173 := argvalue1.Read(context.Background(), jsProt1172)
    if err1173 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1174 := flag.Arg(3)
    mbTrans1175 := thrift.NewTMemoryBufferLen(len(arg1174))
    defer mbTrans1175.Close()
    _, err1176 := mbTrans1175.WriteString(arg1174)
    if err1176 != nil {
      Usage()
      return
    }
    factory1177 := thrift.NewTJSONProtocolFactory()
    jsProt1178 := factory1177.GetProtocol(mbTrans1175)
    argvalue2 := interfaces.NewUint64()
    err1179 := argvalue2.Read(context.Background(), jsProt1178)
    if err1179 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1181 := flag.Arg(1)
    mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
    defer mbTrans1182.Close()
    _, err1183 := mbTrans1182.WriteString(arg1181)
    if err1183 != nil {
      Usage()
      return
    }
    factory1184 := thrift.NewTJSONProtocolFactory()
    jsProt1185 := factory1184.GetProtocol(mbTrans1182)
    argvalue0 := interfaces.NewUint64()
    err1186 := argvalue0.Read(context.Background(), jsProt1185)
    if err1186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1187 := flag.Arg(2)
    mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
    defer mbTrans1188.Close()
    _, err1189 := mbTrans1188.WriteString(arg1187)
    if err1189 != nil {
      Usage()
      return
    }
    factory1190 := thrift.NewTJSONProtocolFactory()
    jsProt1191 := factory1190.GetProtocol(mbTrans1188)
    argvalue1 := interfaces.NewUint64()
    err1192 := argvalue1.Read(context.Background(), jsProt1191)
    if err1192 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1193 := flag.Arg(3)
    mbTrans1194 := thrift.NewTMemoryBufferLen(len(arg1193))
    defer mbTrans1194.Close()
    _, err1195 := mbTrans1194.WriteString(arg1193)
    if err1195 != nil {
      Usage()
      return
    }
    factory1196 := thrift.NewTJSONProtocolFactory()
    jsProt1197 := factory1196.GetProtocol(mbTrans1194)
    argvalue2 := interfaces.NewUint64()
    err1198 := argvalue2.Read(context.Background(), jsProt1197)
    if err1198 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1200 := flag.Arg(5)
    mbTrans1201 := thrift.NewTMemoryBufferLen(len(arg1200))
    defer mbTrans1201.Close()
    _, err1202 := mbTrans1201.WriteString(arg1200)
    if err1202 != nil {
      Usage()
      return
    }
    factory1203 := thrift.NewTJSONProtocolFactory()
    jsProt1204 := factory1203.GetProtocol(mbTrans1201)
    argvalue4 := interfaces.NewUint64()
    err1205 := argvalue4.Read(context.Background(), jsProt1204)
    if err1205 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1206 := flag.Arg(1)
    mbTrans1207 := thrift.NewTMemoryBufferLen(len(arg1206))
    defer mbTrans1207.Close()
    _, err1208 := mbTrans1207.WriteString(arg1206)
    if err1208 != nil {
      Usage()
      return
    }
    factory1209 := thrift.NewTJSONProtocolFactory()
    jsProt1210 := factory1209.GetProtocol(mbTrans1207)
    argvalue0 := interfaces.NewUint64()
    err1211 := argvalue0.Read(context.Background(), jsProt1210)
    if err1211 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1212 := flag.Arg(2)
    mbTrans1213 := thrift.NewTMemoryBufferLen(len(arg1212))
    defer mbTrans1213.Close()
    _, err1214 := mbTrans1213.WriteString(arg1212)
    if err1214 != nil {
      Usage()
      return
    }
    factory1215 := thrift.NewTJSONProtocolFactory()
    jsProt1216 := factory1215.GetProtocol(mbTrans1213)
    argvalue1 := interfaces.NewUint64()
    err1217 := argvalue1.Read(context.Background(), jsProt1216)
    if err1217 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1218 := flag.Arg(3)
    mbTrans1219 := thrift.NewTMemoryBufferLen(len(arg1218))
    defer mbTrans1219.Close()
    _, err1220 := mbTrans1219.WriteString(arg1218)
    if err1220 != nil {
      Usage()
      return
    }
    factory1221 := thrift.NewTJSONProtocolFactory()
    jsProt1222 := factory1221.GetProtocol(mbTrans1219)
    argvalue2 := interfaces.NewUint64()
    err1223 := argvalue2.Read(context.Background(), jsProt1222)
    if err1223 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1225 := flag.Arg(5)
    mbTrans1226 := thrift.NewTMemoryBufferLen(len(arg1225))
    defer mbTrans1226.Close()
    _, err1227 := mbTrans1226.WriteString(arg1225)
    if err1227 != nil {
      Usage()
      return
    }
    factory1228 := thrift.NewTJSONProtocolFactory()
    jsProt1229 := factory1228.GetProtocol(mbTrans1226)
    argvalue4 := interfaces.NewUint64()
    err1230 := argvalue4.Read(context.Background(), jsProt1229)
    if err1230 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1231 := flag.Arg(1)
    mbTrans1232 := thrift.NewTMemoryBufferLen(len(arg1231))
    defer mbTrans1232.Close()
    _, err1233 := mbTrans1232.WriteString(arg1231)
    if err1233 != nil {
      Usage()
      return
    }
    factory1234 := thrift.NewTJSONProtocolFactory()
    jsProt1235 := factory1234.GetProtocol(mbTrans1232)
    argvalue0 := interfaces.NewUint64()
    err1236 := argvalue0.Read(context.Background(), jsProt1235)
    if err1236 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1237 := flag.Arg(2)
    mbTrans1238 := thrift.NewTMemoryBufferLen(len(arg1237))
    defer mbTrans1238.Close()
    _, err1239 := mbTrans1238.WriteString(arg1237)
    if err1239 != nil {
      Usage()
      return
    }
    factory1240 := thrift.NewTJSONProtocolFactory()
    jsProt1241 := factory1240.GetProtocol(mbTrans1238)
    argvalue1 := interfaces.NewUint64()
    err1242 := argvalue1.Read(context.Background(), jsProt1241)
    if err1242 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1243 := flag.Arg(3)
    mbTrans1244 := thrift.NewTMemoryBufferLen(len(arg1243))
    defer mbTrans1244.Close()
    _, err1245 := mbTrans1244.WriteString(arg1243)
    if err1245 != nil {
      Usage()
      return
    }
    factory1246 := thrift.NewTJSONProtocolFactory()
    jsProt1247 := factory1246.GetProtocol(mbTrans1244)
    argvalue2 := interfaces.NewUint64()
    err1248 := argvalue2.Read(context.Background(), jsProt1247)
    if err1248 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1249 := flag.Arg(1)
    mbTrans1250 := thrift.NewTMemoryBufferLen(len(arg1249))
    defer mbTrans1250.Close()
    _, err1251 := mbTrans1250.WriteString(arg1249)
    if err1251 != nil {
      Usage()
      return
    }
    factory1252 := thrift.NewTJSONProtocolFactory()
    jsProt1253 := factory1252.GetProtocol(mbTrans1250)
    argvalue0 := interfaces.NewUint64()
    err1254 := argvalue0.Read(context.Background(), jsProt1253)
    if err1254 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1255 := flag.Arg(2)
    mbTrans1256 := thrift.NewTMemoryBufferLen(len(arg1255))
    defer mbTrans1256.Close()
    _, err1257 := mbTrans1256.WriteString(arg1255)
    if err1257 != nil {
      Usage()
      return
    }
    factory1258 := thrift.NewTJSONProtocolFactory()
    jsProt1259 := factory1258.GetProtocol(mbTrans1256)
    argvalue1 := interfaces.NewUint64()
    err1260 := argvalue1.Read(context.Background(), jsProt1259)
    if err1260 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1261 := flag.Arg(3)
    mbTrans1262 := thrift.NewTMemoryBufferLen(len(arg1261))
    defer mbTrans1262.Close()
    _, err1263 := mbTrans1262.WriteString(arg1261)
    if err1263 != nil {
      Usage()
      return
    }
    factory1264 := thrift.NewTJSONProtocolFactory()
    jsProt1265 := factory1264.GetProtocol(mbTrans1262)
    argvalue2 := interfaces.NewUint64()
    err1266 := argvalue2.Read(context.Background(), jsProt1265)
    if err1266 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1267 := flag.Arg(4)
    mbTrans1268 := thrift.NewTMemoryBufferLen(len(arg1267))
    defer mbTrans1268.Close()
    _, err1269 := mbTrans1268.WriteString(arg1267)
    if err1269 != nil {
      Usage()
      return
    }
    factory1270 := thrift.NewTJSONProtocolFactory()
    jsProt1271 := factory1270.GetProtocol(mbTrans1268)
    argvalue3 := interfaces.NewUint64()
    err1272 := argvalue3.Read(context.Background(), jsProt1271)
    if err1272 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1274 := (strconv.Atoi(flag.Arg(1)))
    if err1274 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1275 := flag.Arg(2)
    mbTrans1276 := thrift.NewTMemoryBufferLen(len(arg1275))
    defer mbTrans1276.Close()
    _, err1277 := mbTrans1276.WriteString(arg1275)
    if err1277 != nil {
      Usage()
      return
    }
    factory1278 := thrift.NewTJSONProtocolFactory()
    jsProt1279 := factory1278.GetProtocol(mbTrans1276)
    argvalue1 := interfaces.NewUint64()
    err1280 := argvalue1.Read(context.Background(), jsProt1279)
    if err1280 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1282 := (strconv.Atoi(flag.Arg(1)))
    if err1282 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1283 := (strconv.Atoi(flag.Arg(1)))
    if err1283 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1284 := (strconv.Atoi(flag.Arg(1)))
    if err1284 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1285 := flag.Arg(1)
    mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
    defer mbTrans1286.Close()
    _, err1287 := mbTrans1286.WriteString(arg1285)
    if err1287 != nil {
      Usage()
      return
    }
    factory1288 := thrift.NewTJSONProtocolFactory()
    jsProt1289 := factory1288.GetProtocol(mbTrans1286)
    argvalue0 := interfaces.NewUint64()
    err1290 := argvalue0.Read(context.Background(), jsProt1289)
    if err1290 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1291 := flag.Arg(2)
    mbTrans1292 := thrift.NewTMemoryBufferLen(len(arg1291))
    defer mbTrans1292.Close()
    _, err1293 := mbTrans1292.WriteString(arg1291)
    if err1293 != nil {
      Usage()
      return
    }
    factory1294 := thrift.NewTJSONProtocolFactory()
    jsProt1295 := factory1294.GetProtocol(mbTrans1292)
    argvalue1 := interfaces.NewUint64()
    err1296 := argvalue1.Read(context.Background(), jsProt1295)
    if err1296 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1297 := flag.Arg(3)
    mbTrans1298 := thrift.NewTMemoryBufferLen(len(arg1297))
    defer mbTrans1298.Close()
    _, err1299 := mbTrans1298.WriteString(arg1297)
    if err1299 != nil {
      Usage()
      return
    }
    factory1300 := thrift.NewTJSONProtocolFactory()
    jsProt1301 := factory1300.GetProtocol(mbTrans1298)
    argvalue2 := interfaces.NewUint64()
    err1302 := argvalue2.Read(context.Background(), jsProt1301)
    if err1302 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1303 := flag.Arg(4)
    mbTrans1304 := thrift.NewTMemoryBufferLen(len(arg1303))
    defer mbTrans1304.Close()
    _, err1305 := mbTrans1304.WriteString(arg1303)
    if err1305 != nil {
      Usage()
      return
    }
    factory1306 := thrift.NewTJSONProtocolFactory()
    jsProt1307 := factory1306.GetProtocol(mbTrans1304)
    argvalue3 := interfaces.NewUint64()
    err1308 := argvalue3.Read(context.Background(), jsProt1307)
    if err1308 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1309 := flag.Arg(1)
    mbTrans1310 := thrift.NewTMemoryBufferLen(len(arg1309))
    defer mbTrans1310.Close()
    _, err1311 := mbTrans1310.WriteString(arg1309)
    if err1311 != nil {
      Usage()
      return
    }
    factory1312 := thrift.NewTJSONProtocolFactory()
    jsProt1313 := factory1312.GetProtocol(mbTrans1310)
    argvalue0 := interfaces.NewUint64()
    err1314 := argvalue0.Read(context.Background(), jsProt1313)
    if err1314 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1315 := flag.Arg(2)
    mbTrans1316 := thrift.NewTMemoryBufferLen(len(arg1315))
    defer mbTrans1316.Close()
    _, err1317 := mbTrans1316.WriteString(arg1315)
    if err1317 != nil {
      Usage()
      return
    }
    factory1318 := thrift.NewTJSONProtocolFactory()
    jsProt1319 := factory1318.GetProtocol(mbTrans1316)
    argvalue1 := interfaces.NewUint64()
    err1320 := argvalue1.Read(context.Background(), jsProt1319)
    if err1320 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1321 := flag.Arg(3)
    mbTrans1322 := thrift.NewTMemoryBufferLen(len(arg1321))
    defer mbTrans1322.Close()
    _, err1323 := mbTrans1322.WriteString(arg1321)
    if err1323 != nil {
      Usage()
      return
    }
    factory1324 := thrift.NewTJSONProtocolFactory()
    jsProt1325 := factory1324.GetProtocol(mbTrans1322)
    argvalue2 := interfaces.NewUint64()
    err1326 := argvalue2.Read(context.Background(), jsProt1325)
    if err1326 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1328 := flag.Arg(1)
    mbTrans1329 := thrift.NewTMemoryBufferLen(len(arg1328))
    defer mbTrans1329.Close()
    _, err1330 := mbTrans1329.WriteString(arg1328)
    if err1330 != nil {
      Usage()
      return
    }
    factory1331 := thrift.NewTJSONProtocolFactory()
    jsProt1332 := factory1331.GetProtocol(mbTrans1329)
    argvalue0 := interfaces.NewUint64()
    err1333 := argvalue0.Read(context.Background(), jsProt1332)
    if err1333 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1334 := flag.Arg(2)
    mbTrans1335 := thrift.NewTMemoryBufferLen(len(arg1334))
    defer mbTrans1335.Close()
    _, err1336 := mbTrans1335.WriteString(arg1334)
    if err1336 != nil {
      Usage()
      return
    }
    factory1337 := thrift.NewTJSONProtocolFactory()
    jsProt1338 := factory1337.GetProtocol(mbTrans1335)
    argvalue1 := interfaces.NewUint64()
    err1339 := argvalue1.Read(context.Background(), jsProt1338)
    if err1339 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1340 := flag.Arg(3)
    mbTrans1341 := thrift.NewTMemoryBufferLen(len(arg1340))
    defer mbTrans1341.Close()
    _, err1342 := mbTrans1341.WriteString(arg1340)
    if err1342 != nil {
      Usage()
      return
    }
    factory1343 := thrift.NewTJSONProtocolFactory()
    jsProt1344 := factory1343.GetProtocol(mbTrans1341)
    argvalue2 := interfaces.NewUint64()
    err1345 := argvalue2.Read(context.Background(), jsProt1344)
    if err1345 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1347 := flag.Arg(5)
    mbTrans1348 := thrift.NewTMemoryBufferLen(len(arg1347))
    defer mbTrans1348.Close()
    _, err1349 := mbTrans1348.WriteString(arg1347)
    if err1349 != nil {
      Usage()
      return
    }
    factory1350 := thrift.NewTJSONProtocolFactory()
    jsProt1351 := factory1350.GetProtocol(mbTrans1348)
    argvalue4 := interfaces.NewUint64()
    err1352 := argvalue4.Read(context.Background(), jsProt1351)
    if err1352 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1353 := flag.Arg(1)
    mbTrans1354 := thrift.NewTMemoryBufferLen(len(arg1353))
    defer mbTrans1354.Close()
    _, err1355 := mbTrans1354.WriteString(arg1353)
    if err1355 != nil {
      Usage()
      return
    }
    factory1356 := thrift.NewTJSONProtocolFactory()
    jsProt1357 := factory1356.GetProtocol(mbTrans1354)
    argvalue0 := interfaces.NewUint64()
    err1358 := argvalue0.Read(context.Background(), jsProt1357)
    if err1358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1359 := flag.Arg(2)
    mbTrans1360 := thrift.NewTMemoryBufferLen(len(arg1359))
    defer mbTrans1360.Close()
    _, err1361 := mbTrans1360.WriteString(arg1359)
    if err1361 != nil {
      Usage()
      return
    }
    factory1362 := thrift.NewTJSONProtocolFactory()
    jsProt1363 := factory1362.GetProtocol(mbTrans1360)
    argvalue1 := interfaces.NewUint64()
    err1364 := argvalue1.Read(context.Background(), jsProt1363)
    if err1364 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1365 := flag.Arg(3)
    mbTrans1366 := thrift.NewTMemoryBufferLen(len(arg1365))
    defer mbTrans1366.Close()
    _, err1367 := mbTrans1366.WriteString(arg1365)
    if err1367 != nil {
      Usage()
      return
    }
    factory1368 := thrift.NewTJSONProtocolFactory()
    jsProt1369 := factory1368.GetProtocol(mbTrans1366)
    argvalue2 := interfaces.NewUint64()
    err1370 := argvalue2.Read(context.Background(), jsProt1369)
    if err1370 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1372 := flag.Arg(5)
    mbTrans1373 := thrift.NewTMemoryBufferLen(len(arg1372))
    defer mbTrans1373.Close()
    _, err1374 := mbTrans1373.WriteString(arg1372)
    if err1374 != nil {
      Usage()
      return
    }
    factory1375 := thrift.NewTJSONProtocolFactory()
    jsProt1376 := factory1375.GetProtocol(mbTrans1373)
    argvalue4 := interfaces.NewUint64()
    err1377 := argvalue4.Read(context.Background(), jsProt1376)
    if err1377 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1378 := flag.Arg(1)
    mbTrans1379 := thrift.NewTMemoryBufferLen(len(arg1378))
    defer mbTrans1379.Close()
    _, err1380 := mbTrans1379.WriteString(arg1378)
    if err1380 != nil {
      Usage()
      return
    }
    factory1381 := thrift.NewTJSONProtocolFactory()
    jsProt1382 := factory1381.GetProtocol(mbTrans1379)
    argvalue0 := interfaces.NewUint64()
    err1383 := argvalue0.Read(context.Background(), jsProt1382)
    if err1383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1384 := flag.Arg(2)
    mbTrans1385 := thrift.NewTMemoryBufferLen(len(arg1384))
    defer mbTrans1385.Close()
    _, err1386 := mbTrans1385.WriteString(arg1384)
    if err1386 != nil {
      Usage()
      return
    }
    factory1387 := thrift.NewTJSONProtocolFactory()
    jsProt1388 := factory1387.GetProtocol(mbTrans1385)
    argvalue1 := interfaces.NewUint64()
    err1389 := argvalue1.Read(context.Background(), jsProt1388)
    if err1389 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1390 := flag.Arg(3)
    mbTrans1391 := thrift.NewTMemoryBufferLen(len(arg1390))
    defer mbTrans1391.Close()
    _, err1392 := mbTrans1391.WriteString(arg1390)
    if err1392 != nil {
      Usage()
      return
    }
    factory1393 := thrift.NewTJSONProtocolFactory()
    jsProt1394 := factory1393.GetProtocol(mbTrans1391)
    argvalue2 := interfaces.NewUint64()
    err1395 := argvalue2.Read(context.Background(), jsProt1394)
    if err1395 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1396 := flag.Arg(1)
    mbTrans1397 := thrift.NewTMemoryBufferLen(len(arg1396))
    defer mbTrans1397.Close()
    _, err1398 := mbTrans1397.WriteString(arg1396)
    if err1398 != nil {
      Usage()
      return
    }
    factory1399 := thrift.NewTJSONProtocolFactory()
    jsProt1400 := factory1399.GetProtocol(mbTrans1397)
    argvalue0 := interfaces.NewUint64()
    err1401 := argvalue0.Read(context.Background(), jsProt1400)
    if err1401 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1402 := flag.Arg(2)
    mbTrans1403 := thrift.NewTMemoryBufferLen(len(arg1402))
    defer mbTrans1403.Close()
    _, err1404 := mbTrans1403.WriteString(arg1402)
    if err1404 != nil {
      Usage()
      return
    }
    factory1405 := thrift.NewTJSONProtocolFactory()
    jsProt1406 := factory1405.GetProtocol(mbTrans1403)
    argvalue1 := interfaces.NewUint64()
    err1407 := argvalue1.Read(context.Background(), jsProt1406)
    if err1407 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1408 := flag.Arg(3)
    mbTrans1409 := thrift.NewTMemoryBufferLen(len(arg1408))
    defer mbTrans1409.Close()
    _, err1410 := mbTrans1409.WriteString(arg1408)
    if err1410 != nil {
      Usage()
      return
    }
    factory1411 := thrift.NewTJSONProtocolFactory()
    jsProt1412 := factory1411.GetProtocol(mbTrans1409)
    argvalue2 := interfaces.NewUint64()
    err1413 := argvalue2.Read(context.Background(), jsProt1412)
    if err1413 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1414 := flag.Arg(4)
    mbTrans1415 := thrift.NewTMemoryBufferLen(len(arg1414))
    defer mbTrans1415.Close()
    _, err1416 := mbTrans1415.WriteString(arg1414)
    if err1416 != nil {
      Usage()
      return
    }
    factory1417 := thrift.NewTJSONProtocolFactory()
    jsProt1418 := factory1417.GetProtocol(mbTrans1415)
    argvalue3 := interfaces.NewUint64()
    err1419 := argvalue3.Read(context.Background(), jsProt1418)
    if err1419 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1421 := (strconv.Atoi(flag.Arg(1)))
    if err1421 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1422 := flag.Arg(2)
    mbTrans1423 := thrift.NewTMemoryBufferLen(len(arg1422))
    defer mbTrans1423.Close()
    _, err1424 := mbTrans1423.WriteString(arg1422)
    if err1424 != nil {
      Usage()
      return
    }
    factory1425 := thrift.NewTJSONProtocolFactory()
    jsProt1426 := factory1425.GetProtocol(mbTrans1423)
    argvalue1 := interfaces.NewUint64()
    err1427 := argvalue1.Read(context.Background(), jsProt1426)
    if err1427 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1429 := (strconv.Atoi(flag.Arg(1)))
    if err1429 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1430 := (strconv.Atoi(flag.Arg(1)))
    if err1430 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1431 := (strconv.Atoi(flag.Arg(1)))
    if err1431 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1432 := flag.Arg(1)
    mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
    defer mbTrans1433.Close()
    _, err1434 := mbTrans1433.WriteString(arg1432)
    if err1434 != nil {
      Usage()
      return
    }
    factory1435 := thrift.NewTJSONProtocolFactory()
    jsProt1436 := factory1435.GetProtocol(mbTrans1433)
    argvalue0 := interfaces.NewUint64()
    err1437 := argvalue0.Read(context.Background(), jsProt1436)
    if err1437 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1438 := flag.Arg(2)
    mbTrans1439 := thrift.NewTMemoryBufferLen(len(arg1438))
    defer mbTrans1439.Close()
    _, err1440 := mbTrans1439.WriteString(arg1438)
    if err1440 != nil {
      Usage()
      return
    }
    factory1441 := thrift.NewTJSONProtocolFactory()
    jsProt1442 := factory1441.GetProtocol(mbTrans1439)
    argvalue1 := interfaces.NewUint64()
    err1443 := argvalue1.Read(context.Background(), jsProt1442)
    if err1443 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1444 := flag.Arg(3)
    mbTrans1445 := thrift.NewTMemoryBufferLen(len(arg1444))
    defer mbTrans1445.Close()
    _, err1446 := mbTrans1445.WriteString(arg1444)
    if err1446 != nil {
      Usage()
      return
    }
    factory1447 := thrift.NewTJSONProtocolFactory()
    jsProt1448 := factory1447.GetProtocol(mbTrans1445)
    argvalue2 := interfaces.NewUint64()
    err1449 := argvalue2.Read(context.Background(), jsProt1448)
    if err1449 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1450 := flag.Arg(4)
    mbTrans1451 := thrift.NewTMemoryBufferLen(len(arg1450))
    defer mbTrans1451.Close()
    _, err1452 := mbTrans1451.WriteString(arg1450)
    if err1452 != nil {
      Usage()
      return
    }
    factory1453 := thrift.NewTJSONProtocolFactory()
    jsProt1454 := factory1453.GetProtocol(mbTrans1451)
    argvalue3 := interfaces.NewUint64()
    err1455 := argvalue3.Read(context.Background(), jsProt1454)
    if err1455 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1456 := flag.Arg(1)
    mbTrans1457 := thrift.NewTMemoryBufferLen(len(arg1456))
    defer mbTrans1457.Close()
    _, err1458 := mbTrans1457.WriteString(arg1456)
    if err1458 != nil {
      Usage()
      return
    }
    factory1459 := thrift.NewTJSONProtocolFactory()
    jsProt1460 := factory1459.GetProtocol(mbTrans1457)
    argvalue0 := interfaces.NewUint64()
    err1461 := argvalue0.Read(context.Background(), jsProt1460)
    if err1461 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1462 := flag.Arg(2)
    mbTrans1463 := thrift.NewTMemoryBufferLen(len(arg1462))
    defer mbTrans1463.Close()
    _, err1464 := mbTrans1463.WriteString(arg1462)
    if err1464 != nil {
      Usage()
      return
    }
    factory1465 := thrift.NewTJSONProtocolFactory()
    jsProt1466 := factory1465.GetProtocol(mbTrans1463)
    argvalue1 := interfaces.NewUint64()
    err1467 := argvalue1.Read(context.Background(), jsProt1466)
    if err1467 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1468 := flag.Arg(3)
    mbTrans1469 := thrift.NewTMemoryBufferLen(len(arg1468))
    defer mbTrans1469.Close()
    _, err1470 := mbTrans1469.WriteString(arg1468)
    if err1470 != nil {
      Usage()
      return
    }
    factory1471 := thrift.NewTJSONProtocolFactory()
    jsProt1472 := factory1471.GetProtocol(mbTrans1469)
    argvalue2 := interfaces.NewUint64()
    err1473 := argvalue2.Read(context.Background(), jsProt1472)
    if err1473 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1475 := flag.Arg(1)
    mbTrans1476 := thrift.NewTMemoryBufferLen(len(arg1475))
    defer mbTrans1476.Close()
    _, err1477 := mbTrans1476.WriteString(arg1475)
    if err1477 != nil {
      Usage()
      return
    }
    factory1478 := thrift.NewTJSONProtocolFactory()
    jsProt1479 := factory1478.GetProtocol(mbTrans1476)
    argvalue0 := interfaces.NewUint64()
    err1480 := argvalue0.Read(context.Background(), jsProt1479)
    if err1480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1481 := flag.Arg(2)
    mbTrans1482 := thrift.NewTMemoryBufferLen(len(arg1481))
    defer mbTrans1482.Close()
    _, err1483 := mbTrans1482.WriteString(arg1481)
    if err1483 != nil {
      Usage()
      return
    }
    factory1484 := thrift.NewTJSONProtocolFactory()
    jsProt1485 := factory1484.GetProtocol(mbTrans1482)
    argvalue1 := interfaces.NewUint64()
    err1486 := argvalue1.Read(context.Background(), jsProt1485)
    if err1486 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1487 := flag.Arg(3)
    mbTrans1488 := thrift.NewTMemoryBufferLen(len(arg1487))
    defer mbTrans1488.Close()
    _, err1489 := mbTrans1488.WriteString(arg1487)
    if err1489 != nil {
      Usage()
      return
    }
    factory1490 := thrift.NewTJSONProtocolFactory()
    jsProt1491 := factory1490.GetProtocol(mbTrans1488)
    argvalue2 := interfaces.NewUint64()
    err1492 := argvalue2.Read(context.Background(), jsProt1491)
    if err1492 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1494 := flag.Arg(5)
    mbTrans1495 := thrift.NewTMemoryBufferLen(len(arg1494))
    defer mbTrans1495.Close()
    _, err1496 := mbTrans1495.WriteString(arg1494)
    if err1496 != nil {
      Usage()
      return
    }
    factory1497 := thrift.NewTJSONProtocolFactory()
    jsProt1498 := factory1497.GetProtocol(mbTrans1495)
    argvalue4 := interfaces.NewUint64()
    err1499 := argvalue4.Read(context.Background(), jsProt1498)
    if err1499 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1500 := flag.Arg(1)
    mbTrans1501 := thrift.NewTMemoryBufferLen(len(arg1500))
    defer mbTrans1501.Close()
    _, err1502 := mbTrans1501.WriteString(arg1500)
    if err1502 != nil {
      Usage()
      return
    }
    factory1503 := thrift.NewTJSONProtocolFactory()
    jsProt1504 := factory1503.GetProtocol(mbTrans1501)
    argvalue0 := interfaces.NewUint64()
    err1505 := argvalue0.Read(context.Background(), jsProt1504)
    if err1505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1506 := flag.Arg(2)
    mbTrans1507 := thrift.NewTMemoryBufferLen(len(arg1506))
    defer mbTrans1507.Close()
    _, err1508 := mbTrans1507.WriteString(arg1506)
    if err1508 != nil {
      Usage()
      return
    }
    factory1509 := thrift.NewTJSONProtocolFactory()
    jsProt1510 := factory1509.GetProtocol(mbTrans1507)
    argvalue1 := interfaces.NewUint64()
    err1511 := argvalue1.Read(context.Background(), jsProt1510)
    if err1511 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1512 := flag.Arg(3)
    mbTrans1513 := thrift.NewTMemoryBufferLen(len(arg1512))
    defer mbTrans1513.Close()
    _, err1514 := mbTrans1513.WriteString(arg1512)
    if err1514 != nil {
      Usage()
      return
    }
    factory1515 := thrift.NewTJSONProtocolFactory()
    jsProt1516 := factory1515.GetProtocol(mbTrans1513)
    argvalue2 := interfaces.NewUint64()
    err1517 := argvalue2.Read(context.Background(), jsProt1516)
    if err1517 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1519 := flag.Arg(5)
    mbTrans1520 := thrift.NewTMemoryBufferLen(len(arg1519))
    defer mbTrans1520.Close()
    _, err1521 := mbTrans1520.WriteString(arg1519)
    if err1521 != nil {
      Usage()
      return
    }
    factory1522 := thrift.NewTJSONProtocolFactory()
    jsProt1523 := factory1522.GetProtocol(mbTrans1520)
    argvalue4 := interfaces.NewUint64()
    err1524 := argvalue4.Read(context.Background(), jsProt1523)
    if err1524 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1525 := flag.Arg(1)
    mbTrans1526 := thrift.NewTMemoryBufferLen(len(arg1525))
    defer mbTrans1526.Close()
    _, err1527 := mbTrans1526.WriteString(arg1525)
    if err1527 != nil {
      Usage()
      return
    }
    factory1528 := thrift.NewTJSONProtocolFactory()
    jsProt1529 := factory1528.GetProtocol(mbTrans1526)
    argvalue0 := interfaces.NewUint64()
    err1530 := argvalue0.Read(context.Background(), jsProt1529)
    if err1530 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1531 := flag.Arg(2)
    mbTrans1532 := thrift.NewTMemoryBufferLen(len(arg1531))
    defer mbTrans1532.Close()
    _, err1533 := mbTrans1532.WriteString(arg1531)
    if err1533 != nil {
      Usage()
      return
    }
    factory1534 := thrift.NewTJSONProtocolFactory()
    jsProt1535 := factory1534.GetProtocol(mbTrans1532)
    argvalue1 := interfaces.NewUint64()
    err1536 := argvalue1.Read(context.Background(), jsProt1535)
    if err1536 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1537 := flag.Arg(3)
    mbTrans1538 := thrift.NewTMemoryBufferLen(len(arg1537))
    defer mbTrans1538.Close()
    _, err1539 := mbTrans1538.WriteString(arg1537)
    if err1539 != nil {
      Usage()
      return
    }
    factory1540 := thrift.NewTJSONProtocolFactory()
    jsProt1541 := factory1540.GetProtocol(mbTrans1538)
    argvalue2 := interfaces.NewUint64()
    err1542 := argvalue2.Read(context.Background(), jsProt1541)
    if err1542 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1543 := flag.Arg(1)
    mbTrans1544 := thrift.NewTMemoryBufferLen(len(arg1543))
    defer mbTrans1544.Close()
    _, err1545 := mbTrans1544.WriteString(arg1543)
    if err1545 != nil {
      Usage()
      return
    }
    factory1546 := thrift.NewTJSONProtocolFactory()
    jsProt1547 := factory1546.GetProtocol(mbTrans1544)
    argvalue0 := interfaces.NewUint64()
    err1548 := argvalue0.Read(context.Background(), jsProt1547)
    if err1548 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1549 := flag.Arg(2)
    mbTrans1550 := thrift.NewTMemoryBufferLen(len(arg1549))
    defer mbTrans1550.Close()
    _, err1551 := mbTrans1550.WriteString(arg1549)
    if err1551 != nil {
      Usage()
      return
    }
    factory1552 := thrift.NewTJSONProtocolFactory()
    jsProt1553 := factory1552.GetProtocol(mbTrans1550)
    argvalue1 := interfaces.NewUint64()
    err1554 := argvalue1.Read(context.Background(), jsProt1553)
    if err1554 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1555 := flag.Arg(3)
    mbTrans1556 := thrift.NewTMemoryBufferLen(len(arg1555))
    defer mbTrans1556.Close()
    _, err1557 := mbTrans1556.WriteString(arg1555)
    if err1557 != nil {
      Usage()
      return
    }
    factory1558 := thrift.NewTJSONProtocolFactory()
    jsProt1559 := factory1558.GetProtocol(mbTrans1556)
    argvalue2 := interfaces.NewUint64()
    err1560 := argvalue2.Read(context.Background(), jsProt1559)
    if err1560 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1561 := flag.Arg(4)
    mbTrans1562 := thrift.NewTMemoryBufferLen(len(arg1561))
    defer mbTrans1562.Close()
    _, err1563 := mbTrans1562.WriteString(arg1561)
    if err1563 != nil {
      Usage()
      return
    }
    factory1564 := thrift.NewTJSONProtocolFactory()
    jsProt1565 := factory1564.GetProtocol(mbTrans1562)
    argvalue3 := interfaces.NewUint64()
    err1566 := argvalue3.Read(context.Background(), jsProt1565)
    if err1566 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1568 := (strconv.Atoi(flag.Arg(1)))
    if err1568 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1569 := flag.Arg(2)
    mbTrans1570 := thrift.NewTMemoryBufferLen(len(arg1569))
    defer mbTrans1570.Close()
    _, err1571 := mbTrans1570.WriteString(arg1569)
    if err1571 != nil {
      Usage()
      return
    }
    factory1572 := thrift.NewTJSONProtocolFactory()
    jsProt1573 := factory1572.GetProtocol(mbTrans1570)
    argvalue1 := interfaces.NewUint64()
    err1574 := argvalue1.Read(context.Background(), jsProt1573)
    if err1574 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1576 := (strconv.Atoi(flag.Arg(1)))
    if err1576 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1577 := (strconv.Atoi(flag.Arg(1)))
    if err1577 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1578 := (strconv.Atoi(flag.Arg(1)))
    if err1578 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1579 := flag.Arg(1)
    mbTrans1580 := thrift.NewTMemoryBufferLen(len(arg1579))
    defer mbTrans1580.Close()
    _, err1581 := mbTrans1580.WriteString(arg1579)
    if err1581 != nil {
      Usage()
      return
    }
    factory1582 := thrift.NewTJSONProtocolFactory()
    jsProt1583 := factory1582.GetProtocol(mbTrans1580)
    argvalue0 := interfaces.NewUint64()
    err1584 := argvalue0.Read(context.Background(), jsProt1583)
    if err1584 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1585 := flag.Arg(2)
    mbTrans1586 := thrift.NewTMemoryBufferLen(len(arg1585))
    defer mbTrans1586.Close()
    _, err1587 := mbTrans1586.WriteString(arg1585)
    if err1587 != nil {
      Usage()
      return
    }
    factory1588 := thrift.NewTJSONProtocolFactory()
    jsProt1589 := factory1588.GetProtocol(mbTrans1586)
    argvalue1 := interfaces.NewUint64()
    err1590 := argvalue1.Read(context.Background(), jsProt1589)
    if err1590 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1591 := flag.Arg(3)
    mbTrans1592 := thrift.NewTMemoryBufferLen(len(arg1591))
    defer mbTrans1592.Close()
    _, err1593 := mbTrans1592.WriteString(arg1591)
    if err1593 != nil {
      Usage()
      return
    }
    factory1594 := thrift.NewTJSONProtocolFactory()
    jsProt1595 := factory1594.GetProtocol(mbTrans1592)
    argvalue2 := interfaces.NewUint64()
    err1596 := argvalue2.Read(context.Background(), jsProt1595)
    if err1596 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1597 := flag.Arg(4)
    mbTrans1598 := thrift.NewTMemoryBufferLen(len(arg1597))
    defer mbTrans1598.Close()
    _, err1599 := mbTrans1598.WriteString(arg1597)
    if err1599 != nil {
      Usage()
      return
    }
    factory1600 := thrift.NewTJSONProtocolFactory()
    jsProt1601 := factory1600.GetProtocol(mbTrans1598)
    argvalue3 := interfaces.NewUint64()
    err1602 := argvalue3.Read(context.Background(), jsProt1601)
    if err1602 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1603 := flag.Arg(1)
    mbTrans1604 := thrift.NewTMemoryBufferLen(len(arg1603))
    defer mbTrans1604.Close()
    _, err1605 := mbTrans1604.WriteString(arg1603)
    if err1605 != nil {
      Usage()
      return
    }
    factory1606 := thrift.NewTJSONProtocolFactory()
    jsProt1607 := factory1606.GetProtocol(mbTrans1604)
    argvalue0 := interfaces.NewUint64()
    err1608 := argvalue0.Read(context.Background(), jsProt1607)
    if err1608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1609 := flag.Arg(2)
    mbTrans1610 := thrift.NewTMemoryBufferLen(len(arg1609))
    defer mbTrans1610.Close()
    _, err1611 := mbTrans1610.WriteString(arg1609)
    if err1611 != nil {
      Usage()
      return
    }
    factory1612 := thrift.NewTJSONProtocolFactory()
    jsProt1613 := factory1612.GetProtocol(mbTrans1610)
    argvalue1 := interfaces.NewUint64()
    err1614 := argvalue1.Read(context.Background(), jsProt1613)
    if err1614 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1615 := flag.Arg(3)
    mbTrans1616 := thrift.NewTMemoryBufferLen(len(arg1615))
    defer mbTrans1616.Close()
    _, err1617 := mbTrans1616.WriteString(arg1615)
    if err1617 != nil {
      Usage()
      return
    }
    factory1618 := thrift.NewTJSONProtocolFactory()
    jsProt1619 := factory1618.GetProtocol(mbTrans1616)
    argvalue2 := interfaces.NewUint64()
    err1620 := argvalue2.Read(context.Background(), jsProt1619)
    if err1620 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1622 := flag.Arg(1)
    mbTrans1623 := thrift.NewTMemoryBufferLen(len(arg1622))
    defer mbTrans1623.Close()
    _, err1624 := mbTrans1623.WriteString(arg1622)
    if err1624 != nil {
      Usage()
      return
    }
    factory1625 := thrift.NewTJSONProtocolFactory()
    jsProt1626 := factory1625.GetProtocol(mbTrans1623)
    argvalue0 := interfaces.NewUint64()
    err1627 := argvalue0.Read(context.Background(), jsProt1626)
    if err1627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1628 := flag.Arg(2)
    mbTrans1629 := thrift.NewTMemoryBufferLen(len(arg1628))
    defer mbTrans1629.Close()
    _, err1630 := mbTrans1629.WriteString(arg1628)
    if err1630 != nil {
      Usage()
      return
    }
    factory1631 := thrift.NewTJSONProtocolFactory()
    jsProt1632 := factory1631.GetProtocol(mbTrans1629)
    argvalue1 := interfaces.NewUint64()
    err1633 := argvalue1.Read(context.Background(), jsProt1632)
    if err1633 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1634 := flag.Arg(3)
    mbTrans1635 := thrift.NewTMemoryBufferLen(len(arg1634))
    defer mbTrans1635.Close()
    _, err1636 := mbTrans1635.WriteString(arg1634)
    if err1636 != nil {
      Usage()
      return
    }
    factory1637 := thrift.NewTJSONProtocolFactory()
    jsProt1638 := factory1637.GetProtocol(mbTrans1635)
    argvalue2 := interfaces.NewUint64()
    err1639 := argvalue2.Read(context.Background(), jsProt1638)
    if err1639 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1641 := flag.Arg(5)
    mbTrans1642 := thrift.NewTMemoryBufferLen(len(arg1641))
    defer mbTrans1642.Close()
    _, err1643 := mbTrans1642.WriteString(arg1641)
    if err1643 != nil {
      Usage()
      return
    }
    factory1644 := thrift.NewTJSONProtocolFactory()
    jsProt1645 := factory1644.GetProtocol(mbTrans1642)
    argvalue4 := interfaces.NewUint64()
    err1646 := argvalue4.Read(context.Background(), jsProt1645)
    if err1646 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1647 := flag.Arg(1)
    mbTrans1648 := thrift.NewTMemoryBufferLen(len(arg1647))
    defer mbTrans1648.Close()
    _, err1649 := mbTrans1648.WriteString(arg1647)
    if err1649 != nil {
      Usage()
      return
    }
    factory1650 := thrift.NewTJSONProtocolFactory()
    jsProt1651 := factory1650.GetProtocol(mbTrans1648)
    argvalue0 := interfaces.NewUint64()
    err1652 := argvalue0.Read(context.Background(), jsProt1651)
    if err1652 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1653 := flag.Arg(2)
    mbTrans1654 := thrift.NewTMemoryBufferLen(len(arg1653))
    defer mbTrans1654.Close()
    _, err1655 := mbTrans1654.WriteString(arg1653)
    if err1655 != nil {
      Usage()
      return
    }
    factory1656 := thrift.NewTJSONProtocolFactory()
    jsProt1657 := factory1656.GetProtocol(mbTrans1654)
    argvalue1 := interfaces.NewUint64()
    err1658 := argvalue1.Read(context.Background(), jsProt1657)
    if err1658 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1659 := flag.Arg(3)
    mbTrans1660 := thrift.NewTMemoryBufferLen(len(arg1659))
    defer mbTrans1660.Close()
    _, err1661 := mbTrans1660.WriteString(arg1659)
    if err1661 != nil {
      Usage()
      return
    }
    factory1662 := thrift.NewTJSONProtocolFactory()
    jsProt1663 := factory1662.GetProtocol(mbTrans1660)
    argvalue2 := interfaces.NewUint64()
    err1664 := argvalue2.Read(context.Background(), jsProt1663)
    if err1664 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1666 := flag.Arg(5)
    mbTrans1667 := thrift.NewTMemoryBufferLen(len(arg1666))
    defer mbTrans1667.Close()
    _, err1668 := mbTrans1667.WriteString(arg1666)
    if err1668 != nil {
      Usage()
      return
    }
    factory1669 := thrift.NewTJSONProtocolFactory()
    jsProt1670 := factory1669.GetProtocol(mbTrans1667)
    argvalue4 := interfaces.NewUint64()
    err1671 := argvalue4.Read(context.Background(), jsProt1670)
    if err1671 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1672 := flag.Arg(1)
    mbTrans1673 := thrift.NewTMemoryBufferLen(len(arg1672))
    defer mbTrans1673.Close()
    _, err1674 := mbTrans1673.WriteString(arg1672)
    if err1674 != nil {
      Usage()
      return
    }
    factory1675 := thrift.NewTJSONProtocolFactory()
    jsProt1676 := factory1675.GetProtocol(mbTrans1673)
    argvalue0 := interfaces.NewUint64()
    err1677 := argvalue0.Read(context.Background(), jsProt1676)
    if err1677 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1678 := flag.Arg(2)
    mbTrans1679 := thrift.NewTMemoryBufferLen(len(arg1678))
    defer mbTrans1679.Close()
    _, err1680 := mbTrans1679.WriteString(arg1678)
    if err1680 != nil {
      Usage()
      return
    }
    factory1681 := thrift.NewTJSONProtocolFactory()
    jsProt1682 := factory1681.GetProtocol(mbTrans1679)
    argvalue1 := interfaces.NewUint64()
    err1683 := argvalue1.Read(context.Background(), jsProt1682)
    if err1683 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1684 := flag.Arg(3)
    mbTrans1685 := thrift.NewTMemoryBufferLen(len(arg1684))
    defer mbTrans1685.Close()
    _, err1686 := mbTrans1685.WriteString(arg1684)
    if err1686 != nil {
      Usage()
      return
    }
    factory1687 := thrift.NewTJSONProtocolFactory()
    jsProt1688 := factory1687.GetProtocol(mbTrans1685)
    argvalue2 := interfaces.NewUint64()
    err1689 := argvalue2.Read(context.Background(), jsProt1688)
    if err1689 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_action_return_value":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetActionReturnValue requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetActionReturnValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_code_hash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetCodeHash requires 2 args")
      flag.Usage()
    }
    arg1691 := flag.Arg(1)
    mbTrans1692 := thrift.NewTMemoryBufferLen(len(arg1691))
    defer mbTrans1692.Close()
    _, err1693 := mbTrans1692.WriteString(arg1691)
    if err1693 != nil {
      Usage()
      return
    }
    factory1694 := thrift.NewTJSONProtocolFactory()
    jsProt1695 := factory1694.GetProtocol(mbTrans1692)
    argvalue0 := interfaces.NewUint64()
    err1696 := argvalue0.Read(context.Background(), jsProt1695)
    if err1696 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1697 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1697 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetCodeHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "sha3":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sha3 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    tmp1, err1699 := (strconv.Atoi(flag.Arg(2)))
    if err1699 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Sha3(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blake2_f":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "Blake2F requires 6 args")
      flag.Usage()
    }
    argvalue0, err1700 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    tmp5, err1705 := (strconv.Atoi(flag.Arg(6)))
    if err1705 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.Blake2F(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "k1_recover":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "K1Recover requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.K1Recover(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_add":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Add requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Add(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_mul":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Mul requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Mul(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_pair":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AltBn128Pair requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.AltBn128Pair(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mod_exp":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ModExp requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.ModExp(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
