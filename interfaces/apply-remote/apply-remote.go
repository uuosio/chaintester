// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg575 := flag.Arg(1)
    mbTrans576 := thrift.NewTMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewTJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue0 := interfaces.NewUint64()
    err580 := argvalue0.Read(context.Background(), jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg581 := flag.Arg(1)
    mbTrans582 := thrift.NewTMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewTJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue0 := interfaces.NewUint64()
    err586 := argvalue0.Read(context.Background(), jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err587 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err587 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err588 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err588 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err589 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err589 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg591 := flag.Arg(1)
    mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
    defer mbTrans592.Close()
    _, err593 := mbTrans592.WriteString(arg591)
    if err593 != nil {
      Usage()
      return
    }
    factory594 := thrift.NewTJSONProtocolFactory()
    jsProt595 := factory594.GetProtocol(mbTrans592)
    argvalue0 := interfaces.NewUint64()
    err596 := argvalue0.Read(context.Background(), jsProt595)
    if err596 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg598 := flag.Arg(1)
    mbTrans599 := thrift.NewTMemoryBufferLen(len(arg598))
    defer mbTrans599.Close()
    _, err600 := mbTrans599.WriteString(arg598)
    if err600 != nil {
      Usage()
      return
    }
    factory601 := thrift.NewTJSONProtocolFactory()
    jsProt602 := factory601.GetProtocol(mbTrans599)
    argvalue0 := interfaces.NewUint64()
    err603 := argvalue0.Read(context.Background(), jsProt602)
    if err603 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg604 := flag.Arg(1)
    mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil {
      Usage()
      return
    }
    factory607 := thrift.NewTJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    argvalue0 := interfaces.NewUint64()
    err609 := argvalue0.Read(context.Background(), jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg616 := flag.Arg(1)
    mbTrans617 := thrift.NewTMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewTJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue0 := interfaces.NewUint64()
    err621 := argvalue0.Read(context.Background(), jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg622 := flag.Arg(2)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue1 := interfaces.NewUint64()
    err627 := argvalue1.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg630 := flag.Arg(5)
    mbTrans631 := thrift.NewTMemoryBufferLen(len(arg630))
    defer mbTrans631.Close()
    _, err632 := mbTrans631.WriteString(arg630)
    if err632 != nil {
      Usage()
      return
    }
    factory633 := thrift.NewTJSONProtocolFactory()
    jsProt634 := factory633.GetProtocol(mbTrans631)
    argvalue4 := interfaces.NewUint64()
    err635 := argvalue4.Read(context.Background(), jsProt634)
    if err635 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg636 := flag.Arg(1)
    mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
    defer mbTrans637.Close()
    _, err638 := mbTrans637.WriteString(arg636)
    if err638 != nil {
      Usage()
      return
    }
    factory639 := thrift.NewTJSONProtocolFactory()
    jsProt640 := factory639.GetProtocol(mbTrans637)
    argvalue0 := interfaces.NewUint64()
    err641 := argvalue0.Read(context.Background(), jsProt640)
    if err641 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg642 := flag.Arg(2)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil {
      Usage()
      return
    }
    factory645 := thrift.NewTJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    argvalue1 := interfaces.NewUint64()
    err647 := argvalue1.Read(context.Background(), jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg648 := flag.Arg(1)
    mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
    defer mbTrans649.Close()
    _, err650 := mbTrans649.WriteString(arg648)
    if err650 != nil {
      Usage()
      return
    }
    factory651 := thrift.NewTJSONProtocolFactory()
    jsProt652 := factory651.GetProtocol(mbTrans649)
    argvalue0 := interfaces.NewUint64()
    err653 := argvalue0.Read(context.Background(), jsProt652)
    if err653 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err656 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err656 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg657 := flag.Arg(1)
    mbTrans658 := thrift.NewTMemoryBufferLen(len(arg657))
    defer mbTrans658.Close()
    _, err659 := mbTrans658.WriteString(arg657)
    if err659 != nil {
      Usage()
      return
    }
    factory660 := thrift.NewTJSONProtocolFactory()
    jsProt661 := factory660.GetProtocol(mbTrans658)
    argvalue0 := interfaces.NewUint64()
    err662 := argvalue0.Read(context.Background(), jsProt661)
    if err662 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg668 := flag.Arg(1)
    mbTrans669 := thrift.NewTMemoryBufferLen(len(arg668))
    defer mbTrans669.Close()
    _, err670 := mbTrans669.WriteString(arg668)
    if err670 != nil {
      Usage()
      return
    }
    factory671 := thrift.NewTJSONProtocolFactory()
    jsProt672 := factory671.GetProtocol(mbTrans669)
    argvalue0 := interfaces.NewUint64()
    err673 := argvalue0.Read(context.Background(), jsProt672)
    if err673 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg675 := flag.Arg(1)
    mbTrans676 := thrift.NewTMemoryBufferLen(len(arg675))
    defer mbTrans676.Close()
    _, err677 := mbTrans676.WriteString(arg675)
    if err677 != nil {
      Usage()
      return
    }
    factory678 := thrift.NewTJSONProtocolFactory()
    jsProt679 := factory678.GetProtocol(mbTrans676)
    argvalue0 := interfaces.NewUint64()
    err680 := argvalue0.Read(context.Background(), jsProt679)
    if err680 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg681 := flag.Arg(1)
    mbTrans682 := thrift.NewTMemoryBufferLen(len(arg681))
    defer mbTrans682.Close()
    _, err683 := mbTrans682.WriteString(arg681)
    if err683 != nil {
      Usage()
      return
    }
    factory684 := thrift.NewTJSONProtocolFactory()
    jsProt685 := factory684.GetProtocol(mbTrans682)
    argvalue0 := interfaces.NewUint64()
    err686 := argvalue0.Read(context.Background(), jsProt685)
    if err686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg687 := flag.Arg(1)
    mbTrans688 := thrift.NewTMemoryBufferLen(len(arg687))
    defer mbTrans688.Close()
    _, err689 := mbTrans688.WriteString(arg687)
    if err689 != nil {
      Usage()
      return
    }
    factory690 := thrift.NewTJSONProtocolFactory()
    jsProt691 := factory690.GetProtocol(mbTrans688)
    argvalue0 := interfaces.NewUint64()
    err692 := argvalue0.Read(context.Background(), jsProt691)
    if err692 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg693 := flag.Arg(1)
    mbTrans694 := thrift.NewTMemoryBufferLen(len(arg693))
    defer mbTrans694.Close()
    _, err695 := mbTrans694.WriteString(arg693)
    if err695 != nil {
      Usage()
      return
    }
    factory696 := thrift.NewTJSONProtocolFactory()
    jsProt697 := factory696.GetProtocol(mbTrans694)
    argvalue0 := interfaces.NewUint64()
    err698 := argvalue0.Read(context.Background(), jsProt697)
    if err698 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg699 := flag.Arg(2)
    mbTrans700 := thrift.NewTMemoryBufferLen(len(arg699))
    defer mbTrans700.Close()
    _, err701 := mbTrans700.WriteString(arg699)
    if err701 != nil {
      Usage()
      return
    }
    factory702 := thrift.NewTJSONProtocolFactory()
    jsProt703 := factory702.GetProtocol(mbTrans700)
    argvalue1 := interfaces.NewUint64()
    err704 := argvalue1.Read(context.Background(), jsProt703)
    if err704 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg705 := flag.Arg(1)
    mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
    defer mbTrans706.Close()
    _, err707 := mbTrans706.WriteString(arg705)
    if err707 != nil {
      Usage()
      return
    }
    factory708 := thrift.NewTJSONProtocolFactory()
    jsProt709 := factory708.GetProtocol(mbTrans706)
    argvalue0 := interfaces.NewUint64()
    err710 := argvalue0.Read(context.Background(), jsProt709)
    if err710 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg718 := flag.Arg(2)
    mbTrans719 := thrift.NewTMemoryBufferLen(len(arg718))
    defer mbTrans719.Close()
    _, err720 := mbTrans719.WriteString(arg718)
    if err720 != nil {
      Usage()
      return
    }
    factory721 := thrift.NewTJSONProtocolFactory()
    jsProt722 := factory721.GetProtocol(mbTrans719)
    argvalue1 := interfaces.NewUint64()
    err723 := argvalue1.Read(context.Background(), jsProt722)
    if err723 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err724 := (strconv.Atoi(flag.Arg(1)))
    if err724 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg744 := flag.Arg(2)
    mbTrans745 := thrift.NewTMemoryBufferLen(len(arg744))
    defer mbTrans745.Close()
    _, err746 := mbTrans745.WriteString(arg744)
    if err746 != nil {
      Usage()
      return
    }
    factory747 := thrift.NewTJSONProtocolFactory()
    jsProt748 := factory747.GetProtocol(mbTrans745)
    argvalue1 := interfaces.NewUint64()
    err749 := argvalue1.Read(context.Background(), jsProt748)
    if err749 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err751 := (strconv.Atoi(flag.Arg(4)))
    if err751 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err753 := (strconv.Atoi(flag.Arg(1)))
    if err753 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err754 := (strconv.Atoi(flag.Arg(2)))
    if err754 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err755 := (strconv.Atoi(flag.Arg(1)))
    if err755 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg756 := flag.Arg(1)
    mbTrans757 := thrift.NewTMemoryBufferLen(len(arg756))
    defer mbTrans757.Close()
    _, err758 := mbTrans757.WriteString(arg756)
    if err758 != nil {
      Usage()
      return
    }
    factory759 := thrift.NewTJSONProtocolFactory()
    jsProt760 := factory759.GetProtocol(mbTrans757)
    argvalue0 := interfaces.NewUint64()
    err761 := argvalue0.Read(context.Background(), jsProt760)
    if err761 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg762 := flag.Arg(2)
    mbTrans763 := thrift.NewTMemoryBufferLen(len(arg762))
    defer mbTrans763.Close()
    _, err764 := mbTrans763.WriteString(arg762)
    if err764 != nil {
      Usage()
      return
    }
    factory765 := thrift.NewTJSONProtocolFactory()
    jsProt766 := factory765.GetProtocol(mbTrans763)
    argvalue1 := interfaces.NewUint64()
    err767 := argvalue1.Read(context.Background(), jsProt766)
    if err767 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg768 := flag.Arg(3)
    mbTrans769 := thrift.NewTMemoryBufferLen(len(arg768))
    defer mbTrans769.Close()
    _, err770 := mbTrans769.WriteString(arg768)
    if err770 != nil {
      Usage()
      return
    }
    factory771 := thrift.NewTJSONProtocolFactory()
    jsProt772 := factory771.GetProtocol(mbTrans769)
    argvalue2 := interfaces.NewUint64()
    err773 := argvalue2.Read(context.Background(), jsProt772)
    if err773 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg774 := flag.Arg(4)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil {
      Usage()
      return
    }
    factory777 := thrift.NewTJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    argvalue3 := interfaces.NewUint64()
    err779 := argvalue3.Read(context.Background(), jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err781 := (strconv.Atoi(flag.Arg(1)))
    if err781 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg782 := flag.Arg(2)
    mbTrans783 := thrift.NewTMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil {
      Usage()
      return
    }
    factory785 := thrift.NewTJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    argvalue1 := interfaces.NewUint64()
    err787 := argvalue1.Read(context.Background(), jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err789 := (strconv.Atoi(flag.Arg(1)))
    if err789 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err790 := (strconv.Atoi(flag.Arg(1)))
    if err790 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err791 := (strconv.Atoi(flag.Arg(1)))
    if err791 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err792 := (strconv.Atoi(flag.Arg(1)))
    if err792 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg793 := flag.Arg(1)
    mbTrans794 := thrift.NewTMemoryBufferLen(len(arg793))
    defer mbTrans794.Close()
    _, err795 := mbTrans794.WriteString(arg793)
    if err795 != nil {
      Usage()
      return
    }
    factory796 := thrift.NewTJSONProtocolFactory()
    jsProt797 := factory796.GetProtocol(mbTrans794)
    argvalue0 := interfaces.NewUint64()
    err798 := argvalue0.Read(context.Background(), jsProt797)
    if err798 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg799 := flag.Arg(2)
    mbTrans800 := thrift.NewTMemoryBufferLen(len(arg799))
    defer mbTrans800.Close()
    _, err801 := mbTrans800.WriteString(arg799)
    if err801 != nil {
      Usage()
      return
    }
    factory802 := thrift.NewTJSONProtocolFactory()
    jsProt803 := factory802.GetProtocol(mbTrans800)
    argvalue1 := interfaces.NewUint64()
    err804 := argvalue1.Read(context.Background(), jsProt803)
    if err804 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg805 := flag.Arg(3)
    mbTrans806 := thrift.NewTMemoryBufferLen(len(arg805))
    defer mbTrans806.Close()
    _, err807 := mbTrans806.WriteString(arg805)
    if err807 != nil {
      Usage()
      return
    }
    factory808 := thrift.NewTJSONProtocolFactory()
    jsProt809 := factory808.GetProtocol(mbTrans806)
    argvalue2 := interfaces.NewUint64()
    err810 := argvalue2.Read(context.Background(), jsProt809)
    if err810 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg811 := flag.Arg(4)
    mbTrans812 := thrift.NewTMemoryBufferLen(len(arg811))
    defer mbTrans812.Close()
    _, err813 := mbTrans812.WriteString(arg811)
    if err813 != nil {
      Usage()
      return
    }
    factory814 := thrift.NewTJSONProtocolFactory()
    jsProt815 := factory814.GetProtocol(mbTrans812)
    argvalue3 := interfaces.NewUint64()
    err816 := argvalue3.Read(context.Background(), jsProt815)
    if err816 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg817 := flag.Arg(1)
    mbTrans818 := thrift.NewTMemoryBufferLen(len(arg817))
    defer mbTrans818.Close()
    _, err819 := mbTrans818.WriteString(arg817)
    if err819 != nil {
      Usage()
      return
    }
    factory820 := thrift.NewTJSONProtocolFactory()
    jsProt821 := factory820.GetProtocol(mbTrans818)
    argvalue0 := interfaces.NewUint64()
    err822 := argvalue0.Read(context.Background(), jsProt821)
    if err822 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg823 := flag.Arg(2)
    mbTrans824 := thrift.NewTMemoryBufferLen(len(arg823))
    defer mbTrans824.Close()
    _, err825 := mbTrans824.WriteString(arg823)
    if err825 != nil {
      Usage()
      return
    }
    factory826 := thrift.NewTJSONProtocolFactory()
    jsProt827 := factory826.GetProtocol(mbTrans824)
    argvalue1 := interfaces.NewUint64()
    err828 := argvalue1.Read(context.Background(), jsProt827)
    if err828 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg829 := flag.Arg(3)
    mbTrans830 := thrift.NewTMemoryBufferLen(len(arg829))
    defer mbTrans830.Close()
    _, err831 := mbTrans830.WriteString(arg829)
    if err831 != nil {
      Usage()
      return
    }
    factory832 := thrift.NewTJSONProtocolFactory()
    jsProt833 := factory832.GetProtocol(mbTrans830)
    argvalue2 := interfaces.NewUint64()
    err834 := argvalue2.Read(context.Background(), jsProt833)
    if err834 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg835 := flag.Arg(4)
    mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
    defer mbTrans836.Close()
    _, err837 := mbTrans836.WriteString(arg835)
    if err837 != nil {
      Usage()
      return
    }
    factory838 := thrift.NewTJSONProtocolFactory()
    jsProt839 := factory838.GetProtocol(mbTrans836)
    argvalue3 := interfaces.NewUint64()
    err840 := argvalue3.Read(context.Background(), jsProt839)
    if err840 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg841 := flag.Arg(1)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue0 := interfaces.NewUint64()
    err846 := argvalue0.Read(context.Background(), jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg847 := flag.Arg(2)
    mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
    defer mbTrans848.Close()
    _, err849 := mbTrans848.WriteString(arg847)
    if err849 != nil {
      Usage()
      return
    }
    factory850 := thrift.NewTJSONProtocolFactory()
    jsProt851 := factory850.GetProtocol(mbTrans848)
    argvalue1 := interfaces.NewUint64()
    err852 := argvalue1.Read(context.Background(), jsProt851)
    if err852 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg853 := flag.Arg(3)
    mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
    defer mbTrans854.Close()
    _, err855 := mbTrans854.WriteString(arg853)
    if err855 != nil {
      Usage()
      return
    }
    factory856 := thrift.NewTJSONProtocolFactory()
    jsProt857 := factory856.GetProtocol(mbTrans854)
    argvalue2 := interfaces.NewUint64()
    err858 := argvalue2.Read(context.Background(), jsProt857)
    if err858 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg859 := flag.Arg(4)
    mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
    defer mbTrans860.Close()
    _, err861 := mbTrans860.WriteString(arg859)
    if err861 != nil {
      Usage()
      return
    }
    factory862 := thrift.NewTJSONProtocolFactory()
    jsProt863 := factory862.GetProtocol(mbTrans860)
    argvalue3 := interfaces.NewUint64()
    err864 := argvalue3.Read(context.Background(), jsProt863)
    if err864 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg865 := flag.Arg(1)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue0 := interfaces.NewUint64()
    err870 := argvalue0.Read(context.Background(), jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg871 := flag.Arg(2)
    mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
    defer mbTrans872.Close()
    _, err873 := mbTrans872.WriteString(arg871)
    if err873 != nil {
      Usage()
      return
    }
    factory874 := thrift.NewTJSONProtocolFactory()
    jsProt875 := factory874.GetProtocol(mbTrans872)
    argvalue1 := interfaces.NewUint64()
    err876 := argvalue1.Read(context.Background(), jsProt875)
    if err876 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg877 := flag.Arg(3)
    mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
    defer mbTrans878.Close()
    _, err879 := mbTrans878.WriteString(arg877)
    if err879 != nil {
      Usage()
      return
    }
    factory880 := thrift.NewTJSONProtocolFactory()
    jsProt881 := factory880.GetProtocol(mbTrans878)
    argvalue2 := interfaces.NewUint64()
    err882 := argvalue2.Read(context.Background(), jsProt881)
    if err882 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg883 := flag.Arg(1)
    mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
    defer mbTrans884.Close()
    _, err885 := mbTrans884.WriteString(arg883)
    if err885 != nil {
      Usage()
      return
    }
    factory886 := thrift.NewTJSONProtocolFactory()
    jsProt887 := factory886.GetProtocol(mbTrans884)
    argvalue0 := interfaces.NewUint64()
    err888 := argvalue0.Read(context.Background(), jsProt887)
    if err888 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg889 := flag.Arg(2)
    mbTrans890 := thrift.NewTMemoryBufferLen(len(arg889))
    defer mbTrans890.Close()
    _, err891 := mbTrans890.WriteString(arg889)
    if err891 != nil {
      Usage()
      return
    }
    factory892 := thrift.NewTJSONProtocolFactory()
    jsProt893 := factory892.GetProtocol(mbTrans890)
    argvalue1 := interfaces.NewUint64()
    err894 := argvalue1.Read(context.Background(), jsProt893)
    if err894 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg895 := flag.Arg(3)
    mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
    defer mbTrans896.Close()
    _, err897 := mbTrans896.WriteString(arg895)
    if err897 != nil {
      Usage()
      return
    }
    factory898 := thrift.NewTJSONProtocolFactory()
    jsProt899 := factory898.GetProtocol(mbTrans896)
    argvalue2 := interfaces.NewUint64()
    err900 := argvalue2.Read(context.Background(), jsProt899)
    if err900 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg901 := flag.Arg(4)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue3 := interfaces.NewUint64()
    err906 := argvalue3.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg907 := flag.Arg(5)
    mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
    defer mbTrans908.Close()
    _, err909 := mbTrans908.WriteString(arg907)
    if err909 != nil {
      Usage()
      return
    }
    factory910 := thrift.NewTJSONProtocolFactory()
    jsProt911 := factory910.GetProtocol(mbTrans908)
    argvalue4 := interfaces.NewUint64()
    err912 := argvalue4.Read(context.Background(), jsProt911)
    if err912 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err913 := (strconv.Atoi(flag.Arg(1)))
    if err913 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg914 := flag.Arg(2)
    mbTrans915 := thrift.NewTMemoryBufferLen(len(arg914))
    defer mbTrans915.Close()
    _, err916 := mbTrans915.WriteString(arg914)
    if err916 != nil {
      Usage()
      return
    }
    factory917 := thrift.NewTJSONProtocolFactory()
    jsProt918 := factory917.GetProtocol(mbTrans915)
    argvalue1 := interfaces.NewUint64()
    err919 := argvalue1.Read(context.Background(), jsProt918)
    if err919 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg920 := flag.Arg(3)
    mbTrans921 := thrift.NewTMemoryBufferLen(len(arg920))
    defer mbTrans921.Close()
    _, err922 := mbTrans921.WriteString(arg920)
    if err922 != nil {
      Usage()
      return
    }
    factory923 := thrift.NewTJSONProtocolFactory()
    jsProt924 := factory923.GetProtocol(mbTrans921)
    argvalue2 := interfaces.NewUint64()
    err925 := argvalue2.Read(context.Background(), jsProt924)
    if err925 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err926 := (strconv.Atoi(flag.Arg(1)))
    if err926 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err927 := (strconv.Atoi(flag.Arg(1)))
    if err927 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err928 := (strconv.Atoi(flag.Arg(1)))
    if err928 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg929 := flag.Arg(1)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue0 := interfaces.NewUint64()
    err934 := argvalue0.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg935 := flag.Arg(2)
    mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
    defer mbTrans936.Close()
    _, err937 := mbTrans936.WriteString(arg935)
    if err937 != nil {
      Usage()
      return
    }
    factory938 := thrift.NewTJSONProtocolFactory()
    jsProt939 := factory938.GetProtocol(mbTrans936)
    argvalue1 := interfaces.NewUint64()
    err940 := argvalue1.Read(context.Background(), jsProt939)
    if err940 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg941 := flag.Arg(3)
    mbTrans942 := thrift.NewTMemoryBufferLen(len(arg941))
    defer mbTrans942.Close()
    _, err943 := mbTrans942.WriteString(arg941)
    if err943 != nil {
      Usage()
      return
    }
    factory944 := thrift.NewTJSONProtocolFactory()
    jsProt945 := factory944.GetProtocol(mbTrans942)
    argvalue2 := interfaces.NewUint64()
    err946 := argvalue2.Read(context.Background(), jsProt945)
    if err946 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg947 := flag.Arg(4)
    mbTrans948 := thrift.NewTMemoryBufferLen(len(arg947))
    defer mbTrans948.Close()
    _, err949 := mbTrans948.WriteString(arg947)
    if err949 != nil {
      Usage()
      return
    }
    factory950 := thrift.NewTJSONProtocolFactory()
    jsProt951 := factory950.GetProtocol(mbTrans948)
    argvalue3 := interfaces.NewUint64()
    err952 := argvalue3.Read(context.Background(), jsProt951)
    if err952 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg953 := flag.Arg(1)
    mbTrans954 := thrift.NewTMemoryBufferLen(len(arg953))
    defer mbTrans954.Close()
    _, err955 := mbTrans954.WriteString(arg953)
    if err955 != nil {
      Usage()
      return
    }
    factory956 := thrift.NewTJSONProtocolFactory()
    jsProt957 := factory956.GetProtocol(mbTrans954)
    argvalue0 := interfaces.NewUint64()
    err958 := argvalue0.Read(context.Background(), jsProt957)
    if err958 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg959 := flag.Arg(2)
    mbTrans960 := thrift.NewTMemoryBufferLen(len(arg959))
    defer mbTrans960.Close()
    _, err961 := mbTrans960.WriteString(arg959)
    if err961 != nil {
      Usage()
      return
    }
    factory962 := thrift.NewTJSONProtocolFactory()
    jsProt963 := factory962.GetProtocol(mbTrans960)
    argvalue1 := interfaces.NewUint64()
    err964 := argvalue1.Read(context.Background(), jsProt963)
    if err964 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg965 := flag.Arg(3)
    mbTrans966 := thrift.NewTMemoryBufferLen(len(arg965))
    defer mbTrans966.Close()
    _, err967 := mbTrans966.WriteString(arg965)
    if err967 != nil {
      Usage()
      return
    }
    factory968 := thrift.NewTJSONProtocolFactory()
    jsProt969 := factory968.GetProtocol(mbTrans966)
    argvalue2 := interfaces.NewUint64()
    err970 := argvalue2.Read(context.Background(), jsProt969)
    if err970 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg971 := flag.Arg(4)
    mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
    defer mbTrans972.Close()
    _, err973 := mbTrans972.WriteString(arg971)
    if err973 != nil {
      Usage()
      return
    }
    factory974 := thrift.NewTJSONProtocolFactory()
    jsProt975 := factory974.GetProtocol(mbTrans972)
    argvalue3 := interfaces.NewUint64()
    err976 := argvalue3.Read(context.Background(), jsProt975)
    if err976 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg977 := flag.Arg(1)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue0 := interfaces.NewUint64()
    err982 := argvalue0.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg983 := flag.Arg(2)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue1 := interfaces.NewUint64()
    err988 := argvalue1.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg989 := flag.Arg(3)
    mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
    defer mbTrans990.Close()
    _, err991 := mbTrans990.WriteString(arg989)
    if err991 != nil {
      Usage()
      return
    }
    factory992 := thrift.NewTJSONProtocolFactory()
    jsProt993 := factory992.GetProtocol(mbTrans990)
    argvalue2 := interfaces.NewUint64()
    err994 := argvalue2.Read(context.Background(), jsProt993)
    if err994 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg995 := flag.Arg(4)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue3 := interfaces.NewUint64()
    err1000 := argvalue3.Read(context.Background(), jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1001 := flag.Arg(5)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue4 := interfaces.NewUint64()
    err1006 := argvalue4.Read(context.Background(), jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg1007 := flag.Arg(1)
    mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
    defer mbTrans1008.Close()
    _, err1009 := mbTrans1008.WriteString(arg1007)
    if err1009 != nil {
      Usage()
      return
    }
    factory1010 := thrift.NewTJSONProtocolFactory()
    jsProt1011 := factory1010.GetProtocol(mbTrans1008)
    argvalue0 := interfaces.NewUint64()
    err1012 := argvalue0.Read(context.Background(), jsProt1011)
    if err1012 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1013 := flag.Arg(2)
    mbTrans1014 := thrift.NewTMemoryBufferLen(len(arg1013))
    defer mbTrans1014.Close()
    _, err1015 := mbTrans1014.WriteString(arg1013)
    if err1015 != nil {
      Usage()
      return
    }
    factory1016 := thrift.NewTJSONProtocolFactory()
    jsProt1017 := factory1016.GetProtocol(mbTrans1014)
    argvalue1 := interfaces.NewUint64()
    err1018 := argvalue1.Read(context.Background(), jsProt1017)
    if err1018 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1019 := flag.Arg(3)
    mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
    defer mbTrans1020.Close()
    _, err1021 := mbTrans1020.WriteString(arg1019)
    if err1021 != nil {
      Usage()
      return
    }
    factory1022 := thrift.NewTJSONProtocolFactory()
    jsProt1023 := factory1022.GetProtocol(mbTrans1020)
    argvalue2 := interfaces.NewUint64()
    err1024 := argvalue2.Read(context.Background(), jsProt1023)
    if err1024 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1025 := flag.Arg(4)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil {
      Usage()
      return
    }
    factory1028 := thrift.NewTJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    argvalue3 := interfaces.NewUint64()
    err1030 := argvalue3.Read(context.Background(), jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1031 := flag.Arg(5)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue4 := interfaces.NewUint64()
    err1036 := argvalue4.Read(context.Background(), jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1037 := flag.Arg(1)
    mbTrans1038 := thrift.NewTMemoryBufferLen(len(arg1037))
    defer mbTrans1038.Close()
    _, err1039 := mbTrans1038.WriteString(arg1037)
    if err1039 != nil {
      Usage()
      return
    }
    factory1040 := thrift.NewTJSONProtocolFactory()
    jsProt1041 := factory1040.GetProtocol(mbTrans1038)
    argvalue0 := interfaces.NewUint64()
    err1042 := argvalue0.Read(context.Background(), jsProt1041)
    if err1042 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1043 := flag.Arg(2)
    mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
    defer mbTrans1044.Close()
    _, err1045 := mbTrans1044.WriteString(arg1043)
    if err1045 != nil {
      Usage()
      return
    }
    factory1046 := thrift.NewTJSONProtocolFactory()
    jsProt1047 := factory1046.GetProtocol(mbTrans1044)
    argvalue1 := interfaces.NewUint64()
    err1048 := argvalue1.Read(context.Background(), jsProt1047)
    if err1048 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1049 := flag.Arg(3)
    mbTrans1050 := thrift.NewTMemoryBufferLen(len(arg1049))
    defer mbTrans1050.Close()
    _, err1051 := mbTrans1050.WriteString(arg1049)
    if err1051 != nil {
      Usage()
      return
    }
    factory1052 := thrift.NewTJSONProtocolFactory()
    jsProt1053 := factory1052.GetProtocol(mbTrans1050)
    argvalue2 := interfaces.NewUint64()
    err1054 := argvalue2.Read(context.Background(), jsProt1053)
    if err1054 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1055 := flag.Arg(1)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil {
      Usage()
      return
    }
    factory1058 := thrift.NewTJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    argvalue0 := interfaces.NewUint64()
    err1060 := argvalue0.Read(context.Background(), jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1061 := flag.Arg(2)
    mbTrans1062 := thrift.NewTMemoryBufferLen(len(arg1061))
    defer mbTrans1062.Close()
    _, err1063 := mbTrans1062.WriteString(arg1061)
    if err1063 != nil {
      Usage()
      return
    }
    factory1064 := thrift.NewTJSONProtocolFactory()
    jsProt1065 := factory1064.GetProtocol(mbTrans1062)
    argvalue1 := interfaces.NewUint64()
    err1066 := argvalue1.Read(context.Background(), jsProt1065)
    if err1066 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1067 := flag.Arg(3)
    mbTrans1068 := thrift.NewTMemoryBufferLen(len(arg1067))
    defer mbTrans1068.Close()
    _, err1069 := mbTrans1068.WriteString(arg1067)
    if err1069 != nil {
      Usage()
      return
    }
    factory1070 := thrift.NewTJSONProtocolFactory()
    jsProt1071 := factory1070.GetProtocol(mbTrans1068)
    argvalue2 := interfaces.NewUint64()
    err1072 := argvalue2.Read(context.Background(), jsProt1071)
    if err1072 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1073 := flag.Arg(4)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue3 := interfaces.NewUint64()
    err1078 := argvalue3.Read(context.Background(), jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1080 := (strconv.Atoi(flag.Arg(1)))
    if err1080 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1081 := flag.Arg(2)
    mbTrans1082 := thrift.NewTMemoryBufferLen(len(arg1081))
    defer mbTrans1082.Close()
    _, err1083 := mbTrans1082.WriteString(arg1081)
    if err1083 != nil {
      Usage()
      return
    }
    factory1084 := thrift.NewTJSONProtocolFactory()
    jsProt1085 := factory1084.GetProtocol(mbTrans1082)
    argvalue1 := interfaces.NewUint64()
    err1086 := argvalue1.Read(context.Background(), jsProt1085)
    if err1086 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1088 := (strconv.Atoi(flag.Arg(1)))
    if err1088 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1089 := (strconv.Atoi(flag.Arg(1)))
    if err1089 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1090 := (strconv.Atoi(flag.Arg(1)))
    if err1090 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1091 := flag.Arg(1)
    mbTrans1092 := thrift.NewTMemoryBufferLen(len(arg1091))
    defer mbTrans1092.Close()
    _, err1093 := mbTrans1092.WriteString(arg1091)
    if err1093 != nil {
      Usage()
      return
    }
    factory1094 := thrift.NewTJSONProtocolFactory()
    jsProt1095 := factory1094.GetProtocol(mbTrans1092)
    argvalue0 := interfaces.NewUint64()
    err1096 := argvalue0.Read(context.Background(), jsProt1095)
    if err1096 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1097 := flag.Arg(2)
    mbTrans1098 := thrift.NewTMemoryBufferLen(len(arg1097))
    defer mbTrans1098.Close()
    _, err1099 := mbTrans1098.WriteString(arg1097)
    if err1099 != nil {
      Usage()
      return
    }
    factory1100 := thrift.NewTJSONProtocolFactory()
    jsProt1101 := factory1100.GetProtocol(mbTrans1098)
    argvalue1 := interfaces.NewUint64()
    err1102 := argvalue1.Read(context.Background(), jsProt1101)
    if err1102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1103 := flag.Arg(3)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil {
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    argvalue2 := interfaces.NewUint64()
    err1108 := argvalue2.Read(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1109 := flag.Arg(4)
    mbTrans1110 := thrift.NewTMemoryBufferLen(len(arg1109))
    defer mbTrans1110.Close()
    _, err1111 := mbTrans1110.WriteString(arg1109)
    if err1111 != nil {
      Usage()
      return
    }
    factory1112 := thrift.NewTJSONProtocolFactory()
    jsProt1113 := factory1112.GetProtocol(mbTrans1110)
    argvalue3 := interfaces.NewUint64()
    err1114 := argvalue3.Read(context.Background(), jsProt1113)
    if err1114 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1115 := flag.Arg(1)
    mbTrans1116 := thrift.NewTMemoryBufferLen(len(arg1115))
    defer mbTrans1116.Close()
    _, err1117 := mbTrans1116.WriteString(arg1115)
    if err1117 != nil {
      Usage()
      return
    }
    factory1118 := thrift.NewTJSONProtocolFactory()
    jsProt1119 := factory1118.GetProtocol(mbTrans1116)
    argvalue0 := interfaces.NewUint64()
    err1120 := argvalue0.Read(context.Background(), jsProt1119)
    if err1120 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1121 := flag.Arg(2)
    mbTrans1122 := thrift.NewTMemoryBufferLen(len(arg1121))
    defer mbTrans1122.Close()
    _, err1123 := mbTrans1122.WriteString(arg1121)
    if err1123 != nil {
      Usage()
      return
    }
    factory1124 := thrift.NewTJSONProtocolFactory()
    jsProt1125 := factory1124.GetProtocol(mbTrans1122)
    argvalue1 := interfaces.NewUint64()
    err1126 := argvalue1.Read(context.Background(), jsProt1125)
    if err1126 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1127 := flag.Arg(3)
    mbTrans1128 := thrift.NewTMemoryBufferLen(len(arg1127))
    defer mbTrans1128.Close()
    _, err1129 := mbTrans1128.WriteString(arg1127)
    if err1129 != nil {
      Usage()
      return
    }
    factory1130 := thrift.NewTJSONProtocolFactory()
    jsProt1131 := factory1130.GetProtocol(mbTrans1128)
    argvalue2 := interfaces.NewUint64()
    err1132 := argvalue2.Read(context.Background(), jsProt1131)
    if err1132 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1134 := flag.Arg(1)
    mbTrans1135 := thrift.NewTMemoryBufferLen(len(arg1134))
    defer mbTrans1135.Close()
    _, err1136 := mbTrans1135.WriteString(arg1134)
    if err1136 != nil {
      Usage()
      return
    }
    factory1137 := thrift.NewTJSONProtocolFactory()
    jsProt1138 := factory1137.GetProtocol(mbTrans1135)
    argvalue0 := interfaces.NewUint64()
    err1139 := argvalue0.Read(context.Background(), jsProt1138)
    if err1139 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1140 := flag.Arg(2)
    mbTrans1141 := thrift.NewTMemoryBufferLen(len(arg1140))
    defer mbTrans1141.Close()
    _, err1142 := mbTrans1141.WriteString(arg1140)
    if err1142 != nil {
      Usage()
      return
    }
    factory1143 := thrift.NewTJSONProtocolFactory()
    jsProt1144 := factory1143.GetProtocol(mbTrans1141)
    argvalue1 := interfaces.NewUint64()
    err1145 := argvalue1.Read(context.Background(), jsProt1144)
    if err1145 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1146 := flag.Arg(3)
    mbTrans1147 := thrift.NewTMemoryBufferLen(len(arg1146))
    defer mbTrans1147.Close()
    _, err1148 := mbTrans1147.WriteString(arg1146)
    if err1148 != nil {
      Usage()
      return
    }
    factory1149 := thrift.NewTJSONProtocolFactory()
    jsProt1150 := factory1149.GetProtocol(mbTrans1147)
    argvalue2 := interfaces.NewUint64()
    err1151 := argvalue2.Read(context.Background(), jsProt1150)
    if err1151 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1153 := flag.Arg(5)
    mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
    defer mbTrans1154.Close()
    _, err1155 := mbTrans1154.WriteString(arg1153)
    if err1155 != nil {
      Usage()
      return
    }
    factory1156 := thrift.NewTJSONProtocolFactory()
    jsProt1157 := factory1156.GetProtocol(mbTrans1154)
    argvalue4 := interfaces.NewUint64()
    err1158 := argvalue4.Read(context.Background(), jsProt1157)
    if err1158 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1159 := flag.Arg(1)
    mbTrans1160 := thrift.NewTMemoryBufferLen(len(arg1159))
    defer mbTrans1160.Close()
    _, err1161 := mbTrans1160.WriteString(arg1159)
    if err1161 != nil {
      Usage()
      return
    }
    factory1162 := thrift.NewTJSONProtocolFactory()
    jsProt1163 := factory1162.GetProtocol(mbTrans1160)
    argvalue0 := interfaces.NewUint64()
    err1164 := argvalue0.Read(context.Background(), jsProt1163)
    if err1164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1165 := flag.Arg(2)
    mbTrans1166 := thrift.NewTMemoryBufferLen(len(arg1165))
    defer mbTrans1166.Close()
    _, err1167 := mbTrans1166.WriteString(arg1165)
    if err1167 != nil {
      Usage()
      return
    }
    factory1168 := thrift.NewTJSONProtocolFactory()
    jsProt1169 := factory1168.GetProtocol(mbTrans1166)
    argvalue1 := interfaces.NewUint64()
    err1170 := argvalue1.Read(context.Background(), jsProt1169)
    if err1170 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1171 := flag.Arg(3)
    mbTrans1172 := thrift.NewTMemoryBufferLen(len(arg1171))
    defer mbTrans1172.Close()
    _, err1173 := mbTrans1172.WriteString(arg1171)
    if err1173 != nil {
      Usage()
      return
    }
    factory1174 := thrift.NewTJSONProtocolFactory()
    jsProt1175 := factory1174.GetProtocol(mbTrans1172)
    argvalue2 := interfaces.NewUint64()
    err1176 := argvalue2.Read(context.Background(), jsProt1175)
    if err1176 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1178 := flag.Arg(5)
    mbTrans1179 := thrift.NewTMemoryBufferLen(len(arg1178))
    defer mbTrans1179.Close()
    _, err1180 := mbTrans1179.WriteString(arg1178)
    if err1180 != nil {
      Usage()
      return
    }
    factory1181 := thrift.NewTJSONProtocolFactory()
    jsProt1182 := factory1181.GetProtocol(mbTrans1179)
    argvalue4 := interfaces.NewUint64()
    err1183 := argvalue4.Read(context.Background(), jsProt1182)
    if err1183 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1184 := flag.Arg(1)
    mbTrans1185 := thrift.NewTMemoryBufferLen(len(arg1184))
    defer mbTrans1185.Close()
    _, err1186 := mbTrans1185.WriteString(arg1184)
    if err1186 != nil {
      Usage()
      return
    }
    factory1187 := thrift.NewTJSONProtocolFactory()
    jsProt1188 := factory1187.GetProtocol(mbTrans1185)
    argvalue0 := interfaces.NewUint64()
    err1189 := argvalue0.Read(context.Background(), jsProt1188)
    if err1189 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1190 := flag.Arg(2)
    mbTrans1191 := thrift.NewTMemoryBufferLen(len(arg1190))
    defer mbTrans1191.Close()
    _, err1192 := mbTrans1191.WriteString(arg1190)
    if err1192 != nil {
      Usage()
      return
    }
    factory1193 := thrift.NewTJSONProtocolFactory()
    jsProt1194 := factory1193.GetProtocol(mbTrans1191)
    argvalue1 := interfaces.NewUint64()
    err1195 := argvalue1.Read(context.Background(), jsProt1194)
    if err1195 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1196 := flag.Arg(3)
    mbTrans1197 := thrift.NewTMemoryBufferLen(len(arg1196))
    defer mbTrans1197.Close()
    _, err1198 := mbTrans1197.WriteString(arg1196)
    if err1198 != nil {
      Usage()
      return
    }
    factory1199 := thrift.NewTJSONProtocolFactory()
    jsProt1200 := factory1199.GetProtocol(mbTrans1197)
    argvalue2 := interfaces.NewUint64()
    err1201 := argvalue2.Read(context.Background(), jsProt1200)
    if err1201 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1202 := flag.Arg(1)
    mbTrans1203 := thrift.NewTMemoryBufferLen(len(arg1202))
    defer mbTrans1203.Close()
    _, err1204 := mbTrans1203.WriteString(arg1202)
    if err1204 != nil {
      Usage()
      return
    }
    factory1205 := thrift.NewTJSONProtocolFactory()
    jsProt1206 := factory1205.GetProtocol(mbTrans1203)
    argvalue0 := interfaces.NewUint64()
    err1207 := argvalue0.Read(context.Background(), jsProt1206)
    if err1207 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1208 := flag.Arg(2)
    mbTrans1209 := thrift.NewTMemoryBufferLen(len(arg1208))
    defer mbTrans1209.Close()
    _, err1210 := mbTrans1209.WriteString(arg1208)
    if err1210 != nil {
      Usage()
      return
    }
    factory1211 := thrift.NewTJSONProtocolFactory()
    jsProt1212 := factory1211.GetProtocol(mbTrans1209)
    argvalue1 := interfaces.NewUint64()
    err1213 := argvalue1.Read(context.Background(), jsProt1212)
    if err1213 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1214 := flag.Arg(3)
    mbTrans1215 := thrift.NewTMemoryBufferLen(len(arg1214))
    defer mbTrans1215.Close()
    _, err1216 := mbTrans1215.WriteString(arg1214)
    if err1216 != nil {
      Usage()
      return
    }
    factory1217 := thrift.NewTJSONProtocolFactory()
    jsProt1218 := factory1217.GetProtocol(mbTrans1215)
    argvalue2 := interfaces.NewUint64()
    err1219 := argvalue2.Read(context.Background(), jsProt1218)
    if err1219 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1220 := flag.Arg(4)
    mbTrans1221 := thrift.NewTMemoryBufferLen(len(arg1220))
    defer mbTrans1221.Close()
    _, err1222 := mbTrans1221.WriteString(arg1220)
    if err1222 != nil {
      Usage()
      return
    }
    factory1223 := thrift.NewTJSONProtocolFactory()
    jsProt1224 := factory1223.GetProtocol(mbTrans1221)
    argvalue3 := interfaces.NewUint64()
    err1225 := argvalue3.Read(context.Background(), jsProt1224)
    if err1225 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1227 := (strconv.Atoi(flag.Arg(1)))
    if err1227 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1228 := flag.Arg(2)
    mbTrans1229 := thrift.NewTMemoryBufferLen(len(arg1228))
    defer mbTrans1229.Close()
    _, err1230 := mbTrans1229.WriteString(arg1228)
    if err1230 != nil {
      Usage()
      return
    }
    factory1231 := thrift.NewTJSONProtocolFactory()
    jsProt1232 := factory1231.GetProtocol(mbTrans1229)
    argvalue1 := interfaces.NewUint64()
    err1233 := argvalue1.Read(context.Background(), jsProt1232)
    if err1233 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1235 := (strconv.Atoi(flag.Arg(1)))
    if err1235 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1236 := (strconv.Atoi(flag.Arg(1)))
    if err1236 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1237 := (strconv.Atoi(flag.Arg(1)))
    if err1237 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1238 := flag.Arg(1)
    mbTrans1239 := thrift.NewTMemoryBufferLen(len(arg1238))
    defer mbTrans1239.Close()
    _, err1240 := mbTrans1239.WriteString(arg1238)
    if err1240 != nil {
      Usage()
      return
    }
    factory1241 := thrift.NewTJSONProtocolFactory()
    jsProt1242 := factory1241.GetProtocol(mbTrans1239)
    argvalue0 := interfaces.NewUint64()
    err1243 := argvalue0.Read(context.Background(), jsProt1242)
    if err1243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1244 := flag.Arg(2)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil {
      Usage()
      return
    }
    factory1247 := thrift.NewTJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    argvalue1 := interfaces.NewUint64()
    err1249 := argvalue1.Read(context.Background(), jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1250 := flag.Arg(3)
    mbTrans1251 := thrift.NewTMemoryBufferLen(len(arg1250))
    defer mbTrans1251.Close()
    _, err1252 := mbTrans1251.WriteString(arg1250)
    if err1252 != nil {
      Usage()
      return
    }
    factory1253 := thrift.NewTJSONProtocolFactory()
    jsProt1254 := factory1253.GetProtocol(mbTrans1251)
    argvalue2 := interfaces.NewUint64()
    err1255 := argvalue2.Read(context.Background(), jsProt1254)
    if err1255 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1256 := flag.Arg(4)
    mbTrans1257 := thrift.NewTMemoryBufferLen(len(arg1256))
    defer mbTrans1257.Close()
    _, err1258 := mbTrans1257.WriteString(arg1256)
    if err1258 != nil {
      Usage()
      return
    }
    factory1259 := thrift.NewTJSONProtocolFactory()
    jsProt1260 := factory1259.GetProtocol(mbTrans1257)
    argvalue3 := interfaces.NewUint64()
    err1261 := argvalue3.Read(context.Background(), jsProt1260)
    if err1261 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1262 := flag.Arg(1)
    mbTrans1263 := thrift.NewTMemoryBufferLen(len(arg1262))
    defer mbTrans1263.Close()
    _, err1264 := mbTrans1263.WriteString(arg1262)
    if err1264 != nil {
      Usage()
      return
    }
    factory1265 := thrift.NewTJSONProtocolFactory()
    jsProt1266 := factory1265.GetProtocol(mbTrans1263)
    argvalue0 := interfaces.NewUint64()
    err1267 := argvalue0.Read(context.Background(), jsProt1266)
    if err1267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1268 := flag.Arg(2)
    mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
    defer mbTrans1269.Close()
    _, err1270 := mbTrans1269.WriteString(arg1268)
    if err1270 != nil {
      Usage()
      return
    }
    factory1271 := thrift.NewTJSONProtocolFactory()
    jsProt1272 := factory1271.GetProtocol(mbTrans1269)
    argvalue1 := interfaces.NewUint64()
    err1273 := argvalue1.Read(context.Background(), jsProt1272)
    if err1273 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1274 := flag.Arg(3)
    mbTrans1275 := thrift.NewTMemoryBufferLen(len(arg1274))
    defer mbTrans1275.Close()
    _, err1276 := mbTrans1275.WriteString(arg1274)
    if err1276 != nil {
      Usage()
      return
    }
    factory1277 := thrift.NewTJSONProtocolFactory()
    jsProt1278 := factory1277.GetProtocol(mbTrans1275)
    argvalue2 := interfaces.NewUint64()
    err1279 := argvalue2.Read(context.Background(), jsProt1278)
    if err1279 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1281 := flag.Arg(1)
    mbTrans1282 := thrift.NewTMemoryBufferLen(len(arg1281))
    defer mbTrans1282.Close()
    _, err1283 := mbTrans1282.WriteString(arg1281)
    if err1283 != nil {
      Usage()
      return
    }
    factory1284 := thrift.NewTJSONProtocolFactory()
    jsProt1285 := factory1284.GetProtocol(mbTrans1282)
    argvalue0 := interfaces.NewUint64()
    err1286 := argvalue0.Read(context.Background(), jsProt1285)
    if err1286 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1287 := flag.Arg(2)
    mbTrans1288 := thrift.NewTMemoryBufferLen(len(arg1287))
    defer mbTrans1288.Close()
    _, err1289 := mbTrans1288.WriteString(arg1287)
    if err1289 != nil {
      Usage()
      return
    }
    factory1290 := thrift.NewTJSONProtocolFactory()
    jsProt1291 := factory1290.GetProtocol(mbTrans1288)
    argvalue1 := interfaces.NewUint64()
    err1292 := argvalue1.Read(context.Background(), jsProt1291)
    if err1292 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1293 := flag.Arg(3)
    mbTrans1294 := thrift.NewTMemoryBufferLen(len(arg1293))
    defer mbTrans1294.Close()
    _, err1295 := mbTrans1294.WriteString(arg1293)
    if err1295 != nil {
      Usage()
      return
    }
    factory1296 := thrift.NewTJSONProtocolFactory()
    jsProt1297 := factory1296.GetProtocol(mbTrans1294)
    argvalue2 := interfaces.NewUint64()
    err1298 := argvalue2.Read(context.Background(), jsProt1297)
    if err1298 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1300 := flag.Arg(5)
    mbTrans1301 := thrift.NewTMemoryBufferLen(len(arg1300))
    defer mbTrans1301.Close()
    _, err1302 := mbTrans1301.WriteString(arg1300)
    if err1302 != nil {
      Usage()
      return
    }
    factory1303 := thrift.NewTJSONProtocolFactory()
    jsProt1304 := factory1303.GetProtocol(mbTrans1301)
    argvalue4 := interfaces.NewUint64()
    err1305 := argvalue4.Read(context.Background(), jsProt1304)
    if err1305 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1306 := flag.Arg(1)
    mbTrans1307 := thrift.NewTMemoryBufferLen(len(arg1306))
    defer mbTrans1307.Close()
    _, err1308 := mbTrans1307.WriteString(arg1306)
    if err1308 != nil {
      Usage()
      return
    }
    factory1309 := thrift.NewTJSONProtocolFactory()
    jsProt1310 := factory1309.GetProtocol(mbTrans1307)
    argvalue0 := interfaces.NewUint64()
    err1311 := argvalue0.Read(context.Background(), jsProt1310)
    if err1311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1312 := flag.Arg(2)
    mbTrans1313 := thrift.NewTMemoryBufferLen(len(arg1312))
    defer mbTrans1313.Close()
    _, err1314 := mbTrans1313.WriteString(arg1312)
    if err1314 != nil {
      Usage()
      return
    }
    factory1315 := thrift.NewTJSONProtocolFactory()
    jsProt1316 := factory1315.GetProtocol(mbTrans1313)
    argvalue1 := interfaces.NewUint64()
    err1317 := argvalue1.Read(context.Background(), jsProt1316)
    if err1317 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1318 := flag.Arg(3)
    mbTrans1319 := thrift.NewTMemoryBufferLen(len(arg1318))
    defer mbTrans1319.Close()
    _, err1320 := mbTrans1319.WriteString(arg1318)
    if err1320 != nil {
      Usage()
      return
    }
    factory1321 := thrift.NewTJSONProtocolFactory()
    jsProt1322 := factory1321.GetProtocol(mbTrans1319)
    argvalue2 := interfaces.NewUint64()
    err1323 := argvalue2.Read(context.Background(), jsProt1322)
    if err1323 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1325 := flag.Arg(5)
    mbTrans1326 := thrift.NewTMemoryBufferLen(len(arg1325))
    defer mbTrans1326.Close()
    _, err1327 := mbTrans1326.WriteString(arg1325)
    if err1327 != nil {
      Usage()
      return
    }
    factory1328 := thrift.NewTJSONProtocolFactory()
    jsProt1329 := factory1328.GetProtocol(mbTrans1326)
    argvalue4 := interfaces.NewUint64()
    err1330 := argvalue4.Read(context.Background(), jsProt1329)
    if err1330 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1331 := flag.Arg(1)
    mbTrans1332 := thrift.NewTMemoryBufferLen(len(arg1331))
    defer mbTrans1332.Close()
    _, err1333 := mbTrans1332.WriteString(arg1331)
    if err1333 != nil {
      Usage()
      return
    }
    factory1334 := thrift.NewTJSONProtocolFactory()
    jsProt1335 := factory1334.GetProtocol(mbTrans1332)
    argvalue0 := interfaces.NewUint64()
    err1336 := argvalue0.Read(context.Background(), jsProt1335)
    if err1336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1337 := flag.Arg(2)
    mbTrans1338 := thrift.NewTMemoryBufferLen(len(arg1337))
    defer mbTrans1338.Close()
    _, err1339 := mbTrans1338.WriteString(arg1337)
    if err1339 != nil {
      Usage()
      return
    }
    factory1340 := thrift.NewTJSONProtocolFactory()
    jsProt1341 := factory1340.GetProtocol(mbTrans1338)
    argvalue1 := interfaces.NewUint64()
    err1342 := argvalue1.Read(context.Background(), jsProt1341)
    if err1342 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1343 := flag.Arg(3)
    mbTrans1344 := thrift.NewTMemoryBufferLen(len(arg1343))
    defer mbTrans1344.Close()
    _, err1345 := mbTrans1344.WriteString(arg1343)
    if err1345 != nil {
      Usage()
      return
    }
    factory1346 := thrift.NewTJSONProtocolFactory()
    jsProt1347 := factory1346.GetProtocol(mbTrans1344)
    argvalue2 := interfaces.NewUint64()
    err1348 := argvalue2.Read(context.Background(), jsProt1347)
    if err1348 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1349 := flag.Arg(1)
    mbTrans1350 := thrift.NewTMemoryBufferLen(len(arg1349))
    defer mbTrans1350.Close()
    _, err1351 := mbTrans1350.WriteString(arg1349)
    if err1351 != nil {
      Usage()
      return
    }
    factory1352 := thrift.NewTJSONProtocolFactory()
    jsProt1353 := factory1352.GetProtocol(mbTrans1350)
    argvalue0 := interfaces.NewUint64()
    err1354 := argvalue0.Read(context.Background(), jsProt1353)
    if err1354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1355 := flag.Arg(2)
    mbTrans1356 := thrift.NewTMemoryBufferLen(len(arg1355))
    defer mbTrans1356.Close()
    _, err1357 := mbTrans1356.WriteString(arg1355)
    if err1357 != nil {
      Usage()
      return
    }
    factory1358 := thrift.NewTJSONProtocolFactory()
    jsProt1359 := factory1358.GetProtocol(mbTrans1356)
    argvalue1 := interfaces.NewUint64()
    err1360 := argvalue1.Read(context.Background(), jsProt1359)
    if err1360 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1361 := flag.Arg(3)
    mbTrans1362 := thrift.NewTMemoryBufferLen(len(arg1361))
    defer mbTrans1362.Close()
    _, err1363 := mbTrans1362.WriteString(arg1361)
    if err1363 != nil {
      Usage()
      return
    }
    factory1364 := thrift.NewTJSONProtocolFactory()
    jsProt1365 := factory1364.GetProtocol(mbTrans1362)
    argvalue2 := interfaces.NewUint64()
    err1366 := argvalue2.Read(context.Background(), jsProt1365)
    if err1366 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1367 := flag.Arg(4)
    mbTrans1368 := thrift.NewTMemoryBufferLen(len(arg1367))
    defer mbTrans1368.Close()
    _, err1369 := mbTrans1368.WriteString(arg1367)
    if err1369 != nil {
      Usage()
      return
    }
    factory1370 := thrift.NewTJSONProtocolFactory()
    jsProt1371 := factory1370.GetProtocol(mbTrans1368)
    argvalue3 := interfaces.NewUint64()
    err1372 := argvalue3.Read(context.Background(), jsProt1371)
    if err1372 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1374 := (strconv.Atoi(flag.Arg(1)))
    if err1374 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1375 := flag.Arg(2)
    mbTrans1376 := thrift.NewTMemoryBufferLen(len(arg1375))
    defer mbTrans1376.Close()
    _, err1377 := mbTrans1376.WriteString(arg1375)
    if err1377 != nil {
      Usage()
      return
    }
    factory1378 := thrift.NewTJSONProtocolFactory()
    jsProt1379 := factory1378.GetProtocol(mbTrans1376)
    argvalue1 := interfaces.NewUint64()
    err1380 := argvalue1.Read(context.Background(), jsProt1379)
    if err1380 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1382 := (strconv.Atoi(flag.Arg(1)))
    if err1382 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1383 := (strconv.Atoi(flag.Arg(1)))
    if err1383 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1384 := (strconv.Atoi(flag.Arg(1)))
    if err1384 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1385 := flag.Arg(1)
    mbTrans1386 := thrift.NewTMemoryBufferLen(len(arg1385))
    defer mbTrans1386.Close()
    _, err1387 := mbTrans1386.WriteString(arg1385)
    if err1387 != nil {
      Usage()
      return
    }
    factory1388 := thrift.NewTJSONProtocolFactory()
    jsProt1389 := factory1388.GetProtocol(mbTrans1386)
    argvalue0 := interfaces.NewUint64()
    err1390 := argvalue0.Read(context.Background(), jsProt1389)
    if err1390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1391 := flag.Arg(2)
    mbTrans1392 := thrift.NewTMemoryBufferLen(len(arg1391))
    defer mbTrans1392.Close()
    _, err1393 := mbTrans1392.WriteString(arg1391)
    if err1393 != nil {
      Usage()
      return
    }
    factory1394 := thrift.NewTJSONProtocolFactory()
    jsProt1395 := factory1394.GetProtocol(mbTrans1392)
    argvalue1 := interfaces.NewUint64()
    err1396 := argvalue1.Read(context.Background(), jsProt1395)
    if err1396 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1397 := flag.Arg(3)
    mbTrans1398 := thrift.NewTMemoryBufferLen(len(arg1397))
    defer mbTrans1398.Close()
    _, err1399 := mbTrans1398.WriteString(arg1397)
    if err1399 != nil {
      Usage()
      return
    }
    factory1400 := thrift.NewTJSONProtocolFactory()
    jsProt1401 := factory1400.GetProtocol(mbTrans1398)
    argvalue2 := interfaces.NewUint64()
    err1402 := argvalue2.Read(context.Background(), jsProt1401)
    if err1402 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1403 := flag.Arg(4)
    mbTrans1404 := thrift.NewTMemoryBufferLen(len(arg1403))
    defer mbTrans1404.Close()
    _, err1405 := mbTrans1404.WriteString(arg1403)
    if err1405 != nil {
      Usage()
      return
    }
    factory1406 := thrift.NewTJSONProtocolFactory()
    jsProt1407 := factory1406.GetProtocol(mbTrans1404)
    argvalue3 := interfaces.NewUint64()
    err1408 := argvalue3.Read(context.Background(), jsProt1407)
    if err1408 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1409 := flag.Arg(1)
    mbTrans1410 := thrift.NewTMemoryBufferLen(len(arg1409))
    defer mbTrans1410.Close()
    _, err1411 := mbTrans1410.WriteString(arg1409)
    if err1411 != nil {
      Usage()
      return
    }
    factory1412 := thrift.NewTJSONProtocolFactory()
    jsProt1413 := factory1412.GetProtocol(mbTrans1410)
    argvalue0 := interfaces.NewUint64()
    err1414 := argvalue0.Read(context.Background(), jsProt1413)
    if err1414 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1415 := flag.Arg(2)
    mbTrans1416 := thrift.NewTMemoryBufferLen(len(arg1415))
    defer mbTrans1416.Close()
    _, err1417 := mbTrans1416.WriteString(arg1415)
    if err1417 != nil {
      Usage()
      return
    }
    factory1418 := thrift.NewTJSONProtocolFactory()
    jsProt1419 := factory1418.GetProtocol(mbTrans1416)
    argvalue1 := interfaces.NewUint64()
    err1420 := argvalue1.Read(context.Background(), jsProt1419)
    if err1420 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1421 := flag.Arg(3)
    mbTrans1422 := thrift.NewTMemoryBufferLen(len(arg1421))
    defer mbTrans1422.Close()
    _, err1423 := mbTrans1422.WriteString(arg1421)
    if err1423 != nil {
      Usage()
      return
    }
    factory1424 := thrift.NewTJSONProtocolFactory()
    jsProt1425 := factory1424.GetProtocol(mbTrans1422)
    argvalue2 := interfaces.NewUint64()
    err1426 := argvalue2.Read(context.Background(), jsProt1425)
    if err1426 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1428 := flag.Arg(1)
    mbTrans1429 := thrift.NewTMemoryBufferLen(len(arg1428))
    defer mbTrans1429.Close()
    _, err1430 := mbTrans1429.WriteString(arg1428)
    if err1430 != nil {
      Usage()
      return
    }
    factory1431 := thrift.NewTJSONProtocolFactory()
    jsProt1432 := factory1431.GetProtocol(mbTrans1429)
    argvalue0 := interfaces.NewUint64()
    err1433 := argvalue0.Read(context.Background(), jsProt1432)
    if err1433 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1434 := flag.Arg(2)
    mbTrans1435 := thrift.NewTMemoryBufferLen(len(arg1434))
    defer mbTrans1435.Close()
    _, err1436 := mbTrans1435.WriteString(arg1434)
    if err1436 != nil {
      Usage()
      return
    }
    factory1437 := thrift.NewTJSONProtocolFactory()
    jsProt1438 := factory1437.GetProtocol(mbTrans1435)
    argvalue1 := interfaces.NewUint64()
    err1439 := argvalue1.Read(context.Background(), jsProt1438)
    if err1439 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1440 := flag.Arg(3)
    mbTrans1441 := thrift.NewTMemoryBufferLen(len(arg1440))
    defer mbTrans1441.Close()
    _, err1442 := mbTrans1441.WriteString(arg1440)
    if err1442 != nil {
      Usage()
      return
    }
    factory1443 := thrift.NewTJSONProtocolFactory()
    jsProt1444 := factory1443.GetProtocol(mbTrans1441)
    argvalue2 := interfaces.NewUint64()
    err1445 := argvalue2.Read(context.Background(), jsProt1444)
    if err1445 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1447 := flag.Arg(5)
    mbTrans1448 := thrift.NewTMemoryBufferLen(len(arg1447))
    defer mbTrans1448.Close()
    _, err1449 := mbTrans1448.WriteString(arg1447)
    if err1449 != nil {
      Usage()
      return
    }
    factory1450 := thrift.NewTJSONProtocolFactory()
    jsProt1451 := factory1450.GetProtocol(mbTrans1448)
    argvalue4 := interfaces.NewUint64()
    err1452 := argvalue4.Read(context.Background(), jsProt1451)
    if err1452 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1453 := flag.Arg(1)
    mbTrans1454 := thrift.NewTMemoryBufferLen(len(arg1453))
    defer mbTrans1454.Close()
    _, err1455 := mbTrans1454.WriteString(arg1453)
    if err1455 != nil {
      Usage()
      return
    }
    factory1456 := thrift.NewTJSONProtocolFactory()
    jsProt1457 := factory1456.GetProtocol(mbTrans1454)
    argvalue0 := interfaces.NewUint64()
    err1458 := argvalue0.Read(context.Background(), jsProt1457)
    if err1458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1459 := flag.Arg(2)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil {
      Usage()
      return
    }
    factory1462 := thrift.NewTJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    argvalue1 := interfaces.NewUint64()
    err1464 := argvalue1.Read(context.Background(), jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1465 := flag.Arg(3)
    mbTrans1466 := thrift.NewTMemoryBufferLen(len(arg1465))
    defer mbTrans1466.Close()
    _, err1467 := mbTrans1466.WriteString(arg1465)
    if err1467 != nil {
      Usage()
      return
    }
    factory1468 := thrift.NewTJSONProtocolFactory()
    jsProt1469 := factory1468.GetProtocol(mbTrans1466)
    argvalue2 := interfaces.NewUint64()
    err1470 := argvalue2.Read(context.Background(), jsProt1469)
    if err1470 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1472 := flag.Arg(5)
    mbTrans1473 := thrift.NewTMemoryBufferLen(len(arg1472))
    defer mbTrans1473.Close()
    _, err1474 := mbTrans1473.WriteString(arg1472)
    if err1474 != nil {
      Usage()
      return
    }
    factory1475 := thrift.NewTJSONProtocolFactory()
    jsProt1476 := factory1475.GetProtocol(mbTrans1473)
    argvalue4 := interfaces.NewUint64()
    err1477 := argvalue4.Read(context.Background(), jsProt1476)
    if err1477 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1478 := flag.Arg(1)
    mbTrans1479 := thrift.NewTMemoryBufferLen(len(arg1478))
    defer mbTrans1479.Close()
    _, err1480 := mbTrans1479.WriteString(arg1478)
    if err1480 != nil {
      Usage()
      return
    }
    factory1481 := thrift.NewTJSONProtocolFactory()
    jsProt1482 := factory1481.GetProtocol(mbTrans1479)
    argvalue0 := interfaces.NewUint64()
    err1483 := argvalue0.Read(context.Background(), jsProt1482)
    if err1483 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1484 := flag.Arg(2)
    mbTrans1485 := thrift.NewTMemoryBufferLen(len(arg1484))
    defer mbTrans1485.Close()
    _, err1486 := mbTrans1485.WriteString(arg1484)
    if err1486 != nil {
      Usage()
      return
    }
    factory1487 := thrift.NewTJSONProtocolFactory()
    jsProt1488 := factory1487.GetProtocol(mbTrans1485)
    argvalue1 := interfaces.NewUint64()
    err1489 := argvalue1.Read(context.Background(), jsProt1488)
    if err1489 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1490 := flag.Arg(3)
    mbTrans1491 := thrift.NewTMemoryBufferLen(len(arg1490))
    defer mbTrans1491.Close()
    _, err1492 := mbTrans1491.WriteString(arg1490)
    if err1492 != nil {
      Usage()
      return
    }
    factory1493 := thrift.NewTJSONProtocolFactory()
    jsProt1494 := factory1493.GetProtocol(mbTrans1491)
    argvalue2 := interfaces.NewUint64()
    err1495 := argvalue2.Read(context.Background(), jsProt1494)
    if err1495 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1496 := flag.Arg(1)
    mbTrans1497 := thrift.NewTMemoryBufferLen(len(arg1496))
    defer mbTrans1497.Close()
    _, err1498 := mbTrans1497.WriteString(arg1496)
    if err1498 != nil {
      Usage()
      return
    }
    factory1499 := thrift.NewTJSONProtocolFactory()
    jsProt1500 := factory1499.GetProtocol(mbTrans1497)
    argvalue0 := interfaces.NewUint64()
    err1501 := argvalue0.Read(context.Background(), jsProt1500)
    if err1501 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1502 := flag.Arg(2)
    mbTrans1503 := thrift.NewTMemoryBufferLen(len(arg1502))
    defer mbTrans1503.Close()
    _, err1504 := mbTrans1503.WriteString(arg1502)
    if err1504 != nil {
      Usage()
      return
    }
    factory1505 := thrift.NewTJSONProtocolFactory()
    jsProt1506 := factory1505.GetProtocol(mbTrans1503)
    argvalue1 := interfaces.NewUint64()
    err1507 := argvalue1.Read(context.Background(), jsProt1506)
    if err1507 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1508 := flag.Arg(3)
    mbTrans1509 := thrift.NewTMemoryBufferLen(len(arg1508))
    defer mbTrans1509.Close()
    _, err1510 := mbTrans1509.WriteString(arg1508)
    if err1510 != nil {
      Usage()
      return
    }
    factory1511 := thrift.NewTJSONProtocolFactory()
    jsProt1512 := factory1511.GetProtocol(mbTrans1509)
    argvalue2 := interfaces.NewUint64()
    err1513 := argvalue2.Read(context.Background(), jsProt1512)
    if err1513 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1514 := flag.Arg(4)
    mbTrans1515 := thrift.NewTMemoryBufferLen(len(arg1514))
    defer mbTrans1515.Close()
    _, err1516 := mbTrans1515.WriteString(arg1514)
    if err1516 != nil {
      Usage()
      return
    }
    factory1517 := thrift.NewTJSONProtocolFactory()
    jsProt1518 := factory1517.GetProtocol(mbTrans1515)
    argvalue3 := interfaces.NewUint64()
    err1519 := argvalue3.Read(context.Background(), jsProt1518)
    if err1519 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1521 := (strconv.Atoi(flag.Arg(1)))
    if err1521 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1522 := flag.Arg(2)
    mbTrans1523 := thrift.NewTMemoryBufferLen(len(arg1522))
    defer mbTrans1523.Close()
    _, err1524 := mbTrans1523.WriteString(arg1522)
    if err1524 != nil {
      Usage()
      return
    }
    factory1525 := thrift.NewTJSONProtocolFactory()
    jsProt1526 := factory1525.GetProtocol(mbTrans1523)
    argvalue1 := interfaces.NewUint64()
    err1527 := argvalue1.Read(context.Background(), jsProt1526)
    if err1527 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1529 := (strconv.Atoi(flag.Arg(1)))
    if err1529 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1530 := (strconv.Atoi(flag.Arg(1)))
    if err1530 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1531 := (strconv.Atoi(flag.Arg(1)))
    if err1531 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1532 := flag.Arg(1)
    mbTrans1533 := thrift.NewTMemoryBufferLen(len(arg1532))
    defer mbTrans1533.Close()
    _, err1534 := mbTrans1533.WriteString(arg1532)
    if err1534 != nil {
      Usage()
      return
    }
    factory1535 := thrift.NewTJSONProtocolFactory()
    jsProt1536 := factory1535.GetProtocol(mbTrans1533)
    argvalue0 := interfaces.NewUint64()
    err1537 := argvalue0.Read(context.Background(), jsProt1536)
    if err1537 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1538 := flag.Arg(2)
    mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
    defer mbTrans1539.Close()
    _, err1540 := mbTrans1539.WriteString(arg1538)
    if err1540 != nil {
      Usage()
      return
    }
    factory1541 := thrift.NewTJSONProtocolFactory()
    jsProt1542 := factory1541.GetProtocol(mbTrans1539)
    argvalue1 := interfaces.NewUint64()
    err1543 := argvalue1.Read(context.Background(), jsProt1542)
    if err1543 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1544 := flag.Arg(3)
    mbTrans1545 := thrift.NewTMemoryBufferLen(len(arg1544))
    defer mbTrans1545.Close()
    _, err1546 := mbTrans1545.WriteString(arg1544)
    if err1546 != nil {
      Usage()
      return
    }
    factory1547 := thrift.NewTJSONProtocolFactory()
    jsProt1548 := factory1547.GetProtocol(mbTrans1545)
    argvalue2 := interfaces.NewUint64()
    err1549 := argvalue2.Read(context.Background(), jsProt1548)
    if err1549 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1550 := flag.Arg(4)
    mbTrans1551 := thrift.NewTMemoryBufferLen(len(arg1550))
    defer mbTrans1551.Close()
    _, err1552 := mbTrans1551.WriteString(arg1550)
    if err1552 != nil {
      Usage()
      return
    }
    factory1553 := thrift.NewTJSONProtocolFactory()
    jsProt1554 := factory1553.GetProtocol(mbTrans1551)
    argvalue3 := interfaces.NewUint64()
    err1555 := argvalue3.Read(context.Background(), jsProt1554)
    if err1555 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1556 := flag.Arg(1)
    mbTrans1557 := thrift.NewTMemoryBufferLen(len(arg1556))
    defer mbTrans1557.Close()
    _, err1558 := mbTrans1557.WriteString(arg1556)
    if err1558 != nil {
      Usage()
      return
    }
    factory1559 := thrift.NewTJSONProtocolFactory()
    jsProt1560 := factory1559.GetProtocol(mbTrans1557)
    argvalue0 := interfaces.NewUint64()
    err1561 := argvalue0.Read(context.Background(), jsProt1560)
    if err1561 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1562 := flag.Arg(2)
    mbTrans1563 := thrift.NewTMemoryBufferLen(len(arg1562))
    defer mbTrans1563.Close()
    _, err1564 := mbTrans1563.WriteString(arg1562)
    if err1564 != nil {
      Usage()
      return
    }
    factory1565 := thrift.NewTJSONProtocolFactory()
    jsProt1566 := factory1565.GetProtocol(mbTrans1563)
    argvalue1 := interfaces.NewUint64()
    err1567 := argvalue1.Read(context.Background(), jsProt1566)
    if err1567 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1568 := flag.Arg(3)
    mbTrans1569 := thrift.NewTMemoryBufferLen(len(arg1568))
    defer mbTrans1569.Close()
    _, err1570 := mbTrans1569.WriteString(arg1568)
    if err1570 != nil {
      Usage()
      return
    }
    factory1571 := thrift.NewTJSONProtocolFactory()
    jsProt1572 := factory1571.GetProtocol(mbTrans1569)
    argvalue2 := interfaces.NewUint64()
    err1573 := argvalue2.Read(context.Background(), jsProt1572)
    if err1573 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1575 := flag.Arg(1)
    mbTrans1576 := thrift.NewTMemoryBufferLen(len(arg1575))
    defer mbTrans1576.Close()
    _, err1577 := mbTrans1576.WriteString(arg1575)
    if err1577 != nil {
      Usage()
      return
    }
    factory1578 := thrift.NewTJSONProtocolFactory()
    jsProt1579 := factory1578.GetProtocol(mbTrans1576)
    argvalue0 := interfaces.NewUint64()
    err1580 := argvalue0.Read(context.Background(), jsProt1579)
    if err1580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1581 := flag.Arg(2)
    mbTrans1582 := thrift.NewTMemoryBufferLen(len(arg1581))
    defer mbTrans1582.Close()
    _, err1583 := mbTrans1582.WriteString(arg1581)
    if err1583 != nil {
      Usage()
      return
    }
    factory1584 := thrift.NewTJSONProtocolFactory()
    jsProt1585 := factory1584.GetProtocol(mbTrans1582)
    argvalue1 := interfaces.NewUint64()
    err1586 := argvalue1.Read(context.Background(), jsProt1585)
    if err1586 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1587 := flag.Arg(3)
    mbTrans1588 := thrift.NewTMemoryBufferLen(len(arg1587))
    defer mbTrans1588.Close()
    _, err1589 := mbTrans1588.WriteString(arg1587)
    if err1589 != nil {
      Usage()
      return
    }
    factory1590 := thrift.NewTJSONProtocolFactory()
    jsProt1591 := factory1590.GetProtocol(mbTrans1588)
    argvalue2 := interfaces.NewUint64()
    err1592 := argvalue2.Read(context.Background(), jsProt1591)
    if err1592 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1594 := flag.Arg(5)
    mbTrans1595 := thrift.NewTMemoryBufferLen(len(arg1594))
    defer mbTrans1595.Close()
    _, err1596 := mbTrans1595.WriteString(arg1594)
    if err1596 != nil {
      Usage()
      return
    }
    factory1597 := thrift.NewTJSONProtocolFactory()
    jsProt1598 := factory1597.GetProtocol(mbTrans1595)
    argvalue4 := interfaces.NewUint64()
    err1599 := argvalue4.Read(context.Background(), jsProt1598)
    if err1599 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1600 := flag.Arg(1)
    mbTrans1601 := thrift.NewTMemoryBufferLen(len(arg1600))
    defer mbTrans1601.Close()
    _, err1602 := mbTrans1601.WriteString(arg1600)
    if err1602 != nil {
      Usage()
      return
    }
    factory1603 := thrift.NewTJSONProtocolFactory()
    jsProt1604 := factory1603.GetProtocol(mbTrans1601)
    argvalue0 := interfaces.NewUint64()
    err1605 := argvalue0.Read(context.Background(), jsProt1604)
    if err1605 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1606 := flag.Arg(2)
    mbTrans1607 := thrift.NewTMemoryBufferLen(len(arg1606))
    defer mbTrans1607.Close()
    _, err1608 := mbTrans1607.WriteString(arg1606)
    if err1608 != nil {
      Usage()
      return
    }
    factory1609 := thrift.NewTJSONProtocolFactory()
    jsProt1610 := factory1609.GetProtocol(mbTrans1607)
    argvalue1 := interfaces.NewUint64()
    err1611 := argvalue1.Read(context.Background(), jsProt1610)
    if err1611 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1612 := flag.Arg(3)
    mbTrans1613 := thrift.NewTMemoryBufferLen(len(arg1612))
    defer mbTrans1613.Close()
    _, err1614 := mbTrans1613.WriteString(arg1612)
    if err1614 != nil {
      Usage()
      return
    }
    factory1615 := thrift.NewTJSONProtocolFactory()
    jsProt1616 := factory1615.GetProtocol(mbTrans1613)
    argvalue2 := interfaces.NewUint64()
    err1617 := argvalue2.Read(context.Background(), jsProt1616)
    if err1617 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1619 := flag.Arg(5)
    mbTrans1620 := thrift.NewTMemoryBufferLen(len(arg1619))
    defer mbTrans1620.Close()
    _, err1621 := mbTrans1620.WriteString(arg1619)
    if err1621 != nil {
      Usage()
      return
    }
    factory1622 := thrift.NewTJSONProtocolFactory()
    jsProt1623 := factory1622.GetProtocol(mbTrans1620)
    argvalue4 := interfaces.NewUint64()
    err1624 := argvalue4.Read(context.Background(), jsProt1623)
    if err1624 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1625 := flag.Arg(1)
    mbTrans1626 := thrift.NewTMemoryBufferLen(len(arg1625))
    defer mbTrans1626.Close()
    _, err1627 := mbTrans1626.WriteString(arg1625)
    if err1627 != nil {
      Usage()
      return
    }
    factory1628 := thrift.NewTJSONProtocolFactory()
    jsProt1629 := factory1628.GetProtocol(mbTrans1626)
    argvalue0 := interfaces.NewUint64()
    err1630 := argvalue0.Read(context.Background(), jsProt1629)
    if err1630 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1631 := flag.Arg(2)
    mbTrans1632 := thrift.NewTMemoryBufferLen(len(arg1631))
    defer mbTrans1632.Close()
    _, err1633 := mbTrans1632.WriteString(arg1631)
    if err1633 != nil {
      Usage()
      return
    }
    factory1634 := thrift.NewTJSONProtocolFactory()
    jsProt1635 := factory1634.GetProtocol(mbTrans1632)
    argvalue1 := interfaces.NewUint64()
    err1636 := argvalue1.Read(context.Background(), jsProt1635)
    if err1636 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1637 := flag.Arg(3)
    mbTrans1638 := thrift.NewTMemoryBufferLen(len(arg1637))
    defer mbTrans1638.Close()
    _, err1639 := mbTrans1638.WriteString(arg1637)
    if err1639 != nil {
      Usage()
      return
    }
    factory1640 := thrift.NewTJSONProtocolFactory()
    jsProt1641 := factory1640.GetProtocol(mbTrans1638)
    argvalue2 := interfaces.NewUint64()
    err1642 := argvalue2.Read(context.Background(), jsProt1641)
    if err1642 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
