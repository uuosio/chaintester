// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  void set_action_return_value(string data)")
  fmt.Fprintln(os.Stderr, "  string get_code_hash(Uint64 account, i64 struct_version)")
  fmt.Fprintln(os.Stderr, "  i64 get_block_num()")
  fmt.Fprintln(os.Stderr, "  string sha3(string data, i32 keccak)")
  fmt.Fprintln(os.Stderr, "  string blake2_f(i64 rounds, string state, string msg, string t0_offset, string t1_offset, i32 final)")
  fmt.Fprintln(os.Stderr, "  string k1_recover(string sig, string dig)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_add(string op1, string op2)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_mul(string g1, string scalar)")
  fmt.Fprintln(os.Stderr, "  i32 alt_bn128_pair(string pairs)")
  fmt.Fprintln(os.Stderr, "  string mod_exp(string base, string exp, string mod)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg623 := flag.Arg(1)
    mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewTJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue0 := interfaces.NewUint64()
    err628 := argvalue0.Read(context.Background(), jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewTJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := interfaces.NewUint64()
    err634 := argvalue0.Read(context.Background(), jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err635 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err635 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err636 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err636 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err637 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err637 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg639 := flag.Arg(1)
    mbTrans640 := thrift.NewTMemoryBufferLen(len(arg639))
    defer mbTrans640.Close()
    _, err641 := mbTrans640.WriteString(arg639)
    if err641 != nil {
      Usage()
      return
    }
    factory642 := thrift.NewTJSONProtocolFactory()
    jsProt643 := factory642.GetProtocol(mbTrans640)
    argvalue0 := interfaces.NewUint64()
    err644 := argvalue0.Read(context.Background(), jsProt643)
    if err644 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg646 := flag.Arg(1)
    mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
    defer mbTrans647.Close()
    _, err648 := mbTrans647.WriteString(arg646)
    if err648 != nil {
      Usage()
      return
    }
    factory649 := thrift.NewTJSONProtocolFactory()
    jsProt650 := factory649.GetProtocol(mbTrans647)
    argvalue0 := interfaces.NewUint64()
    err651 := argvalue0.Read(context.Background(), jsProt650)
    if err651 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg652 := flag.Arg(1)
    mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
    defer mbTrans653.Close()
    _, err654 := mbTrans653.WriteString(arg652)
    if err654 != nil {
      Usage()
      return
    }
    factory655 := thrift.NewTJSONProtocolFactory()
    jsProt656 := factory655.GetProtocol(mbTrans653)
    argvalue0 := interfaces.NewUint64()
    err657 := argvalue0.Read(context.Background(), jsProt656)
    if err657 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg664 := flag.Arg(1)
    mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil {
      Usage()
      return
    }
    factory667 := thrift.NewTJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    argvalue0 := interfaces.NewUint64()
    err669 := argvalue0.Read(context.Background(), jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg670 := flag.Arg(2)
    mbTrans671 := thrift.NewTMemoryBufferLen(len(arg670))
    defer mbTrans671.Close()
    _, err672 := mbTrans671.WriteString(arg670)
    if err672 != nil {
      Usage()
      return
    }
    factory673 := thrift.NewTJSONProtocolFactory()
    jsProt674 := factory673.GetProtocol(mbTrans671)
    argvalue1 := interfaces.NewUint64()
    err675 := argvalue1.Read(context.Background(), jsProt674)
    if err675 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg678 := flag.Arg(5)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue4 := interfaces.NewUint64()
    err683 := argvalue4.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg684 := flag.Arg(1)
    mbTrans685 := thrift.NewTMemoryBufferLen(len(arg684))
    defer mbTrans685.Close()
    _, err686 := mbTrans685.WriteString(arg684)
    if err686 != nil {
      Usage()
      return
    }
    factory687 := thrift.NewTJSONProtocolFactory()
    jsProt688 := factory687.GetProtocol(mbTrans685)
    argvalue0 := interfaces.NewUint64()
    err689 := argvalue0.Read(context.Background(), jsProt688)
    if err689 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg690 := flag.Arg(2)
    mbTrans691 := thrift.NewTMemoryBufferLen(len(arg690))
    defer mbTrans691.Close()
    _, err692 := mbTrans691.WriteString(arg690)
    if err692 != nil {
      Usage()
      return
    }
    factory693 := thrift.NewTJSONProtocolFactory()
    jsProt694 := factory693.GetProtocol(mbTrans691)
    argvalue1 := interfaces.NewUint64()
    err695 := argvalue1.Read(context.Background(), jsProt694)
    if err695 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg696 := flag.Arg(1)
    mbTrans697 := thrift.NewTMemoryBufferLen(len(arg696))
    defer mbTrans697.Close()
    _, err698 := mbTrans697.WriteString(arg696)
    if err698 != nil {
      Usage()
      return
    }
    factory699 := thrift.NewTJSONProtocolFactory()
    jsProt700 := factory699.GetProtocol(mbTrans697)
    argvalue0 := interfaces.NewUint64()
    err701 := argvalue0.Read(context.Background(), jsProt700)
    if err701 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err704 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err704 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg705 := flag.Arg(1)
    mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
    defer mbTrans706.Close()
    _, err707 := mbTrans706.WriteString(arg705)
    if err707 != nil {
      Usage()
      return
    }
    factory708 := thrift.NewTJSONProtocolFactory()
    jsProt709 := factory708.GetProtocol(mbTrans706)
    argvalue0 := interfaces.NewUint64()
    err710 := argvalue0.Read(context.Background(), jsProt709)
    if err710 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg716 := flag.Arg(1)
    mbTrans717 := thrift.NewTMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil {
      Usage()
      return
    }
    factory719 := thrift.NewTJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    argvalue0 := interfaces.NewUint64()
    err721 := argvalue0.Read(context.Background(), jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg723 := flag.Arg(1)
    mbTrans724 := thrift.NewTMemoryBufferLen(len(arg723))
    defer mbTrans724.Close()
    _, err725 := mbTrans724.WriteString(arg723)
    if err725 != nil {
      Usage()
      return
    }
    factory726 := thrift.NewTJSONProtocolFactory()
    jsProt727 := factory726.GetProtocol(mbTrans724)
    argvalue0 := interfaces.NewUint64()
    err728 := argvalue0.Read(context.Background(), jsProt727)
    if err728 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg729 := flag.Arg(1)
    mbTrans730 := thrift.NewTMemoryBufferLen(len(arg729))
    defer mbTrans730.Close()
    _, err731 := mbTrans730.WriteString(arg729)
    if err731 != nil {
      Usage()
      return
    }
    factory732 := thrift.NewTJSONProtocolFactory()
    jsProt733 := factory732.GetProtocol(mbTrans730)
    argvalue0 := interfaces.NewUint64()
    err734 := argvalue0.Read(context.Background(), jsProt733)
    if err734 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg735 := flag.Arg(1)
    mbTrans736 := thrift.NewTMemoryBufferLen(len(arg735))
    defer mbTrans736.Close()
    _, err737 := mbTrans736.WriteString(arg735)
    if err737 != nil {
      Usage()
      return
    }
    factory738 := thrift.NewTJSONProtocolFactory()
    jsProt739 := factory738.GetProtocol(mbTrans736)
    argvalue0 := interfaces.NewUint64()
    err740 := argvalue0.Read(context.Background(), jsProt739)
    if err740 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg741 := flag.Arg(1)
    mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
    defer mbTrans742.Close()
    _, err743 := mbTrans742.WriteString(arg741)
    if err743 != nil {
      Usage()
      return
    }
    factory744 := thrift.NewTJSONProtocolFactory()
    jsProt745 := factory744.GetProtocol(mbTrans742)
    argvalue0 := interfaces.NewUint64()
    err746 := argvalue0.Read(context.Background(), jsProt745)
    if err746 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg747 := flag.Arg(2)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue1 := interfaces.NewUint64()
    err752 := argvalue1.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg753 := flag.Arg(1)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil {
      Usage()
      return
    }
    factory756 := thrift.NewTJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    argvalue0 := interfaces.NewUint64()
    err758 := argvalue0.Read(context.Background(), jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg766 := flag.Arg(2)
    mbTrans767 := thrift.NewTMemoryBufferLen(len(arg766))
    defer mbTrans767.Close()
    _, err768 := mbTrans767.WriteString(arg766)
    if err768 != nil {
      Usage()
      return
    }
    factory769 := thrift.NewTJSONProtocolFactory()
    jsProt770 := factory769.GetProtocol(mbTrans767)
    argvalue1 := interfaces.NewUint64()
    err771 := argvalue1.Read(context.Background(), jsProt770)
    if err771 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err772 := (strconv.Atoi(flag.Arg(1)))
    if err772 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg792 := flag.Arg(2)
    mbTrans793 := thrift.NewTMemoryBufferLen(len(arg792))
    defer mbTrans793.Close()
    _, err794 := mbTrans793.WriteString(arg792)
    if err794 != nil {
      Usage()
      return
    }
    factory795 := thrift.NewTJSONProtocolFactory()
    jsProt796 := factory795.GetProtocol(mbTrans793)
    argvalue1 := interfaces.NewUint64()
    err797 := argvalue1.Read(context.Background(), jsProt796)
    if err797 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err799 := (strconv.Atoi(flag.Arg(4)))
    if err799 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err801 := (strconv.Atoi(flag.Arg(1)))
    if err801 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err802 := (strconv.Atoi(flag.Arg(2)))
    if err802 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err803 := (strconv.Atoi(flag.Arg(1)))
    if err803 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg804 := flag.Arg(1)
    mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
    defer mbTrans805.Close()
    _, err806 := mbTrans805.WriteString(arg804)
    if err806 != nil {
      Usage()
      return
    }
    factory807 := thrift.NewTJSONProtocolFactory()
    jsProt808 := factory807.GetProtocol(mbTrans805)
    argvalue0 := interfaces.NewUint64()
    err809 := argvalue0.Read(context.Background(), jsProt808)
    if err809 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg810 := flag.Arg(2)
    mbTrans811 := thrift.NewTMemoryBufferLen(len(arg810))
    defer mbTrans811.Close()
    _, err812 := mbTrans811.WriteString(arg810)
    if err812 != nil {
      Usage()
      return
    }
    factory813 := thrift.NewTJSONProtocolFactory()
    jsProt814 := factory813.GetProtocol(mbTrans811)
    argvalue1 := interfaces.NewUint64()
    err815 := argvalue1.Read(context.Background(), jsProt814)
    if err815 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg816 := flag.Arg(3)
    mbTrans817 := thrift.NewTMemoryBufferLen(len(arg816))
    defer mbTrans817.Close()
    _, err818 := mbTrans817.WriteString(arg816)
    if err818 != nil {
      Usage()
      return
    }
    factory819 := thrift.NewTJSONProtocolFactory()
    jsProt820 := factory819.GetProtocol(mbTrans817)
    argvalue2 := interfaces.NewUint64()
    err821 := argvalue2.Read(context.Background(), jsProt820)
    if err821 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg822 := flag.Arg(4)
    mbTrans823 := thrift.NewTMemoryBufferLen(len(arg822))
    defer mbTrans823.Close()
    _, err824 := mbTrans823.WriteString(arg822)
    if err824 != nil {
      Usage()
      return
    }
    factory825 := thrift.NewTJSONProtocolFactory()
    jsProt826 := factory825.GetProtocol(mbTrans823)
    argvalue3 := interfaces.NewUint64()
    err827 := argvalue3.Read(context.Background(), jsProt826)
    if err827 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err829 := (strconv.Atoi(flag.Arg(1)))
    if err829 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg830 := flag.Arg(2)
    mbTrans831 := thrift.NewTMemoryBufferLen(len(arg830))
    defer mbTrans831.Close()
    _, err832 := mbTrans831.WriteString(arg830)
    if err832 != nil {
      Usage()
      return
    }
    factory833 := thrift.NewTJSONProtocolFactory()
    jsProt834 := factory833.GetProtocol(mbTrans831)
    argvalue1 := interfaces.NewUint64()
    err835 := argvalue1.Read(context.Background(), jsProt834)
    if err835 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err837 := (strconv.Atoi(flag.Arg(1)))
    if err837 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err838 := (strconv.Atoi(flag.Arg(1)))
    if err838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err839 := (strconv.Atoi(flag.Arg(1)))
    if err839 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err840 := (strconv.Atoi(flag.Arg(1)))
    if err840 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg841 := flag.Arg(1)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue0 := interfaces.NewUint64()
    err846 := argvalue0.Read(context.Background(), jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg847 := flag.Arg(2)
    mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
    defer mbTrans848.Close()
    _, err849 := mbTrans848.WriteString(arg847)
    if err849 != nil {
      Usage()
      return
    }
    factory850 := thrift.NewTJSONProtocolFactory()
    jsProt851 := factory850.GetProtocol(mbTrans848)
    argvalue1 := interfaces.NewUint64()
    err852 := argvalue1.Read(context.Background(), jsProt851)
    if err852 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg853 := flag.Arg(3)
    mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
    defer mbTrans854.Close()
    _, err855 := mbTrans854.WriteString(arg853)
    if err855 != nil {
      Usage()
      return
    }
    factory856 := thrift.NewTJSONProtocolFactory()
    jsProt857 := factory856.GetProtocol(mbTrans854)
    argvalue2 := interfaces.NewUint64()
    err858 := argvalue2.Read(context.Background(), jsProt857)
    if err858 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg859 := flag.Arg(4)
    mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
    defer mbTrans860.Close()
    _, err861 := mbTrans860.WriteString(arg859)
    if err861 != nil {
      Usage()
      return
    }
    factory862 := thrift.NewTJSONProtocolFactory()
    jsProt863 := factory862.GetProtocol(mbTrans860)
    argvalue3 := interfaces.NewUint64()
    err864 := argvalue3.Read(context.Background(), jsProt863)
    if err864 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg865 := flag.Arg(1)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue0 := interfaces.NewUint64()
    err870 := argvalue0.Read(context.Background(), jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg871 := flag.Arg(2)
    mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
    defer mbTrans872.Close()
    _, err873 := mbTrans872.WriteString(arg871)
    if err873 != nil {
      Usage()
      return
    }
    factory874 := thrift.NewTJSONProtocolFactory()
    jsProt875 := factory874.GetProtocol(mbTrans872)
    argvalue1 := interfaces.NewUint64()
    err876 := argvalue1.Read(context.Background(), jsProt875)
    if err876 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg877 := flag.Arg(3)
    mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
    defer mbTrans878.Close()
    _, err879 := mbTrans878.WriteString(arg877)
    if err879 != nil {
      Usage()
      return
    }
    factory880 := thrift.NewTJSONProtocolFactory()
    jsProt881 := factory880.GetProtocol(mbTrans878)
    argvalue2 := interfaces.NewUint64()
    err882 := argvalue2.Read(context.Background(), jsProt881)
    if err882 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg883 := flag.Arg(4)
    mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
    defer mbTrans884.Close()
    _, err885 := mbTrans884.WriteString(arg883)
    if err885 != nil {
      Usage()
      return
    }
    factory886 := thrift.NewTJSONProtocolFactory()
    jsProt887 := factory886.GetProtocol(mbTrans884)
    argvalue3 := interfaces.NewUint64()
    err888 := argvalue3.Read(context.Background(), jsProt887)
    if err888 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg889 := flag.Arg(1)
    mbTrans890 := thrift.NewTMemoryBufferLen(len(arg889))
    defer mbTrans890.Close()
    _, err891 := mbTrans890.WriteString(arg889)
    if err891 != nil {
      Usage()
      return
    }
    factory892 := thrift.NewTJSONProtocolFactory()
    jsProt893 := factory892.GetProtocol(mbTrans890)
    argvalue0 := interfaces.NewUint64()
    err894 := argvalue0.Read(context.Background(), jsProt893)
    if err894 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg895 := flag.Arg(2)
    mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
    defer mbTrans896.Close()
    _, err897 := mbTrans896.WriteString(arg895)
    if err897 != nil {
      Usage()
      return
    }
    factory898 := thrift.NewTJSONProtocolFactory()
    jsProt899 := factory898.GetProtocol(mbTrans896)
    argvalue1 := interfaces.NewUint64()
    err900 := argvalue1.Read(context.Background(), jsProt899)
    if err900 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg901 := flag.Arg(3)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue2 := interfaces.NewUint64()
    err906 := argvalue2.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg907 := flag.Arg(4)
    mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
    defer mbTrans908.Close()
    _, err909 := mbTrans908.WriteString(arg907)
    if err909 != nil {
      Usage()
      return
    }
    factory910 := thrift.NewTJSONProtocolFactory()
    jsProt911 := factory910.GetProtocol(mbTrans908)
    argvalue3 := interfaces.NewUint64()
    err912 := argvalue3.Read(context.Background(), jsProt911)
    if err912 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg913 := flag.Arg(1)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil {
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    argvalue0 := interfaces.NewUint64()
    err918 := argvalue0.Read(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg919 := flag.Arg(2)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue1 := interfaces.NewUint64()
    err924 := argvalue1.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg925 := flag.Arg(3)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue2 := interfaces.NewUint64()
    err930 := argvalue2.Read(context.Background(), jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg931 := flag.Arg(1)
    mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
    defer mbTrans932.Close()
    _, err933 := mbTrans932.WriteString(arg931)
    if err933 != nil {
      Usage()
      return
    }
    factory934 := thrift.NewTJSONProtocolFactory()
    jsProt935 := factory934.GetProtocol(mbTrans932)
    argvalue0 := interfaces.NewUint64()
    err936 := argvalue0.Read(context.Background(), jsProt935)
    if err936 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg937 := flag.Arg(2)
    mbTrans938 := thrift.NewTMemoryBufferLen(len(arg937))
    defer mbTrans938.Close()
    _, err939 := mbTrans938.WriteString(arg937)
    if err939 != nil {
      Usage()
      return
    }
    factory940 := thrift.NewTJSONProtocolFactory()
    jsProt941 := factory940.GetProtocol(mbTrans938)
    argvalue1 := interfaces.NewUint64()
    err942 := argvalue1.Read(context.Background(), jsProt941)
    if err942 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg943 := flag.Arg(3)
    mbTrans944 := thrift.NewTMemoryBufferLen(len(arg943))
    defer mbTrans944.Close()
    _, err945 := mbTrans944.WriteString(arg943)
    if err945 != nil {
      Usage()
      return
    }
    factory946 := thrift.NewTJSONProtocolFactory()
    jsProt947 := factory946.GetProtocol(mbTrans944)
    argvalue2 := interfaces.NewUint64()
    err948 := argvalue2.Read(context.Background(), jsProt947)
    if err948 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg949 := flag.Arg(4)
    mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
    defer mbTrans950.Close()
    _, err951 := mbTrans950.WriteString(arg949)
    if err951 != nil {
      Usage()
      return
    }
    factory952 := thrift.NewTJSONProtocolFactory()
    jsProt953 := factory952.GetProtocol(mbTrans950)
    argvalue3 := interfaces.NewUint64()
    err954 := argvalue3.Read(context.Background(), jsProt953)
    if err954 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg955 := flag.Arg(5)
    mbTrans956 := thrift.NewTMemoryBufferLen(len(arg955))
    defer mbTrans956.Close()
    _, err957 := mbTrans956.WriteString(arg955)
    if err957 != nil {
      Usage()
      return
    }
    factory958 := thrift.NewTJSONProtocolFactory()
    jsProt959 := factory958.GetProtocol(mbTrans956)
    argvalue4 := interfaces.NewUint64()
    err960 := argvalue4.Read(context.Background(), jsProt959)
    if err960 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err961 := (strconv.Atoi(flag.Arg(1)))
    if err961 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg962 := flag.Arg(2)
    mbTrans963 := thrift.NewTMemoryBufferLen(len(arg962))
    defer mbTrans963.Close()
    _, err964 := mbTrans963.WriteString(arg962)
    if err964 != nil {
      Usage()
      return
    }
    factory965 := thrift.NewTJSONProtocolFactory()
    jsProt966 := factory965.GetProtocol(mbTrans963)
    argvalue1 := interfaces.NewUint64()
    err967 := argvalue1.Read(context.Background(), jsProt966)
    if err967 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg968 := flag.Arg(3)
    mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
    defer mbTrans969.Close()
    _, err970 := mbTrans969.WriteString(arg968)
    if err970 != nil {
      Usage()
      return
    }
    factory971 := thrift.NewTJSONProtocolFactory()
    jsProt972 := factory971.GetProtocol(mbTrans969)
    argvalue2 := interfaces.NewUint64()
    err973 := argvalue2.Read(context.Background(), jsProt972)
    if err973 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err974 := (strconv.Atoi(flag.Arg(1)))
    if err974 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err975 := (strconv.Atoi(flag.Arg(1)))
    if err975 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err976 := (strconv.Atoi(flag.Arg(1)))
    if err976 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg977 := flag.Arg(1)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue0 := interfaces.NewUint64()
    err982 := argvalue0.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg983 := flag.Arg(2)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue1 := interfaces.NewUint64()
    err988 := argvalue1.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg989 := flag.Arg(3)
    mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
    defer mbTrans990.Close()
    _, err991 := mbTrans990.WriteString(arg989)
    if err991 != nil {
      Usage()
      return
    }
    factory992 := thrift.NewTJSONProtocolFactory()
    jsProt993 := factory992.GetProtocol(mbTrans990)
    argvalue2 := interfaces.NewUint64()
    err994 := argvalue2.Read(context.Background(), jsProt993)
    if err994 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg995 := flag.Arg(4)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue3 := interfaces.NewUint64()
    err1000 := argvalue3.Read(context.Background(), jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1001 := flag.Arg(1)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue0 := interfaces.NewUint64()
    err1006 := argvalue0.Read(context.Background(), jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1007 := flag.Arg(2)
    mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
    defer mbTrans1008.Close()
    _, err1009 := mbTrans1008.WriteString(arg1007)
    if err1009 != nil {
      Usage()
      return
    }
    factory1010 := thrift.NewTJSONProtocolFactory()
    jsProt1011 := factory1010.GetProtocol(mbTrans1008)
    argvalue1 := interfaces.NewUint64()
    err1012 := argvalue1.Read(context.Background(), jsProt1011)
    if err1012 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1013 := flag.Arg(3)
    mbTrans1014 := thrift.NewTMemoryBufferLen(len(arg1013))
    defer mbTrans1014.Close()
    _, err1015 := mbTrans1014.WriteString(arg1013)
    if err1015 != nil {
      Usage()
      return
    }
    factory1016 := thrift.NewTJSONProtocolFactory()
    jsProt1017 := factory1016.GetProtocol(mbTrans1014)
    argvalue2 := interfaces.NewUint64()
    err1018 := argvalue2.Read(context.Background(), jsProt1017)
    if err1018 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1019 := flag.Arg(4)
    mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
    defer mbTrans1020.Close()
    _, err1021 := mbTrans1020.WriteString(arg1019)
    if err1021 != nil {
      Usage()
      return
    }
    factory1022 := thrift.NewTJSONProtocolFactory()
    jsProt1023 := factory1022.GetProtocol(mbTrans1020)
    argvalue3 := interfaces.NewUint64()
    err1024 := argvalue3.Read(context.Background(), jsProt1023)
    if err1024 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1025 := flag.Arg(1)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil {
      Usage()
      return
    }
    factory1028 := thrift.NewTJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    argvalue0 := interfaces.NewUint64()
    err1030 := argvalue0.Read(context.Background(), jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1031 := flag.Arg(2)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue1 := interfaces.NewUint64()
    err1036 := argvalue1.Read(context.Background(), jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1037 := flag.Arg(3)
    mbTrans1038 := thrift.NewTMemoryBufferLen(len(arg1037))
    defer mbTrans1038.Close()
    _, err1039 := mbTrans1038.WriteString(arg1037)
    if err1039 != nil {
      Usage()
      return
    }
    factory1040 := thrift.NewTJSONProtocolFactory()
    jsProt1041 := factory1040.GetProtocol(mbTrans1038)
    argvalue2 := interfaces.NewUint64()
    err1042 := argvalue2.Read(context.Background(), jsProt1041)
    if err1042 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1043 := flag.Arg(4)
    mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
    defer mbTrans1044.Close()
    _, err1045 := mbTrans1044.WriteString(arg1043)
    if err1045 != nil {
      Usage()
      return
    }
    factory1046 := thrift.NewTJSONProtocolFactory()
    jsProt1047 := factory1046.GetProtocol(mbTrans1044)
    argvalue3 := interfaces.NewUint64()
    err1048 := argvalue3.Read(context.Background(), jsProt1047)
    if err1048 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1049 := flag.Arg(5)
    mbTrans1050 := thrift.NewTMemoryBufferLen(len(arg1049))
    defer mbTrans1050.Close()
    _, err1051 := mbTrans1050.WriteString(arg1049)
    if err1051 != nil {
      Usage()
      return
    }
    factory1052 := thrift.NewTJSONProtocolFactory()
    jsProt1053 := factory1052.GetProtocol(mbTrans1050)
    argvalue4 := interfaces.NewUint64()
    err1054 := argvalue4.Read(context.Background(), jsProt1053)
    if err1054 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg1055 := flag.Arg(1)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil {
      Usage()
      return
    }
    factory1058 := thrift.NewTJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    argvalue0 := interfaces.NewUint64()
    err1060 := argvalue0.Read(context.Background(), jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1061 := flag.Arg(2)
    mbTrans1062 := thrift.NewTMemoryBufferLen(len(arg1061))
    defer mbTrans1062.Close()
    _, err1063 := mbTrans1062.WriteString(arg1061)
    if err1063 != nil {
      Usage()
      return
    }
    factory1064 := thrift.NewTJSONProtocolFactory()
    jsProt1065 := factory1064.GetProtocol(mbTrans1062)
    argvalue1 := interfaces.NewUint64()
    err1066 := argvalue1.Read(context.Background(), jsProt1065)
    if err1066 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1067 := flag.Arg(3)
    mbTrans1068 := thrift.NewTMemoryBufferLen(len(arg1067))
    defer mbTrans1068.Close()
    _, err1069 := mbTrans1068.WriteString(arg1067)
    if err1069 != nil {
      Usage()
      return
    }
    factory1070 := thrift.NewTJSONProtocolFactory()
    jsProt1071 := factory1070.GetProtocol(mbTrans1068)
    argvalue2 := interfaces.NewUint64()
    err1072 := argvalue2.Read(context.Background(), jsProt1071)
    if err1072 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1073 := flag.Arg(4)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue3 := interfaces.NewUint64()
    err1078 := argvalue3.Read(context.Background(), jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1079 := flag.Arg(5)
    mbTrans1080 := thrift.NewTMemoryBufferLen(len(arg1079))
    defer mbTrans1080.Close()
    _, err1081 := mbTrans1080.WriteString(arg1079)
    if err1081 != nil {
      Usage()
      return
    }
    factory1082 := thrift.NewTJSONProtocolFactory()
    jsProt1083 := factory1082.GetProtocol(mbTrans1080)
    argvalue4 := interfaces.NewUint64()
    err1084 := argvalue4.Read(context.Background(), jsProt1083)
    if err1084 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1085 := flag.Arg(1)
    mbTrans1086 := thrift.NewTMemoryBufferLen(len(arg1085))
    defer mbTrans1086.Close()
    _, err1087 := mbTrans1086.WriteString(arg1085)
    if err1087 != nil {
      Usage()
      return
    }
    factory1088 := thrift.NewTJSONProtocolFactory()
    jsProt1089 := factory1088.GetProtocol(mbTrans1086)
    argvalue0 := interfaces.NewUint64()
    err1090 := argvalue0.Read(context.Background(), jsProt1089)
    if err1090 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1091 := flag.Arg(2)
    mbTrans1092 := thrift.NewTMemoryBufferLen(len(arg1091))
    defer mbTrans1092.Close()
    _, err1093 := mbTrans1092.WriteString(arg1091)
    if err1093 != nil {
      Usage()
      return
    }
    factory1094 := thrift.NewTJSONProtocolFactory()
    jsProt1095 := factory1094.GetProtocol(mbTrans1092)
    argvalue1 := interfaces.NewUint64()
    err1096 := argvalue1.Read(context.Background(), jsProt1095)
    if err1096 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1097 := flag.Arg(3)
    mbTrans1098 := thrift.NewTMemoryBufferLen(len(arg1097))
    defer mbTrans1098.Close()
    _, err1099 := mbTrans1098.WriteString(arg1097)
    if err1099 != nil {
      Usage()
      return
    }
    factory1100 := thrift.NewTJSONProtocolFactory()
    jsProt1101 := factory1100.GetProtocol(mbTrans1098)
    argvalue2 := interfaces.NewUint64()
    err1102 := argvalue2.Read(context.Background(), jsProt1101)
    if err1102 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1103 := flag.Arg(1)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil {
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    argvalue0 := interfaces.NewUint64()
    err1108 := argvalue0.Read(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1109 := flag.Arg(2)
    mbTrans1110 := thrift.NewTMemoryBufferLen(len(arg1109))
    defer mbTrans1110.Close()
    _, err1111 := mbTrans1110.WriteString(arg1109)
    if err1111 != nil {
      Usage()
      return
    }
    factory1112 := thrift.NewTJSONProtocolFactory()
    jsProt1113 := factory1112.GetProtocol(mbTrans1110)
    argvalue1 := interfaces.NewUint64()
    err1114 := argvalue1.Read(context.Background(), jsProt1113)
    if err1114 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1115 := flag.Arg(3)
    mbTrans1116 := thrift.NewTMemoryBufferLen(len(arg1115))
    defer mbTrans1116.Close()
    _, err1117 := mbTrans1116.WriteString(arg1115)
    if err1117 != nil {
      Usage()
      return
    }
    factory1118 := thrift.NewTJSONProtocolFactory()
    jsProt1119 := factory1118.GetProtocol(mbTrans1116)
    argvalue2 := interfaces.NewUint64()
    err1120 := argvalue2.Read(context.Background(), jsProt1119)
    if err1120 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1121 := flag.Arg(4)
    mbTrans1122 := thrift.NewTMemoryBufferLen(len(arg1121))
    defer mbTrans1122.Close()
    _, err1123 := mbTrans1122.WriteString(arg1121)
    if err1123 != nil {
      Usage()
      return
    }
    factory1124 := thrift.NewTJSONProtocolFactory()
    jsProt1125 := factory1124.GetProtocol(mbTrans1122)
    argvalue3 := interfaces.NewUint64()
    err1126 := argvalue3.Read(context.Background(), jsProt1125)
    if err1126 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1128 := (strconv.Atoi(flag.Arg(1)))
    if err1128 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1129 := flag.Arg(2)
    mbTrans1130 := thrift.NewTMemoryBufferLen(len(arg1129))
    defer mbTrans1130.Close()
    _, err1131 := mbTrans1130.WriteString(arg1129)
    if err1131 != nil {
      Usage()
      return
    }
    factory1132 := thrift.NewTJSONProtocolFactory()
    jsProt1133 := factory1132.GetProtocol(mbTrans1130)
    argvalue1 := interfaces.NewUint64()
    err1134 := argvalue1.Read(context.Background(), jsProt1133)
    if err1134 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1136 := (strconv.Atoi(flag.Arg(1)))
    if err1136 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1137 := (strconv.Atoi(flag.Arg(1)))
    if err1137 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1138 := (strconv.Atoi(flag.Arg(1)))
    if err1138 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1139 := flag.Arg(1)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue0 := interfaces.NewUint64()
    err1144 := argvalue0.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1145 := flag.Arg(2)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue1 := interfaces.NewUint64()
    err1150 := argvalue1.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1151 := flag.Arg(3)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue2 := interfaces.NewUint64()
    err1156 := argvalue2.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1157 := flag.Arg(4)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue3 := interfaces.NewUint64()
    err1162 := argvalue3.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1163 := flag.Arg(1)
    mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
    defer mbTrans1164.Close()
    _, err1165 := mbTrans1164.WriteString(arg1163)
    if err1165 != nil {
      Usage()
      return
    }
    factory1166 := thrift.NewTJSONProtocolFactory()
    jsProt1167 := factory1166.GetProtocol(mbTrans1164)
    argvalue0 := interfaces.NewUint64()
    err1168 := argvalue0.Read(context.Background(), jsProt1167)
    if err1168 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1169 := flag.Arg(2)
    mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
    defer mbTrans1170.Close()
    _, err1171 := mbTrans1170.WriteString(arg1169)
    if err1171 != nil {
      Usage()
      return
    }
    factory1172 := thrift.NewTJSONProtocolFactory()
    jsProt1173 := factory1172.GetProtocol(mbTrans1170)
    argvalue1 := interfaces.NewUint64()
    err1174 := argvalue1.Read(context.Background(), jsProt1173)
    if err1174 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1175 := flag.Arg(3)
    mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
    defer mbTrans1176.Close()
    _, err1177 := mbTrans1176.WriteString(arg1175)
    if err1177 != nil {
      Usage()
      return
    }
    factory1178 := thrift.NewTJSONProtocolFactory()
    jsProt1179 := factory1178.GetProtocol(mbTrans1176)
    argvalue2 := interfaces.NewUint64()
    err1180 := argvalue2.Read(context.Background(), jsProt1179)
    if err1180 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1182 := flag.Arg(1)
    mbTrans1183 := thrift.NewTMemoryBufferLen(len(arg1182))
    defer mbTrans1183.Close()
    _, err1184 := mbTrans1183.WriteString(arg1182)
    if err1184 != nil {
      Usage()
      return
    }
    factory1185 := thrift.NewTJSONProtocolFactory()
    jsProt1186 := factory1185.GetProtocol(mbTrans1183)
    argvalue0 := interfaces.NewUint64()
    err1187 := argvalue0.Read(context.Background(), jsProt1186)
    if err1187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1188 := flag.Arg(2)
    mbTrans1189 := thrift.NewTMemoryBufferLen(len(arg1188))
    defer mbTrans1189.Close()
    _, err1190 := mbTrans1189.WriteString(arg1188)
    if err1190 != nil {
      Usage()
      return
    }
    factory1191 := thrift.NewTJSONProtocolFactory()
    jsProt1192 := factory1191.GetProtocol(mbTrans1189)
    argvalue1 := interfaces.NewUint64()
    err1193 := argvalue1.Read(context.Background(), jsProt1192)
    if err1193 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1194 := flag.Arg(3)
    mbTrans1195 := thrift.NewTMemoryBufferLen(len(arg1194))
    defer mbTrans1195.Close()
    _, err1196 := mbTrans1195.WriteString(arg1194)
    if err1196 != nil {
      Usage()
      return
    }
    factory1197 := thrift.NewTJSONProtocolFactory()
    jsProt1198 := factory1197.GetProtocol(mbTrans1195)
    argvalue2 := interfaces.NewUint64()
    err1199 := argvalue2.Read(context.Background(), jsProt1198)
    if err1199 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1201 := flag.Arg(5)
    mbTrans1202 := thrift.NewTMemoryBufferLen(len(arg1201))
    defer mbTrans1202.Close()
    _, err1203 := mbTrans1202.WriteString(arg1201)
    if err1203 != nil {
      Usage()
      return
    }
    factory1204 := thrift.NewTJSONProtocolFactory()
    jsProt1205 := factory1204.GetProtocol(mbTrans1202)
    argvalue4 := interfaces.NewUint64()
    err1206 := argvalue4.Read(context.Background(), jsProt1205)
    if err1206 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1207 := flag.Arg(1)
    mbTrans1208 := thrift.NewTMemoryBufferLen(len(arg1207))
    defer mbTrans1208.Close()
    _, err1209 := mbTrans1208.WriteString(arg1207)
    if err1209 != nil {
      Usage()
      return
    }
    factory1210 := thrift.NewTJSONProtocolFactory()
    jsProt1211 := factory1210.GetProtocol(mbTrans1208)
    argvalue0 := interfaces.NewUint64()
    err1212 := argvalue0.Read(context.Background(), jsProt1211)
    if err1212 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1213 := flag.Arg(2)
    mbTrans1214 := thrift.NewTMemoryBufferLen(len(arg1213))
    defer mbTrans1214.Close()
    _, err1215 := mbTrans1214.WriteString(arg1213)
    if err1215 != nil {
      Usage()
      return
    }
    factory1216 := thrift.NewTJSONProtocolFactory()
    jsProt1217 := factory1216.GetProtocol(mbTrans1214)
    argvalue1 := interfaces.NewUint64()
    err1218 := argvalue1.Read(context.Background(), jsProt1217)
    if err1218 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1219 := flag.Arg(3)
    mbTrans1220 := thrift.NewTMemoryBufferLen(len(arg1219))
    defer mbTrans1220.Close()
    _, err1221 := mbTrans1220.WriteString(arg1219)
    if err1221 != nil {
      Usage()
      return
    }
    factory1222 := thrift.NewTJSONProtocolFactory()
    jsProt1223 := factory1222.GetProtocol(mbTrans1220)
    argvalue2 := interfaces.NewUint64()
    err1224 := argvalue2.Read(context.Background(), jsProt1223)
    if err1224 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1226 := flag.Arg(5)
    mbTrans1227 := thrift.NewTMemoryBufferLen(len(arg1226))
    defer mbTrans1227.Close()
    _, err1228 := mbTrans1227.WriteString(arg1226)
    if err1228 != nil {
      Usage()
      return
    }
    factory1229 := thrift.NewTJSONProtocolFactory()
    jsProt1230 := factory1229.GetProtocol(mbTrans1227)
    argvalue4 := interfaces.NewUint64()
    err1231 := argvalue4.Read(context.Background(), jsProt1230)
    if err1231 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1232 := flag.Arg(1)
    mbTrans1233 := thrift.NewTMemoryBufferLen(len(arg1232))
    defer mbTrans1233.Close()
    _, err1234 := mbTrans1233.WriteString(arg1232)
    if err1234 != nil {
      Usage()
      return
    }
    factory1235 := thrift.NewTJSONProtocolFactory()
    jsProt1236 := factory1235.GetProtocol(mbTrans1233)
    argvalue0 := interfaces.NewUint64()
    err1237 := argvalue0.Read(context.Background(), jsProt1236)
    if err1237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1238 := flag.Arg(2)
    mbTrans1239 := thrift.NewTMemoryBufferLen(len(arg1238))
    defer mbTrans1239.Close()
    _, err1240 := mbTrans1239.WriteString(arg1238)
    if err1240 != nil {
      Usage()
      return
    }
    factory1241 := thrift.NewTJSONProtocolFactory()
    jsProt1242 := factory1241.GetProtocol(mbTrans1239)
    argvalue1 := interfaces.NewUint64()
    err1243 := argvalue1.Read(context.Background(), jsProt1242)
    if err1243 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1244 := flag.Arg(3)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil {
      Usage()
      return
    }
    factory1247 := thrift.NewTJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    argvalue2 := interfaces.NewUint64()
    err1249 := argvalue2.Read(context.Background(), jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1250 := flag.Arg(1)
    mbTrans1251 := thrift.NewTMemoryBufferLen(len(arg1250))
    defer mbTrans1251.Close()
    _, err1252 := mbTrans1251.WriteString(arg1250)
    if err1252 != nil {
      Usage()
      return
    }
    factory1253 := thrift.NewTJSONProtocolFactory()
    jsProt1254 := factory1253.GetProtocol(mbTrans1251)
    argvalue0 := interfaces.NewUint64()
    err1255 := argvalue0.Read(context.Background(), jsProt1254)
    if err1255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1256 := flag.Arg(2)
    mbTrans1257 := thrift.NewTMemoryBufferLen(len(arg1256))
    defer mbTrans1257.Close()
    _, err1258 := mbTrans1257.WriteString(arg1256)
    if err1258 != nil {
      Usage()
      return
    }
    factory1259 := thrift.NewTJSONProtocolFactory()
    jsProt1260 := factory1259.GetProtocol(mbTrans1257)
    argvalue1 := interfaces.NewUint64()
    err1261 := argvalue1.Read(context.Background(), jsProt1260)
    if err1261 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1262 := flag.Arg(3)
    mbTrans1263 := thrift.NewTMemoryBufferLen(len(arg1262))
    defer mbTrans1263.Close()
    _, err1264 := mbTrans1263.WriteString(arg1262)
    if err1264 != nil {
      Usage()
      return
    }
    factory1265 := thrift.NewTJSONProtocolFactory()
    jsProt1266 := factory1265.GetProtocol(mbTrans1263)
    argvalue2 := interfaces.NewUint64()
    err1267 := argvalue2.Read(context.Background(), jsProt1266)
    if err1267 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1268 := flag.Arg(4)
    mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
    defer mbTrans1269.Close()
    _, err1270 := mbTrans1269.WriteString(arg1268)
    if err1270 != nil {
      Usage()
      return
    }
    factory1271 := thrift.NewTJSONProtocolFactory()
    jsProt1272 := factory1271.GetProtocol(mbTrans1269)
    argvalue3 := interfaces.NewUint64()
    err1273 := argvalue3.Read(context.Background(), jsProt1272)
    if err1273 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1275 := (strconv.Atoi(flag.Arg(1)))
    if err1275 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1276 := flag.Arg(2)
    mbTrans1277 := thrift.NewTMemoryBufferLen(len(arg1276))
    defer mbTrans1277.Close()
    _, err1278 := mbTrans1277.WriteString(arg1276)
    if err1278 != nil {
      Usage()
      return
    }
    factory1279 := thrift.NewTJSONProtocolFactory()
    jsProt1280 := factory1279.GetProtocol(mbTrans1277)
    argvalue1 := interfaces.NewUint64()
    err1281 := argvalue1.Read(context.Background(), jsProt1280)
    if err1281 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1283 := (strconv.Atoi(flag.Arg(1)))
    if err1283 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1284 := (strconv.Atoi(flag.Arg(1)))
    if err1284 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1285 := (strconv.Atoi(flag.Arg(1)))
    if err1285 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1286 := flag.Arg(1)
    mbTrans1287 := thrift.NewTMemoryBufferLen(len(arg1286))
    defer mbTrans1287.Close()
    _, err1288 := mbTrans1287.WriteString(arg1286)
    if err1288 != nil {
      Usage()
      return
    }
    factory1289 := thrift.NewTJSONProtocolFactory()
    jsProt1290 := factory1289.GetProtocol(mbTrans1287)
    argvalue0 := interfaces.NewUint64()
    err1291 := argvalue0.Read(context.Background(), jsProt1290)
    if err1291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1292 := flag.Arg(2)
    mbTrans1293 := thrift.NewTMemoryBufferLen(len(arg1292))
    defer mbTrans1293.Close()
    _, err1294 := mbTrans1293.WriteString(arg1292)
    if err1294 != nil {
      Usage()
      return
    }
    factory1295 := thrift.NewTJSONProtocolFactory()
    jsProt1296 := factory1295.GetProtocol(mbTrans1293)
    argvalue1 := interfaces.NewUint64()
    err1297 := argvalue1.Read(context.Background(), jsProt1296)
    if err1297 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1298 := flag.Arg(3)
    mbTrans1299 := thrift.NewTMemoryBufferLen(len(arg1298))
    defer mbTrans1299.Close()
    _, err1300 := mbTrans1299.WriteString(arg1298)
    if err1300 != nil {
      Usage()
      return
    }
    factory1301 := thrift.NewTJSONProtocolFactory()
    jsProt1302 := factory1301.GetProtocol(mbTrans1299)
    argvalue2 := interfaces.NewUint64()
    err1303 := argvalue2.Read(context.Background(), jsProt1302)
    if err1303 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1304 := flag.Arg(4)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue3 := interfaces.NewUint64()
    err1309 := argvalue3.Read(context.Background(), jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1310 := flag.Arg(1)
    mbTrans1311 := thrift.NewTMemoryBufferLen(len(arg1310))
    defer mbTrans1311.Close()
    _, err1312 := mbTrans1311.WriteString(arg1310)
    if err1312 != nil {
      Usage()
      return
    }
    factory1313 := thrift.NewTJSONProtocolFactory()
    jsProt1314 := factory1313.GetProtocol(mbTrans1311)
    argvalue0 := interfaces.NewUint64()
    err1315 := argvalue0.Read(context.Background(), jsProt1314)
    if err1315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1316 := flag.Arg(2)
    mbTrans1317 := thrift.NewTMemoryBufferLen(len(arg1316))
    defer mbTrans1317.Close()
    _, err1318 := mbTrans1317.WriteString(arg1316)
    if err1318 != nil {
      Usage()
      return
    }
    factory1319 := thrift.NewTJSONProtocolFactory()
    jsProt1320 := factory1319.GetProtocol(mbTrans1317)
    argvalue1 := interfaces.NewUint64()
    err1321 := argvalue1.Read(context.Background(), jsProt1320)
    if err1321 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1322 := flag.Arg(3)
    mbTrans1323 := thrift.NewTMemoryBufferLen(len(arg1322))
    defer mbTrans1323.Close()
    _, err1324 := mbTrans1323.WriteString(arg1322)
    if err1324 != nil {
      Usage()
      return
    }
    factory1325 := thrift.NewTJSONProtocolFactory()
    jsProt1326 := factory1325.GetProtocol(mbTrans1323)
    argvalue2 := interfaces.NewUint64()
    err1327 := argvalue2.Read(context.Background(), jsProt1326)
    if err1327 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1329 := flag.Arg(1)
    mbTrans1330 := thrift.NewTMemoryBufferLen(len(arg1329))
    defer mbTrans1330.Close()
    _, err1331 := mbTrans1330.WriteString(arg1329)
    if err1331 != nil {
      Usage()
      return
    }
    factory1332 := thrift.NewTJSONProtocolFactory()
    jsProt1333 := factory1332.GetProtocol(mbTrans1330)
    argvalue0 := interfaces.NewUint64()
    err1334 := argvalue0.Read(context.Background(), jsProt1333)
    if err1334 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1335 := flag.Arg(2)
    mbTrans1336 := thrift.NewTMemoryBufferLen(len(arg1335))
    defer mbTrans1336.Close()
    _, err1337 := mbTrans1336.WriteString(arg1335)
    if err1337 != nil {
      Usage()
      return
    }
    factory1338 := thrift.NewTJSONProtocolFactory()
    jsProt1339 := factory1338.GetProtocol(mbTrans1336)
    argvalue1 := interfaces.NewUint64()
    err1340 := argvalue1.Read(context.Background(), jsProt1339)
    if err1340 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1341 := flag.Arg(3)
    mbTrans1342 := thrift.NewTMemoryBufferLen(len(arg1341))
    defer mbTrans1342.Close()
    _, err1343 := mbTrans1342.WriteString(arg1341)
    if err1343 != nil {
      Usage()
      return
    }
    factory1344 := thrift.NewTJSONProtocolFactory()
    jsProt1345 := factory1344.GetProtocol(mbTrans1342)
    argvalue2 := interfaces.NewUint64()
    err1346 := argvalue2.Read(context.Background(), jsProt1345)
    if err1346 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1348 := flag.Arg(5)
    mbTrans1349 := thrift.NewTMemoryBufferLen(len(arg1348))
    defer mbTrans1349.Close()
    _, err1350 := mbTrans1349.WriteString(arg1348)
    if err1350 != nil {
      Usage()
      return
    }
    factory1351 := thrift.NewTJSONProtocolFactory()
    jsProt1352 := factory1351.GetProtocol(mbTrans1349)
    argvalue4 := interfaces.NewUint64()
    err1353 := argvalue4.Read(context.Background(), jsProt1352)
    if err1353 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1354 := flag.Arg(1)
    mbTrans1355 := thrift.NewTMemoryBufferLen(len(arg1354))
    defer mbTrans1355.Close()
    _, err1356 := mbTrans1355.WriteString(arg1354)
    if err1356 != nil {
      Usage()
      return
    }
    factory1357 := thrift.NewTJSONProtocolFactory()
    jsProt1358 := factory1357.GetProtocol(mbTrans1355)
    argvalue0 := interfaces.NewUint64()
    err1359 := argvalue0.Read(context.Background(), jsProt1358)
    if err1359 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1360 := flag.Arg(2)
    mbTrans1361 := thrift.NewTMemoryBufferLen(len(arg1360))
    defer mbTrans1361.Close()
    _, err1362 := mbTrans1361.WriteString(arg1360)
    if err1362 != nil {
      Usage()
      return
    }
    factory1363 := thrift.NewTJSONProtocolFactory()
    jsProt1364 := factory1363.GetProtocol(mbTrans1361)
    argvalue1 := interfaces.NewUint64()
    err1365 := argvalue1.Read(context.Background(), jsProt1364)
    if err1365 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1366 := flag.Arg(3)
    mbTrans1367 := thrift.NewTMemoryBufferLen(len(arg1366))
    defer mbTrans1367.Close()
    _, err1368 := mbTrans1367.WriteString(arg1366)
    if err1368 != nil {
      Usage()
      return
    }
    factory1369 := thrift.NewTJSONProtocolFactory()
    jsProt1370 := factory1369.GetProtocol(mbTrans1367)
    argvalue2 := interfaces.NewUint64()
    err1371 := argvalue2.Read(context.Background(), jsProt1370)
    if err1371 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1373 := flag.Arg(5)
    mbTrans1374 := thrift.NewTMemoryBufferLen(len(arg1373))
    defer mbTrans1374.Close()
    _, err1375 := mbTrans1374.WriteString(arg1373)
    if err1375 != nil {
      Usage()
      return
    }
    factory1376 := thrift.NewTJSONProtocolFactory()
    jsProt1377 := factory1376.GetProtocol(mbTrans1374)
    argvalue4 := interfaces.NewUint64()
    err1378 := argvalue4.Read(context.Background(), jsProt1377)
    if err1378 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1379 := flag.Arg(1)
    mbTrans1380 := thrift.NewTMemoryBufferLen(len(arg1379))
    defer mbTrans1380.Close()
    _, err1381 := mbTrans1380.WriteString(arg1379)
    if err1381 != nil {
      Usage()
      return
    }
    factory1382 := thrift.NewTJSONProtocolFactory()
    jsProt1383 := factory1382.GetProtocol(mbTrans1380)
    argvalue0 := interfaces.NewUint64()
    err1384 := argvalue0.Read(context.Background(), jsProt1383)
    if err1384 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1385 := flag.Arg(2)
    mbTrans1386 := thrift.NewTMemoryBufferLen(len(arg1385))
    defer mbTrans1386.Close()
    _, err1387 := mbTrans1386.WriteString(arg1385)
    if err1387 != nil {
      Usage()
      return
    }
    factory1388 := thrift.NewTJSONProtocolFactory()
    jsProt1389 := factory1388.GetProtocol(mbTrans1386)
    argvalue1 := interfaces.NewUint64()
    err1390 := argvalue1.Read(context.Background(), jsProt1389)
    if err1390 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1391 := flag.Arg(3)
    mbTrans1392 := thrift.NewTMemoryBufferLen(len(arg1391))
    defer mbTrans1392.Close()
    _, err1393 := mbTrans1392.WriteString(arg1391)
    if err1393 != nil {
      Usage()
      return
    }
    factory1394 := thrift.NewTJSONProtocolFactory()
    jsProt1395 := factory1394.GetProtocol(mbTrans1392)
    argvalue2 := interfaces.NewUint64()
    err1396 := argvalue2.Read(context.Background(), jsProt1395)
    if err1396 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1397 := flag.Arg(1)
    mbTrans1398 := thrift.NewTMemoryBufferLen(len(arg1397))
    defer mbTrans1398.Close()
    _, err1399 := mbTrans1398.WriteString(arg1397)
    if err1399 != nil {
      Usage()
      return
    }
    factory1400 := thrift.NewTJSONProtocolFactory()
    jsProt1401 := factory1400.GetProtocol(mbTrans1398)
    argvalue0 := interfaces.NewUint64()
    err1402 := argvalue0.Read(context.Background(), jsProt1401)
    if err1402 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1403 := flag.Arg(2)
    mbTrans1404 := thrift.NewTMemoryBufferLen(len(arg1403))
    defer mbTrans1404.Close()
    _, err1405 := mbTrans1404.WriteString(arg1403)
    if err1405 != nil {
      Usage()
      return
    }
    factory1406 := thrift.NewTJSONProtocolFactory()
    jsProt1407 := factory1406.GetProtocol(mbTrans1404)
    argvalue1 := interfaces.NewUint64()
    err1408 := argvalue1.Read(context.Background(), jsProt1407)
    if err1408 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1409 := flag.Arg(3)
    mbTrans1410 := thrift.NewTMemoryBufferLen(len(arg1409))
    defer mbTrans1410.Close()
    _, err1411 := mbTrans1410.WriteString(arg1409)
    if err1411 != nil {
      Usage()
      return
    }
    factory1412 := thrift.NewTJSONProtocolFactory()
    jsProt1413 := factory1412.GetProtocol(mbTrans1410)
    argvalue2 := interfaces.NewUint64()
    err1414 := argvalue2.Read(context.Background(), jsProt1413)
    if err1414 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1415 := flag.Arg(4)
    mbTrans1416 := thrift.NewTMemoryBufferLen(len(arg1415))
    defer mbTrans1416.Close()
    _, err1417 := mbTrans1416.WriteString(arg1415)
    if err1417 != nil {
      Usage()
      return
    }
    factory1418 := thrift.NewTJSONProtocolFactory()
    jsProt1419 := factory1418.GetProtocol(mbTrans1416)
    argvalue3 := interfaces.NewUint64()
    err1420 := argvalue3.Read(context.Background(), jsProt1419)
    if err1420 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1422 := (strconv.Atoi(flag.Arg(1)))
    if err1422 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1423 := flag.Arg(2)
    mbTrans1424 := thrift.NewTMemoryBufferLen(len(arg1423))
    defer mbTrans1424.Close()
    _, err1425 := mbTrans1424.WriteString(arg1423)
    if err1425 != nil {
      Usage()
      return
    }
    factory1426 := thrift.NewTJSONProtocolFactory()
    jsProt1427 := factory1426.GetProtocol(mbTrans1424)
    argvalue1 := interfaces.NewUint64()
    err1428 := argvalue1.Read(context.Background(), jsProt1427)
    if err1428 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1430 := (strconv.Atoi(flag.Arg(1)))
    if err1430 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1431 := (strconv.Atoi(flag.Arg(1)))
    if err1431 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1432 := (strconv.Atoi(flag.Arg(1)))
    if err1432 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1433 := flag.Arg(1)
    mbTrans1434 := thrift.NewTMemoryBufferLen(len(arg1433))
    defer mbTrans1434.Close()
    _, err1435 := mbTrans1434.WriteString(arg1433)
    if err1435 != nil {
      Usage()
      return
    }
    factory1436 := thrift.NewTJSONProtocolFactory()
    jsProt1437 := factory1436.GetProtocol(mbTrans1434)
    argvalue0 := interfaces.NewUint64()
    err1438 := argvalue0.Read(context.Background(), jsProt1437)
    if err1438 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1439 := flag.Arg(2)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil {
      Usage()
      return
    }
    factory1442 := thrift.NewTJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    argvalue1 := interfaces.NewUint64()
    err1444 := argvalue1.Read(context.Background(), jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1445 := flag.Arg(3)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil {
      Usage()
      return
    }
    factory1448 := thrift.NewTJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    argvalue2 := interfaces.NewUint64()
    err1450 := argvalue2.Read(context.Background(), jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1451 := flag.Arg(4)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil {
      Usage()
      return
    }
    factory1454 := thrift.NewTJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    argvalue3 := interfaces.NewUint64()
    err1456 := argvalue3.Read(context.Background(), jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1457 := flag.Arg(1)
    mbTrans1458 := thrift.NewTMemoryBufferLen(len(arg1457))
    defer mbTrans1458.Close()
    _, err1459 := mbTrans1458.WriteString(arg1457)
    if err1459 != nil {
      Usage()
      return
    }
    factory1460 := thrift.NewTJSONProtocolFactory()
    jsProt1461 := factory1460.GetProtocol(mbTrans1458)
    argvalue0 := interfaces.NewUint64()
    err1462 := argvalue0.Read(context.Background(), jsProt1461)
    if err1462 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1463 := flag.Arg(2)
    mbTrans1464 := thrift.NewTMemoryBufferLen(len(arg1463))
    defer mbTrans1464.Close()
    _, err1465 := mbTrans1464.WriteString(arg1463)
    if err1465 != nil {
      Usage()
      return
    }
    factory1466 := thrift.NewTJSONProtocolFactory()
    jsProt1467 := factory1466.GetProtocol(mbTrans1464)
    argvalue1 := interfaces.NewUint64()
    err1468 := argvalue1.Read(context.Background(), jsProt1467)
    if err1468 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1469 := flag.Arg(3)
    mbTrans1470 := thrift.NewTMemoryBufferLen(len(arg1469))
    defer mbTrans1470.Close()
    _, err1471 := mbTrans1470.WriteString(arg1469)
    if err1471 != nil {
      Usage()
      return
    }
    factory1472 := thrift.NewTJSONProtocolFactory()
    jsProt1473 := factory1472.GetProtocol(mbTrans1470)
    argvalue2 := interfaces.NewUint64()
    err1474 := argvalue2.Read(context.Background(), jsProt1473)
    if err1474 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1476 := flag.Arg(1)
    mbTrans1477 := thrift.NewTMemoryBufferLen(len(arg1476))
    defer mbTrans1477.Close()
    _, err1478 := mbTrans1477.WriteString(arg1476)
    if err1478 != nil {
      Usage()
      return
    }
    factory1479 := thrift.NewTJSONProtocolFactory()
    jsProt1480 := factory1479.GetProtocol(mbTrans1477)
    argvalue0 := interfaces.NewUint64()
    err1481 := argvalue0.Read(context.Background(), jsProt1480)
    if err1481 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1482 := flag.Arg(2)
    mbTrans1483 := thrift.NewTMemoryBufferLen(len(arg1482))
    defer mbTrans1483.Close()
    _, err1484 := mbTrans1483.WriteString(arg1482)
    if err1484 != nil {
      Usage()
      return
    }
    factory1485 := thrift.NewTJSONProtocolFactory()
    jsProt1486 := factory1485.GetProtocol(mbTrans1483)
    argvalue1 := interfaces.NewUint64()
    err1487 := argvalue1.Read(context.Background(), jsProt1486)
    if err1487 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1488 := flag.Arg(3)
    mbTrans1489 := thrift.NewTMemoryBufferLen(len(arg1488))
    defer mbTrans1489.Close()
    _, err1490 := mbTrans1489.WriteString(arg1488)
    if err1490 != nil {
      Usage()
      return
    }
    factory1491 := thrift.NewTJSONProtocolFactory()
    jsProt1492 := factory1491.GetProtocol(mbTrans1489)
    argvalue2 := interfaces.NewUint64()
    err1493 := argvalue2.Read(context.Background(), jsProt1492)
    if err1493 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1495 := flag.Arg(5)
    mbTrans1496 := thrift.NewTMemoryBufferLen(len(arg1495))
    defer mbTrans1496.Close()
    _, err1497 := mbTrans1496.WriteString(arg1495)
    if err1497 != nil {
      Usage()
      return
    }
    factory1498 := thrift.NewTJSONProtocolFactory()
    jsProt1499 := factory1498.GetProtocol(mbTrans1496)
    argvalue4 := interfaces.NewUint64()
    err1500 := argvalue4.Read(context.Background(), jsProt1499)
    if err1500 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1501 := flag.Arg(1)
    mbTrans1502 := thrift.NewTMemoryBufferLen(len(arg1501))
    defer mbTrans1502.Close()
    _, err1503 := mbTrans1502.WriteString(arg1501)
    if err1503 != nil {
      Usage()
      return
    }
    factory1504 := thrift.NewTJSONProtocolFactory()
    jsProt1505 := factory1504.GetProtocol(mbTrans1502)
    argvalue0 := interfaces.NewUint64()
    err1506 := argvalue0.Read(context.Background(), jsProt1505)
    if err1506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1507 := flag.Arg(2)
    mbTrans1508 := thrift.NewTMemoryBufferLen(len(arg1507))
    defer mbTrans1508.Close()
    _, err1509 := mbTrans1508.WriteString(arg1507)
    if err1509 != nil {
      Usage()
      return
    }
    factory1510 := thrift.NewTJSONProtocolFactory()
    jsProt1511 := factory1510.GetProtocol(mbTrans1508)
    argvalue1 := interfaces.NewUint64()
    err1512 := argvalue1.Read(context.Background(), jsProt1511)
    if err1512 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1513 := flag.Arg(3)
    mbTrans1514 := thrift.NewTMemoryBufferLen(len(arg1513))
    defer mbTrans1514.Close()
    _, err1515 := mbTrans1514.WriteString(arg1513)
    if err1515 != nil {
      Usage()
      return
    }
    factory1516 := thrift.NewTJSONProtocolFactory()
    jsProt1517 := factory1516.GetProtocol(mbTrans1514)
    argvalue2 := interfaces.NewUint64()
    err1518 := argvalue2.Read(context.Background(), jsProt1517)
    if err1518 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1520 := flag.Arg(5)
    mbTrans1521 := thrift.NewTMemoryBufferLen(len(arg1520))
    defer mbTrans1521.Close()
    _, err1522 := mbTrans1521.WriteString(arg1520)
    if err1522 != nil {
      Usage()
      return
    }
    factory1523 := thrift.NewTJSONProtocolFactory()
    jsProt1524 := factory1523.GetProtocol(mbTrans1521)
    argvalue4 := interfaces.NewUint64()
    err1525 := argvalue4.Read(context.Background(), jsProt1524)
    if err1525 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1526 := flag.Arg(1)
    mbTrans1527 := thrift.NewTMemoryBufferLen(len(arg1526))
    defer mbTrans1527.Close()
    _, err1528 := mbTrans1527.WriteString(arg1526)
    if err1528 != nil {
      Usage()
      return
    }
    factory1529 := thrift.NewTJSONProtocolFactory()
    jsProt1530 := factory1529.GetProtocol(mbTrans1527)
    argvalue0 := interfaces.NewUint64()
    err1531 := argvalue0.Read(context.Background(), jsProt1530)
    if err1531 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1532 := flag.Arg(2)
    mbTrans1533 := thrift.NewTMemoryBufferLen(len(arg1532))
    defer mbTrans1533.Close()
    _, err1534 := mbTrans1533.WriteString(arg1532)
    if err1534 != nil {
      Usage()
      return
    }
    factory1535 := thrift.NewTJSONProtocolFactory()
    jsProt1536 := factory1535.GetProtocol(mbTrans1533)
    argvalue1 := interfaces.NewUint64()
    err1537 := argvalue1.Read(context.Background(), jsProt1536)
    if err1537 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1538 := flag.Arg(3)
    mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
    defer mbTrans1539.Close()
    _, err1540 := mbTrans1539.WriteString(arg1538)
    if err1540 != nil {
      Usage()
      return
    }
    factory1541 := thrift.NewTJSONProtocolFactory()
    jsProt1542 := factory1541.GetProtocol(mbTrans1539)
    argvalue2 := interfaces.NewUint64()
    err1543 := argvalue2.Read(context.Background(), jsProt1542)
    if err1543 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1544 := flag.Arg(1)
    mbTrans1545 := thrift.NewTMemoryBufferLen(len(arg1544))
    defer mbTrans1545.Close()
    _, err1546 := mbTrans1545.WriteString(arg1544)
    if err1546 != nil {
      Usage()
      return
    }
    factory1547 := thrift.NewTJSONProtocolFactory()
    jsProt1548 := factory1547.GetProtocol(mbTrans1545)
    argvalue0 := interfaces.NewUint64()
    err1549 := argvalue0.Read(context.Background(), jsProt1548)
    if err1549 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1550 := flag.Arg(2)
    mbTrans1551 := thrift.NewTMemoryBufferLen(len(arg1550))
    defer mbTrans1551.Close()
    _, err1552 := mbTrans1551.WriteString(arg1550)
    if err1552 != nil {
      Usage()
      return
    }
    factory1553 := thrift.NewTJSONProtocolFactory()
    jsProt1554 := factory1553.GetProtocol(mbTrans1551)
    argvalue1 := interfaces.NewUint64()
    err1555 := argvalue1.Read(context.Background(), jsProt1554)
    if err1555 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1556 := flag.Arg(3)
    mbTrans1557 := thrift.NewTMemoryBufferLen(len(arg1556))
    defer mbTrans1557.Close()
    _, err1558 := mbTrans1557.WriteString(arg1556)
    if err1558 != nil {
      Usage()
      return
    }
    factory1559 := thrift.NewTJSONProtocolFactory()
    jsProt1560 := factory1559.GetProtocol(mbTrans1557)
    argvalue2 := interfaces.NewUint64()
    err1561 := argvalue2.Read(context.Background(), jsProt1560)
    if err1561 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1562 := flag.Arg(4)
    mbTrans1563 := thrift.NewTMemoryBufferLen(len(arg1562))
    defer mbTrans1563.Close()
    _, err1564 := mbTrans1563.WriteString(arg1562)
    if err1564 != nil {
      Usage()
      return
    }
    factory1565 := thrift.NewTJSONProtocolFactory()
    jsProt1566 := factory1565.GetProtocol(mbTrans1563)
    argvalue3 := interfaces.NewUint64()
    err1567 := argvalue3.Read(context.Background(), jsProt1566)
    if err1567 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1569 := (strconv.Atoi(flag.Arg(1)))
    if err1569 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1570 := flag.Arg(2)
    mbTrans1571 := thrift.NewTMemoryBufferLen(len(arg1570))
    defer mbTrans1571.Close()
    _, err1572 := mbTrans1571.WriteString(arg1570)
    if err1572 != nil {
      Usage()
      return
    }
    factory1573 := thrift.NewTJSONProtocolFactory()
    jsProt1574 := factory1573.GetProtocol(mbTrans1571)
    argvalue1 := interfaces.NewUint64()
    err1575 := argvalue1.Read(context.Background(), jsProt1574)
    if err1575 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1577 := (strconv.Atoi(flag.Arg(1)))
    if err1577 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1578 := (strconv.Atoi(flag.Arg(1)))
    if err1578 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1579 := (strconv.Atoi(flag.Arg(1)))
    if err1579 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1580 := flag.Arg(1)
    mbTrans1581 := thrift.NewTMemoryBufferLen(len(arg1580))
    defer mbTrans1581.Close()
    _, err1582 := mbTrans1581.WriteString(arg1580)
    if err1582 != nil {
      Usage()
      return
    }
    factory1583 := thrift.NewTJSONProtocolFactory()
    jsProt1584 := factory1583.GetProtocol(mbTrans1581)
    argvalue0 := interfaces.NewUint64()
    err1585 := argvalue0.Read(context.Background(), jsProt1584)
    if err1585 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1586 := flag.Arg(2)
    mbTrans1587 := thrift.NewTMemoryBufferLen(len(arg1586))
    defer mbTrans1587.Close()
    _, err1588 := mbTrans1587.WriteString(arg1586)
    if err1588 != nil {
      Usage()
      return
    }
    factory1589 := thrift.NewTJSONProtocolFactory()
    jsProt1590 := factory1589.GetProtocol(mbTrans1587)
    argvalue1 := interfaces.NewUint64()
    err1591 := argvalue1.Read(context.Background(), jsProt1590)
    if err1591 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1592 := flag.Arg(3)
    mbTrans1593 := thrift.NewTMemoryBufferLen(len(arg1592))
    defer mbTrans1593.Close()
    _, err1594 := mbTrans1593.WriteString(arg1592)
    if err1594 != nil {
      Usage()
      return
    }
    factory1595 := thrift.NewTJSONProtocolFactory()
    jsProt1596 := factory1595.GetProtocol(mbTrans1593)
    argvalue2 := interfaces.NewUint64()
    err1597 := argvalue2.Read(context.Background(), jsProt1596)
    if err1597 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1598 := flag.Arg(4)
    mbTrans1599 := thrift.NewTMemoryBufferLen(len(arg1598))
    defer mbTrans1599.Close()
    _, err1600 := mbTrans1599.WriteString(arg1598)
    if err1600 != nil {
      Usage()
      return
    }
    factory1601 := thrift.NewTJSONProtocolFactory()
    jsProt1602 := factory1601.GetProtocol(mbTrans1599)
    argvalue3 := interfaces.NewUint64()
    err1603 := argvalue3.Read(context.Background(), jsProt1602)
    if err1603 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1604 := flag.Arg(1)
    mbTrans1605 := thrift.NewTMemoryBufferLen(len(arg1604))
    defer mbTrans1605.Close()
    _, err1606 := mbTrans1605.WriteString(arg1604)
    if err1606 != nil {
      Usage()
      return
    }
    factory1607 := thrift.NewTJSONProtocolFactory()
    jsProt1608 := factory1607.GetProtocol(mbTrans1605)
    argvalue0 := interfaces.NewUint64()
    err1609 := argvalue0.Read(context.Background(), jsProt1608)
    if err1609 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1610 := flag.Arg(2)
    mbTrans1611 := thrift.NewTMemoryBufferLen(len(arg1610))
    defer mbTrans1611.Close()
    _, err1612 := mbTrans1611.WriteString(arg1610)
    if err1612 != nil {
      Usage()
      return
    }
    factory1613 := thrift.NewTJSONProtocolFactory()
    jsProt1614 := factory1613.GetProtocol(mbTrans1611)
    argvalue1 := interfaces.NewUint64()
    err1615 := argvalue1.Read(context.Background(), jsProt1614)
    if err1615 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1616 := flag.Arg(3)
    mbTrans1617 := thrift.NewTMemoryBufferLen(len(arg1616))
    defer mbTrans1617.Close()
    _, err1618 := mbTrans1617.WriteString(arg1616)
    if err1618 != nil {
      Usage()
      return
    }
    factory1619 := thrift.NewTJSONProtocolFactory()
    jsProt1620 := factory1619.GetProtocol(mbTrans1617)
    argvalue2 := interfaces.NewUint64()
    err1621 := argvalue2.Read(context.Background(), jsProt1620)
    if err1621 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1623 := flag.Arg(1)
    mbTrans1624 := thrift.NewTMemoryBufferLen(len(arg1623))
    defer mbTrans1624.Close()
    _, err1625 := mbTrans1624.WriteString(arg1623)
    if err1625 != nil {
      Usage()
      return
    }
    factory1626 := thrift.NewTJSONProtocolFactory()
    jsProt1627 := factory1626.GetProtocol(mbTrans1624)
    argvalue0 := interfaces.NewUint64()
    err1628 := argvalue0.Read(context.Background(), jsProt1627)
    if err1628 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1629 := flag.Arg(2)
    mbTrans1630 := thrift.NewTMemoryBufferLen(len(arg1629))
    defer mbTrans1630.Close()
    _, err1631 := mbTrans1630.WriteString(arg1629)
    if err1631 != nil {
      Usage()
      return
    }
    factory1632 := thrift.NewTJSONProtocolFactory()
    jsProt1633 := factory1632.GetProtocol(mbTrans1630)
    argvalue1 := interfaces.NewUint64()
    err1634 := argvalue1.Read(context.Background(), jsProt1633)
    if err1634 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1635 := flag.Arg(3)
    mbTrans1636 := thrift.NewTMemoryBufferLen(len(arg1635))
    defer mbTrans1636.Close()
    _, err1637 := mbTrans1636.WriteString(arg1635)
    if err1637 != nil {
      Usage()
      return
    }
    factory1638 := thrift.NewTJSONProtocolFactory()
    jsProt1639 := factory1638.GetProtocol(mbTrans1636)
    argvalue2 := interfaces.NewUint64()
    err1640 := argvalue2.Read(context.Background(), jsProt1639)
    if err1640 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1642 := flag.Arg(5)
    mbTrans1643 := thrift.NewTMemoryBufferLen(len(arg1642))
    defer mbTrans1643.Close()
    _, err1644 := mbTrans1643.WriteString(arg1642)
    if err1644 != nil {
      Usage()
      return
    }
    factory1645 := thrift.NewTJSONProtocolFactory()
    jsProt1646 := factory1645.GetProtocol(mbTrans1643)
    argvalue4 := interfaces.NewUint64()
    err1647 := argvalue4.Read(context.Background(), jsProt1646)
    if err1647 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1648 := flag.Arg(1)
    mbTrans1649 := thrift.NewTMemoryBufferLen(len(arg1648))
    defer mbTrans1649.Close()
    _, err1650 := mbTrans1649.WriteString(arg1648)
    if err1650 != nil {
      Usage()
      return
    }
    factory1651 := thrift.NewTJSONProtocolFactory()
    jsProt1652 := factory1651.GetProtocol(mbTrans1649)
    argvalue0 := interfaces.NewUint64()
    err1653 := argvalue0.Read(context.Background(), jsProt1652)
    if err1653 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1654 := flag.Arg(2)
    mbTrans1655 := thrift.NewTMemoryBufferLen(len(arg1654))
    defer mbTrans1655.Close()
    _, err1656 := mbTrans1655.WriteString(arg1654)
    if err1656 != nil {
      Usage()
      return
    }
    factory1657 := thrift.NewTJSONProtocolFactory()
    jsProt1658 := factory1657.GetProtocol(mbTrans1655)
    argvalue1 := interfaces.NewUint64()
    err1659 := argvalue1.Read(context.Background(), jsProt1658)
    if err1659 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1660 := flag.Arg(3)
    mbTrans1661 := thrift.NewTMemoryBufferLen(len(arg1660))
    defer mbTrans1661.Close()
    _, err1662 := mbTrans1661.WriteString(arg1660)
    if err1662 != nil {
      Usage()
      return
    }
    factory1663 := thrift.NewTJSONProtocolFactory()
    jsProt1664 := factory1663.GetProtocol(mbTrans1661)
    argvalue2 := interfaces.NewUint64()
    err1665 := argvalue2.Read(context.Background(), jsProt1664)
    if err1665 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1667 := flag.Arg(5)
    mbTrans1668 := thrift.NewTMemoryBufferLen(len(arg1667))
    defer mbTrans1668.Close()
    _, err1669 := mbTrans1668.WriteString(arg1667)
    if err1669 != nil {
      Usage()
      return
    }
    factory1670 := thrift.NewTJSONProtocolFactory()
    jsProt1671 := factory1670.GetProtocol(mbTrans1668)
    argvalue4 := interfaces.NewUint64()
    err1672 := argvalue4.Read(context.Background(), jsProt1671)
    if err1672 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1673 := flag.Arg(1)
    mbTrans1674 := thrift.NewTMemoryBufferLen(len(arg1673))
    defer mbTrans1674.Close()
    _, err1675 := mbTrans1674.WriteString(arg1673)
    if err1675 != nil {
      Usage()
      return
    }
    factory1676 := thrift.NewTJSONProtocolFactory()
    jsProt1677 := factory1676.GetProtocol(mbTrans1674)
    argvalue0 := interfaces.NewUint64()
    err1678 := argvalue0.Read(context.Background(), jsProt1677)
    if err1678 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1679 := flag.Arg(2)
    mbTrans1680 := thrift.NewTMemoryBufferLen(len(arg1679))
    defer mbTrans1680.Close()
    _, err1681 := mbTrans1680.WriteString(arg1679)
    if err1681 != nil {
      Usage()
      return
    }
    factory1682 := thrift.NewTJSONProtocolFactory()
    jsProt1683 := factory1682.GetProtocol(mbTrans1680)
    argvalue1 := interfaces.NewUint64()
    err1684 := argvalue1.Read(context.Background(), jsProt1683)
    if err1684 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1685 := flag.Arg(3)
    mbTrans1686 := thrift.NewTMemoryBufferLen(len(arg1685))
    defer mbTrans1686.Close()
    _, err1687 := mbTrans1686.WriteString(arg1685)
    if err1687 != nil {
      Usage()
      return
    }
    factory1688 := thrift.NewTJSONProtocolFactory()
    jsProt1689 := factory1688.GetProtocol(mbTrans1686)
    argvalue2 := interfaces.NewUint64()
    err1690 := argvalue2.Read(context.Background(), jsProt1689)
    if err1690 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_action_return_value":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetActionReturnValue requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetActionReturnValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_code_hash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetCodeHash requires 2 args")
      flag.Usage()
    }
    arg1692 := flag.Arg(1)
    mbTrans1693 := thrift.NewTMemoryBufferLen(len(arg1692))
    defer mbTrans1693.Close()
    _, err1694 := mbTrans1693.WriteString(arg1692)
    if err1694 != nil {
      Usage()
      return
    }
    factory1695 := thrift.NewTJSONProtocolFactory()
    jsProt1696 := factory1695.GetProtocol(mbTrans1693)
    argvalue0 := interfaces.NewUint64()
    err1697 := argvalue0.Read(context.Background(), jsProt1696)
    if err1697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1698 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1698 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetCodeHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "sha3":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sha3 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    tmp1, err1700 := (strconv.Atoi(flag.Arg(2)))
    if err1700 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Sha3(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blake2_f":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "Blake2F requires 6 args")
      flag.Usage()
    }
    argvalue0, err1701 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1701 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    tmp5, err1706 := (strconv.Atoi(flag.Arg(6)))
    if err1706 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.Blake2F(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "k1_recover":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "K1Recover requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.K1Recover(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_add":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Add requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Add(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_mul":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Mul requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Mul(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_pair":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AltBn128Pair requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.AltBn128Pair(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mod_exp":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ModExp requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.ModExp(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
