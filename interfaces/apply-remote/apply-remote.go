// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, Uint64 producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  i32 get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg524 := flag.Arg(1)
    mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
    defer mbTrans525.Close()
    _, err526 := mbTrans525.WriteString(arg524)
    if err526 != nil {
      Usage()
      return
    }
    factory527 := thrift.NewTJSONProtocolFactory()
    jsProt528 := factory527.GetProtocol(mbTrans525)
    argvalue0 := interfaces.NewUint64()
    err529 := argvalue0.Read(context.Background(), jsProt528)
    if err529 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg530 := flag.Arg(1)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue0 := interfaces.NewUint64()
    err535 := argvalue0.Read(context.Background(), jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err536 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err536 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err537 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err537 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err538 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err538 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg540 := flag.Arg(1)
    mbTrans541 := thrift.NewTMemoryBufferLen(len(arg540))
    defer mbTrans541.Close()
    _, err542 := mbTrans541.WriteString(arg540)
    if err542 != nil {
      Usage()
      return
    }
    factory543 := thrift.NewTJSONProtocolFactory()
    jsProt544 := factory543.GetProtocol(mbTrans541)
    argvalue0 := interfaces.NewUint64()
    err545 := argvalue0.Read(context.Background(), jsProt544)
    if err545 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg546 := flag.Arg(2)
    mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
    defer mbTrans547.Close()
    _, err548 := mbTrans547.WriteString(arg546)
    if err548 != nil {
      Usage()
      return
    }
    factory549 := thrift.NewTJSONProtocolFactory()
    jsProt550 := factory549.GetProtocol(mbTrans547)
    argvalue1 := interfaces.NewUint64()
    err551 := argvalue1.Read(context.Background(), jsProt550)
    if err551 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg552 := flag.Arg(1)
    mbTrans553 := thrift.NewTMemoryBufferLen(len(arg552))
    defer mbTrans553.Close()
    _, err554 := mbTrans553.WriteString(arg552)
    if err554 != nil {
      Usage()
      return
    }
    factory555 := thrift.NewTJSONProtocolFactory()
    jsProt556 := factory555.GetProtocol(mbTrans553)
    argvalue0 := interfaces.NewUint64()
    err557 := argvalue0.Read(context.Background(), jsProt556)
    if err557 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg558 := flag.Arg(1)
    mbTrans559 := thrift.NewTMemoryBufferLen(len(arg558))
    defer mbTrans559.Close()
    _, err560 := mbTrans559.WriteString(arg558)
    if err560 != nil {
      Usage()
      return
    }
    factory561 := thrift.NewTJSONProtocolFactory()
    jsProt562 := factory561.GetProtocol(mbTrans559)
    argvalue0 := interfaces.NewUint64()
    err563 := argvalue0.Read(context.Background(), jsProt562)
    if err563 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg570 := flag.Arg(1)
    mbTrans571 := thrift.NewTMemoryBufferLen(len(arg570))
    defer mbTrans571.Close()
    _, err572 := mbTrans571.WriteString(arg570)
    if err572 != nil {
      Usage()
      return
    }
    factory573 := thrift.NewTJSONProtocolFactory()
    jsProt574 := factory573.GetProtocol(mbTrans571)
    argvalue0 := interfaces.NewUint64()
    err575 := argvalue0.Read(context.Background(), jsProt574)
    if err575 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg576 := flag.Arg(2)
    mbTrans577 := thrift.NewTMemoryBufferLen(len(arg576))
    defer mbTrans577.Close()
    _, err578 := mbTrans577.WriteString(arg576)
    if err578 != nil {
      Usage()
      return
    }
    factory579 := thrift.NewTJSONProtocolFactory()
    jsProt580 := factory579.GetProtocol(mbTrans577)
    argvalue1 := interfaces.NewUint64()
    err581 := argvalue1.Read(context.Background(), jsProt580)
    if err581 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg584 := flag.Arg(5)
    mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
    defer mbTrans585.Close()
    _, err586 := mbTrans585.WriteString(arg584)
    if err586 != nil {
      Usage()
      return
    }
    factory587 := thrift.NewTJSONProtocolFactory()
    jsProt588 := factory587.GetProtocol(mbTrans585)
    argvalue4 := interfaces.NewUint64()
    err589 := argvalue4.Read(context.Background(), jsProt588)
    if err589 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg590 := flag.Arg(1)
    mbTrans591 := thrift.NewTMemoryBufferLen(len(arg590))
    defer mbTrans591.Close()
    _, err592 := mbTrans591.WriteString(arg590)
    if err592 != nil {
      Usage()
      return
    }
    factory593 := thrift.NewTJSONProtocolFactory()
    jsProt594 := factory593.GetProtocol(mbTrans591)
    argvalue0 := interfaces.NewUint64()
    err595 := argvalue0.Read(context.Background(), jsProt594)
    if err595 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg596 := flag.Arg(2)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue1 := interfaces.NewUint64()
    err601 := argvalue1.Read(context.Background(), jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg602 := flag.Arg(1)
    mbTrans603 := thrift.NewTMemoryBufferLen(len(arg602))
    defer mbTrans603.Close()
    _, err604 := mbTrans603.WriteString(arg602)
    if err604 != nil {
      Usage()
      return
    }
    factory605 := thrift.NewTJSONProtocolFactory()
    jsProt606 := factory605.GetProtocol(mbTrans603)
    argvalue0 := interfaces.NewUint64()
    err607 := argvalue0.Read(context.Background(), jsProt606)
    if err607 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err610 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg611 := flag.Arg(1)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue0 := interfaces.NewUint64()
    err616 := argvalue0.Read(context.Background(), jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := interfaces.NewUint64()
    err627 := argvalue0.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewTJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := interfaces.NewUint64()
    err634 := argvalue0.Read(context.Background(), jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg635 := flag.Arg(1)
    mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
    defer mbTrans636.Close()
    _, err637 := mbTrans636.WriteString(arg635)
    if err637 != nil {
      Usage()
      return
    }
    factory638 := thrift.NewTJSONProtocolFactory()
    jsProt639 := factory638.GetProtocol(mbTrans636)
    argvalue0 := interfaces.NewUint64()
    err640 := argvalue0.Read(context.Background(), jsProt639)
    if err640 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg641 := flag.Arg(1)
    mbTrans642 := thrift.NewTMemoryBufferLen(len(arg641))
    defer mbTrans642.Close()
    _, err643 := mbTrans642.WriteString(arg641)
    if err643 != nil {
      Usage()
      return
    }
    factory644 := thrift.NewTJSONProtocolFactory()
    jsProt645 := factory644.GetProtocol(mbTrans642)
    argvalue0 := interfaces.NewUint64()
    err646 := argvalue0.Read(context.Background(), jsProt645)
    if err646 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg647 := flag.Arg(1)
    mbTrans648 := thrift.NewTMemoryBufferLen(len(arg647))
    defer mbTrans648.Close()
    _, err649 := mbTrans648.WriteString(arg647)
    if err649 != nil {
      Usage()
      return
    }
    factory650 := thrift.NewTJSONProtocolFactory()
    jsProt651 := factory650.GetProtocol(mbTrans648)
    argvalue0 := interfaces.NewUint64()
    err652 := argvalue0.Read(context.Background(), jsProt651)
    if err652 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg653 := flag.Arg(2)
    mbTrans654 := thrift.NewTMemoryBufferLen(len(arg653))
    defer mbTrans654.Close()
    _, err655 := mbTrans654.WriteString(arg653)
    if err655 != nil {
      Usage()
      return
    }
    factory656 := thrift.NewTJSONProtocolFactory()
    jsProt657 := factory656.GetProtocol(mbTrans654)
    argvalue1 := interfaces.NewUint64()
    err658 := argvalue1.Read(context.Background(), jsProt657)
    if err658 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg659 := flag.Arg(1)
    mbTrans660 := thrift.NewTMemoryBufferLen(len(arg659))
    defer mbTrans660.Close()
    _, err661 := mbTrans660.WriteString(arg659)
    if err661 != nil {
      Usage()
      return
    }
    factory662 := thrift.NewTJSONProtocolFactory()
    jsProt663 := factory662.GetProtocol(mbTrans660)
    argvalue0 := interfaces.NewUint64()
    err664 := argvalue0.Read(context.Background(), jsProt663)
    if err664 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg672 := flag.Arg(2)
    mbTrans673 := thrift.NewTMemoryBufferLen(len(arg672))
    defer mbTrans673.Close()
    _, err674 := mbTrans673.WriteString(arg672)
    if err674 != nil {
      Usage()
      return
    }
    factory675 := thrift.NewTJSONProtocolFactory()
    jsProt676 := factory675.GetProtocol(mbTrans673)
    argvalue1 := interfaces.NewUint64()
    err677 := argvalue1.Read(context.Background(), jsProt676)
    if err677 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err678 := (strconv.Atoi(flag.Arg(1)))
    if err678 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg698 := flag.Arg(2)
    mbTrans699 := thrift.NewTMemoryBufferLen(len(arg698))
    defer mbTrans699.Close()
    _, err700 := mbTrans699.WriteString(arg698)
    if err700 != nil {
      Usage()
      return
    }
    factory701 := thrift.NewTJSONProtocolFactory()
    jsProt702 := factory701.GetProtocol(mbTrans699)
    argvalue1 := interfaces.NewUint64()
    err703 := argvalue1.Read(context.Background(), jsProt702)
    if err703 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err705 := (strconv.Atoi(flag.Arg(4)))
    if err705 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err707 := (strconv.Atoi(flag.Arg(1)))
    if err707 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err708 := (strconv.Atoi(flag.Arg(2)))
    if err708 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err709 := (strconv.Atoi(flag.Arg(1)))
    if err709 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg710 := flag.Arg(1)
    mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil {
      Usage()
      return
    }
    factory713 := thrift.NewTJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    argvalue0 := interfaces.NewUint64()
    err715 := argvalue0.Read(context.Background(), jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg716 := flag.Arg(2)
    mbTrans717 := thrift.NewTMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil {
      Usage()
      return
    }
    factory719 := thrift.NewTJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    argvalue1 := interfaces.NewUint64()
    err721 := argvalue1.Read(context.Background(), jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg722 := flag.Arg(3)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue2 := interfaces.NewUint64()
    err727 := argvalue2.Read(context.Background(), jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg728 := flag.Arg(4)
    mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewTJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue3 := interfaces.NewUint64()
    err733 := argvalue3.Read(context.Background(), jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err735 := (strconv.Atoi(flag.Arg(1)))
    if err735 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg736 := flag.Arg(2)
    mbTrans737 := thrift.NewTMemoryBufferLen(len(arg736))
    defer mbTrans737.Close()
    _, err738 := mbTrans737.WriteString(arg736)
    if err738 != nil {
      Usage()
      return
    }
    factory739 := thrift.NewTJSONProtocolFactory()
    jsProt740 := factory739.GetProtocol(mbTrans737)
    argvalue1 := interfaces.NewUint64()
    err741 := argvalue1.Read(context.Background(), jsProt740)
    if err741 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err743 := (strconv.Atoi(flag.Arg(1)))
    if err743 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err744 := (strconv.Atoi(flag.Arg(1)))
    if err744 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err745 := (strconv.Atoi(flag.Arg(1)))
    if err745 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err746 := (strconv.Atoi(flag.Arg(1)))
    if err746 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg747 := flag.Arg(1)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue0 := interfaces.NewUint64()
    err752 := argvalue0.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg753 := flag.Arg(2)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil {
      Usage()
      return
    }
    factory756 := thrift.NewTJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    argvalue1 := interfaces.NewUint64()
    err758 := argvalue1.Read(context.Background(), jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg759 := flag.Arg(3)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil {
      Usage()
      return
    }
    factory762 := thrift.NewTJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    argvalue2 := interfaces.NewUint64()
    err764 := argvalue2.Read(context.Background(), jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg765 := flag.Arg(4)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil {
      Usage()
      return
    }
    factory768 := thrift.NewTJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    argvalue3 := interfaces.NewUint64()
    err770 := argvalue3.Read(context.Background(), jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg771 := flag.Arg(1)
    mbTrans772 := thrift.NewTMemoryBufferLen(len(arg771))
    defer mbTrans772.Close()
    _, err773 := mbTrans772.WriteString(arg771)
    if err773 != nil {
      Usage()
      return
    }
    factory774 := thrift.NewTJSONProtocolFactory()
    jsProt775 := factory774.GetProtocol(mbTrans772)
    argvalue0 := interfaces.NewUint64()
    err776 := argvalue0.Read(context.Background(), jsProt775)
    if err776 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg777 := flag.Arg(2)
    mbTrans778 := thrift.NewTMemoryBufferLen(len(arg777))
    defer mbTrans778.Close()
    _, err779 := mbTrans778.WriteString(arg777)
    if err779 != nil {
      Usage()
      return
    }
    factory780 := thrift.NewTJSONProtocolFactory()
    jsProt781 := factory780.GetProtocol(mbTrans778)
    argvalue1 := interfaces.NewUint64()
    err782 := argvalue1.Read(context.Background(), jsProt781)
    if err782 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg783 := flag.Arg(3)
    mbTrans784 := thrift.NewTMemoryBufferLen(len(arg783))
    defer mbTrans784.Close()
    _, err785 := mbTrans784.WriteString(arg783)
    if err785 != nil {
      Usage()
      return
    }
    factory786 := thrift.NewTJSONProtocolFactory()
    jsProt787 := factory786.GetProtocol(mbTrans784)
    argvalue2 := interfaces.NewUint64()
    err788 := argvalue2.Read(context.Background(), jsProt787)
    if err788 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg789 := flag.Arg(4)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil {
      Usage()
      return
    }
    factory792 := thrift.NewTJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    argvalue3 := interfaces.NewUint64()
    err794 := argvalue3.Read(context.Background(), jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg795 := flag.Arg(1)
    mbTrans796 := thrift.NewTMemoryBufferLen(len(arg795))
    defer mbTrans796.Close()
    _, err797 := mbTrans796.WriteString(arg795)
    if err797 != nil {
      Usage()
      return
    }
    factory798 := thrift.NewTJSONProtocolFactory()
    jsProt799 := factory798.GetProtocol(mbTrans796)
    argvalue0 := interfaces.NewUint64()
    err800 := argvalue0.Read(context.Background(), jsProt799)
    if err800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg801 := flag.Arg(2)
    mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
    defer mbTrans802.Close()
    _, err803 := mbTrans802.WriteString(arg801)
    if err803 != nil {
      Usage()
      return
    }
    factory804 := thrift.NewTJSONProtocolFactory()
    jsProt805 := factory804.GetProtocol(mbTrans802)
    argvalue1 := interfaces.NewUint64()
    err806 := argvalue1.Read(context.Background(), jsProt805)
    if err806 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg807 := flag.Arg(3)
    mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
    defer mbTrans808.Close()
    _, err809 := mbTrans808.WriteString(arg807)
    if err809 != nil {
      Usage()
      return
    }
    factory810 := thrift.NewTJSONProtocolFactory()
    jsProt811 := factory810.GetProtocol(mbTrans808)
    argvalue2 := interfaces.NewUint64()
    err812 := argvalue2.Read(context.Background(), jsProt811)
    if err812 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg813 := flag.Arg(4)
    mbTrans814 := thrift.NewTMemoryBufferLen(len(arg813))
    defer mbTrans814.Close()
    _, err815 := mbTrans814.WriteString(arg813)
    if err815 != nil {
      Usage()
      return
    }
    factory816 := thrift.NewTJSONProtocolFactory()
    jsProt817 := factory816.GetProtocol(mbTrans814)
    argvalue3 := interfaces.NewUint64()
    err818 := argvalue3.Read(context.Background(), jsProt817)
    if err818 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg819 := flag.Arg(1)
    mbTrans820 := thrift.NewTMemoryBufferLen(len(arg819))
    defer mbTrans820.Close()
    _, err821 := mbTrans820.WriteString(arg819)
    if err821 != nil {
      Usage()
      return
    }
    factory822 := thrift.NewTJSONProtocolFactory()
    jsProt823 := factory822.GetProtocol(mbTrans820)
    argvalue0 := interfaces.NewUint64()
    err824 := argvalue0.Read(context.Background(), jsProt823)
    if err824 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg825 := flag.Arg(2)
    mbTrans826 := thrift.NewTMemoryBufferLen(len(arg825))
    defer mbTrans826.Close()
    _, err827 := mbTrans826.WriteString(arg825)
    if err827 != nil {
      Usage()
      return
    }
    factory828 := thrift.NewTJSONProtocolFactory()
    jsProt829 := factory828.GetProtocol(mbTrans826)
    argvalue1 := interfaces.NewUint64()
    err830 := argvalue1.Read(context.Background(), jsProt829)
    if err830 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg831 := flag.Arg(3)
    mbTrans832 := thrift.NewTMemoryBufferLen(len(arg831))
    defer mbTrans832.Close()
    _, err833 := mbTrans832.WriteString(arg831)
    if err833 != nil {
      Usage()
      return
    }
    factory834 := thrift.NewTJSONProtocolFactory()
    jsProt835 := factory834.GetProtocol(mbTrans832)
    argvalue2 := interfaces.NewUint64()
    err836 := argvalue2.Read(context.Background(), jsProt835)
    if err836 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg837 := flag.Arg(1)
    mbTrans838 := thrift.NewTMemoryBufferLen(len(arg837))
    defer mbTrans838.Close()
    _, err839 := mbTrans838.WriteString(arg837)
    if err839 != nil {
      Usage()
      return
    }
    factory840 := thrift.NewTJSONProtocolFactory()
    jsProt841 := factory840.GetProtocol(mbTrans838)
    argvalue0 := interfaces.NewUint64()
    err842 := argvalue0.Read(context.Background(), jsProt841)
    if err842 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg843 := flag.Arg(2)
    mbTrans844 := thrift.NewTMemoryBufferLen(len(arg843))
    defer mbTrans844.Close()
    _, err845 := mbTrans844.WriteString(arg843)
    if err845 != nil {
      Usage()
      return
    }
    factory846 := thrift.NewTJSONProtocolFactory()
    jsProt847 := factory846.GetProtocol(mbTrans844)
    argvalue1 := interfaces.NewUint64()
    err848 := argvalue1.Read(context.Background(), jsProt847)
    if err848 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg849 := flag.Arg(3)
    mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
    defer mbTrans850.Close()
    _, err851 := mbTrans850.WriteString(arg849)
    if err851 != nil {
      Usage()
      return
    }
    factory852 := thrift.NewTJSONProtocolFactory()
    jsProt853 := factory852.GetProtocol(mbTrans850)
    argvalue2 := interfaces.NewUint64()
    err854 := argvalue2.Read(context.Background(), jsProt853)
    if err854 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg855 := flag.Arg(4)
    mbTrans856 := thrift.NewTMemoryBufferLen(len(arg855))
    defer mbTrans856.Close()
    _, err857 := mbTrans856.WriteString(arg855)
    if err857 != nil {
      Usage()
      return
    }
    factory858 := thrift.NewTJSONProtocolFactory()
    jsProt859 := factory858.GetProtocol(mbTrans856)
    argvalue3 := interfaces.NewUint64()
    err860 := argvalue3.Read(context.Background(), jsProt859)
    if err860 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg861 := flag.Arg(5)
    mbTrans862 := thrift.NewTMemoryBufferLen(len(arg861))
    defer mbTrans862.Close()
    _, err863 := mbTrans862.WriteString(arg861)
    if err863 != nil {
      Usage()
      return
    }
    factory864 := thrift.NewTJSONProtocolFactory()
    jsProt865 := factory864.GetProtocol(mbTrans862)
    argvalue4 := interfaces.NewUint64()
    err866 := argvalue4.Read(context.Background(), jsProt865)
    if err866 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err867 := (strconv.Atoi(flag.Arg(1)))
    if err867 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg868 := flag.Arg(2)
    mbTrans869 := thrift.NewTMemoryBufferLen(len(arg868))
    defer mbTrans869.Close()
    _, err870 := mbTrans869.WriteString(arg868)
    if err870 != nil {
      Usage()
      return
    }
    factory871 := thrift.NewTJSONProtocolFactory()
    jsProt872 := factory871.GetProtocol(mbTrans869)
    argvalue1 := interfaces.NewUint64()
    err873 := argvalue1.Read(context.Background(), jsProt872)
    if err873 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg874 := flag.Arg(3)
    mbTrans875 := thrift.NewTMemoryBufferLen(len(arg874))
    defer mbTrans875.Close()
    _, err876 := mbTrans875.WriteString(arg874)
    if err876 != nil {
      Usage()
      return
    }
    factory877 := thrift.NewTJSONProtocolFactory()
    jsProt878 := factory877.GetProtocol(mbTrans875)
    argvalue2 := interfaces.NewUint64()
    err879 := argvalue2.Read(context.Background(), jsProt878)
    if err879 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err880 := (strconv.Atoi(flag.Arg(1)))
    if err880 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err881 := (strconv.Atoi(flag.Arg(1)))
    if err881 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err882 := (strconv.Atoi(flag.Arg(1)))
    if err882 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg883 := flag.Arg(1)
    mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
    defer mbTrans884.Close()
    _, err885 := mbTrans884.WriteString(arg883)
    if err885 != nil {
      Usage()
      return
    }
    factory886 := thrift.NewTJSONProtocolFactory()
    jsProt887 := factory886.GetProtocol(mbTrans884)
    argvalue0 := interfaces.NewUint64()
    err888 := argvalue0.Read(context.Background(), jsProt887)
    if err888 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg889 := flag.Arg(2)
    mbTrans890 := thrift.NewTMemoryBufferLen(len(arg889))
    defer mbTrans890.Close()
    _, err891 := mbTrans890.WriteString(arg889)
    if err891 != nil {
      Usage()
      return
    }
    factory892 := thrift.NewTJSONProtocolFactory()
    jsProt893 := factory892.GetProtocol(mbTrans890)
    argvalue1 := interfaces.NewUint64()
    err894 := argvalue1.Read(context.Background(), jsProt893)
    if err894 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg895 := flag.Arg(3)
    mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
    defer mbTrans896.Close()
    _, err897 := mbTrans896.WriteString(arg895)
    if err897 != nil {
      Usage()
      return
    }
    factory898 := thrift.NewTJSONProtocolFactory()
    jsProt899 := factory898.GetProtocol(mbTrans896)
    argvalue2 := interfaces.NewUint64()
    err900 := argvalue2.Read(context.Background(), jsProt899)
    if err900 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg901 := flag.Arg(4)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue3 := interfaces.NewUint64()
    err906 := argvalue3.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg907 := flag.Arg(1)
    mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
    defer mbTrans908.Close()
    _, err909 := mbTrans908.WriteString(arg907)
    if err909 != nil {
      Usage()
      return
    }
    factory910 := thrift.NewTJSONProtocolFactory()
    jsProt911 := factory910.GetProtocol(mbTrans908)
    argvalue0 := interfaces.NewUint64()
    err912 := argvalue0.Read(context.Background(), jsProt911)
    if err912 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg913 := flag.Arg(2)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil {
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    argvalue1 := interfaces.NewUint64()
    err918 := argvalue1.Read(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg919 := flag.Arg(3)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue2 := interfaces.NewUint64()
    err924 := argvalue2.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg925 := flag.Arg(4)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue3 := interfaces.NewUint64()
    err930 := argvalue3.Read(context.Background(), jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg931 := flag.Arg(1)
    mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
    defer mbTrans932.Close()
    _, err933 := mbTrans932.WriteString(arg931)
    if err933 != nil {
      Usage()
      return
    }
    factory934 := thrift.NewTJSONProtocolFactory()
    jsProt935 := factory934.GetProtocol(mbTrans932)
    argvalue0 := interfaces.NewUint64()
    err936 := argvalue0.Read(context.Background(), jsProt935)
    if err936 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg937 := flag.Arg(2)
    mbTrans938 := thrift.NewTMemoryBufferLen(len(arg937))
    defer mbTrans938.Close()
    _, err939 := mbTrans938.WriteString(arg937)
    if err939 != nil {
      Usage()
      return
    }
    factory940 := thrift.NewTJSONProtocolFactory()
    jsProt941 := factory940.GetProtocol(mbTrans938)
    argvalue1 := interfaces.NewUint64()
    err942 := argvalue1.Read(context.Background(), jsProt941)
    if err942 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg943 := flag.Arg(3)
    mbTrans944 := thrift.NewTMemoryBufferLen(len(arg943))
    defer mbTrans944.Close()
    _, err945 := mbTrans944.WriteString(arg943)
    if err945 != nil {
      Usage()
      return
    }
    factory946 := thrift.NewTJSONProtocolFactory()
    jsProt947 := factory946.GetProtocol(mbTrans944)
    argvalue2 := interfaces.NewUint64()
    err948 := argvalue2.Read(context.Background(), jsProt947)
    if err948 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg949 := flag.Arg(4)
    mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
    defer mbTrans950.Close()
    _, err951 := mbTrans950.WriteString(arg949)
    if err951 != nil {
      Usage()
      return
    }
    factory952 := thrift.NewTJSONProtocolFactory()
    jsProt953 := factory952.GetProtocol(mbTrans950)
    argvalue3 := interfaces.NewUint64()
    err954 := argvalue3.Read(context.Background(), jsProt953)
    if err954 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg955 := flag.Arg(5)
    mbTrans956 := thrift.NewTMemoryBufferLen(len(arg955))
    defer mbTrans956.Close()
    _, err957 := mbTrans956.WriteString(arg955)
    if err957 != nil {
      Usage()
      return
    }
    factory958 := thrift.NewTJSONProtocolFactory()
    jsProt959 := factory958.GetProtocol(mbTrans956)
    argvalue4 := interfaces.NewUint64()
    err960 := argvalue4.Read(context.Background(), jsProt959)
    if err960 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg961 := flag.Arg(1)
    mbTrans962 := thrift.NewTMemoryBufferLen(len(arg961))
    defer mbTrans962.Close()
    _, err963 := mbTrans962.WriteString(arg961)
    if err963 != nil {
      Usage()
      return
    }
    factory964 := thrift.NewTJSONProtocolFactory()
    jsProt965 := factory964.GetProtocol(mbTrans962)
    argvalue0 := interfaces.NewUint64()
    err966 := argvalue0.Read(context.Background(), jsProt965)
    if err966 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg967 := flag.Arg(2)
    mbTrans968 := thrift.NewTMemoryBufferLen(len(arg967))
    defer mbTrans968.Close()
    _, err969 := mbTrans968.WriteString(arg967)
    if err969 != nil {
      Usage()
      return
    }
    factory970 := thrift.NewTJSONProtocolFactory()
    jsProt971 := factory970.GetProtocol(mbTrans968)
    argvalue1 := interfaces.NewUint64()
    err972 := argvalue1.Read(context.Background(), jsProt971)
    if err972 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg973 := flag.Arg(3)
    mbTrans974 := thrift.NewTMemoryBufferLen(len(arg973))
    defer mbTrans974.Close()
    _, err975 := mbTrans974.WriteString(arg973)
    if err975 != nil {
      Usage()
      return
    }
    factory976 := thrift.NewTJSONProtocolFactory()
    jsProt977 := factory976.GetProtocol(mbTrans974)
    argvalue2 := interfaces.NewUint64()
    err978 := argvalue2.Read(context.Background(), jsProt977)
    if err978 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg979 := flag.Arg(4)
    mbTrans980 := thrift.NewTMemoryBufferLen(len(arg979))
    defer mbTrans980.Close()
    _, err981 := mbTrans980.WriteString(arg979)
    if err981 != nil {
      Usage()
      return
    }
    factory982 := thrift.NewTJSONProtocolFactory()
    jsProt983 := factory982.GetProtocol(mbTrans980)
    argvalue3 := interfaces.NewUint64()
    err984 := argvalue3.Read(context.Background(), jsProt983)
    if err984 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg985 := flag.Arg(5)
    mbTrans986 := thrift.NewTMemoryBufferLen(len(arg985))
    defer mbTrans986.Close()
    _, err987 := mbTrans986.WriteString(arg985)
    if err987 != nil {
      Usage()
      return
    }
    factory988 := thrift.NewTJSONProtocolFactory()
    jsProt989 := factory988.GetProtocol(mbTrans986)
    argvalue4 := interfaces.NewUint64()
    err990 := argvalue4.Read(context.Background(), jsProt989)
    if err990 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg991 := flag.Arg(1)
    mbTrans992 := thrift.NewTMemoryBufferLen(len(arg991))
    defer mbTrans992.Close()
    _, err993 := mbTrans992.WriteString(arg991)
    if err993 != nil {
      Usage()
      return
    }
    factory994 := thrift.NewTJSONProtocolFactory()
    jsProt995 := factory994.GetProtocol(mbTrans992)
    argvalue0 := interfaces.NewUint64()
    err996 := argvalue0.Read(context.Background(), jsProt995)
    if err996 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg997 := flag.Arg(2)
    mbTrans998 := thrift.NewTMemoryBufferLen(len(arg997))
    defer mbTrans998.Close()
    _, err999 := mbTrans998.WriteString(arg997)
    if err999 != nil {
      Usage()
      return
    }
    factory1000 := thrift.NewTJSONProtocolFactory()
    jsProt1001 := factory1000.GetProtocol(mbTrans998)
    argvalue1 := interfaces.NewUint64()
    err1002 := argvalue1.Read(context.Background(), jsProt1001)
    if err1002 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1003 := flag.Arg(3)
    mbTrans1004 := thrift.NewTMemoryBufferLen(len(arg1003))
    defer mbTrans1004.Close()
    _, err1005 := mbTrans1004.WriteString(arg1003)
    if err1005 != nil {
      Usage()
      return
    }
    factory1006 := thrift.NewTJSONProtocolFactory()
    jsProt1007 := factory1006.GetProtocol(mbTrans1004)
    argvalue2 := interfaces.NewUint64()
    err1008 := argvalue2.Read(context.Background(), jsProt1007)
    if err1008 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1009 := flag.Arg(1)
    mbTrans1010 := thrift.NewTMemoryBufferLen(len(arg1009))
    defer mbTrans1010.Close()
    _, err1011 := mbTrans1010.WriteString(arg1009)
    if err1011 != nil {
      Usage()
      return
    }
    factory1012 := thrift.NewTJSONProtocolFactory()
    jsProt1013 := factory1012.GetProtocol(mbTrans1010)
    argvalue0 := interfaces.NewUint64()
    err1014 := argvalue0.Read(context.Background(), jsProt1013)
    if err1014 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1015 := flag.Arg(2)
    mbTrans1016 := thrift.NewTMemoryBufferLen(len(arg1015))
    defer mbTrans1016.Close()
    _, err1017 := mbTrans1016.WriteString(arg1015)
    if err1017 != nil {
      Usage()
      return
    }
    factory1018 := thrift.NewTJSONProtocolFactory()
    jsProt1019 := factory1018.GetProtocol(mbTrans1016)
    argvalue1 := interfaces.NewUint64()
    err1020 := argvalue1.Read(context.Background(), jsProt1019)
    if err1020 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1021 := flag.Arg(3)
    mbTrans1022 := thrift.NewTMemoryBufferLen(len(arg1021))
    defer mbTrans1022.Close()
    _, err1023 := mbTrans1022.WriteString(arg1021)
    if err1023 != nil {
      Usage()
      return
    }
    factory1024 := thrift.NewTJSONProtocolFactory()
    jsProt1025 := factory1024.GetProtocol(mbTrans1022)
    argvalue2 := interfaces.NewUint64()
    err1026 := argvalue2.Read(context.Background(), jsProt1025)
    if err1026 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1027 := flag.Arg(4)
    mbTrans1028 := thrift.NewTMemoryBufferLen(len(arg1027))
    defer mbTrans1028.Close()
    _, err1029 := mbTrans1028.WriteString(arg1027)
    if err1029 != nil {
      Usage()
      return
    }
    factory1030 := thrift.NewTJSONProtocolFactory()
    jsProt1031 := factory1030.GetProtocol(mbTrans1028)
    argvalue3 := interfaces.NewUint64()
    err1032 := argvalue3.Read(context.Background(), jsProt1031)
    if err1032 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1034 := (strconv.Atoi(flag.Arg(1)))
    if err1034 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1035 := flag.Arg(2)
    mbTrans1036 := thrift.NewTMemoryBufferLen(len(arg1035))
    defer mbTrans1036.Close()
    _, err1037 := mbTrans1036.WriteString(arg1035)
    if err1037 != nil {
      Usage()
      return
    }
    factory1038 := thrift.NewTJSONProtocolFactory()
    jsProt1039 := factory1038.GetProtocol(mbTrans1036)
    argvalue1 := interfaces.NewUint64()
    err1040 := argvalue1.Read(context.Background(), jsProt1039)
    if err1040 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1042 := (strconv.Atoi(flag.Arg(1)))
    if err1042 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1043 := (strconv.Atoi(flag.Arg(1)))
    if err1043 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1044 := (strconv.Atoi(flag.Arg(1)))
    if err1044 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1045 := flag.Arg(1)
    mbTrans1046 := thrift.NewTMemoryBufferLen(len(arg1045))
    defer mbTrans1046.Close()
    _, err1047 := mbTrans1046.WriteString(arg1045)
    if err1047 != nil {
      Usage()
      return
    }
    factory1048 := thrift.NewTJSONProtocolFactory()
    jsProt1049 := factory1048.GetProtocol(mbTrans1046)
    argvalue0 := interfaces.NewUint64()
    err1050 := argvalue0.Read(context.Background(), jsProt1049)
    if err1050 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1051 := flag.Arg(2)
    mbTrans1052 := thrift.NewTMemoryBufferLen(len(arg1051))
    defer mbTrans1052.Close()
    _, err1053 := mbTrans1052.WriteString(arg1051)
    if err1053 != nil {
      Usage()
      return
    }
    factory1054 := thrift.NewTJSONProtocolFactory()
    jsProt1055 := factory1054.GetProtocol(mbTrans1052)
    argvalue1 := interfaces.NewUint64()
    err1056 := argvalue1.Read(context.Background(), jsProt1055)
    if err1056 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1057 := flag.Arg(3)
    mbTrans1058 := thrift.NewTMemoryBufferLen(len(arg1057))
    defer mbTrans1058.Close()
    _, err1059 := mbTrans1058.WriteString(arg1057)
    if err1059 != nil {
      Usage()
      return
    }
    factory1060 := thrift.NewTJSONProtocolFactory()
    jsProt1061 := factory1060.GetProtocol(mbTrans1058)
    argvalue2 := interfaces.NewUint64()
    err1062 := argvalue2.Read(context.Background(), jsProt1061)
    if err1062 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1063 := flag.Arg(4)
    mbTrans1064 := thrift.NewTMemoryBufferLen(len(arg1063))
    defer mbTrans1064.Close()
    _, err1065 := mbTrans1064.WriteString(arg1063)
    if err1065 != nil {
      Usage()
      return
    }
    factory1066 := thrift.NewTJSONProtocolFactory()
    jsProt1067 := factory1066.GetProtocol(mbTrans1064)
    argvalue3 := interfaces.NewUint64()
    err1068 := argvalue3.Read(context.Background(), jsProt1067)
    if err1068 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1069 := flag.Arg(1)
    mbTrans1070 := thrift.NewTMemoryBufferLen(len(arg1069))
    defer mbTrans1070.Close()
    _, err1071 := mbTrans1070.WriteString(arg1069)
    if err1071 != nil {
      Usage()
      return
    }
    factory1072 := thrift.NewTJSONProtocolFactory()
    jsProt1073 := factory1072.GetProtocol(mbTrans1070)
    argvalue0 := interfaces.NewUint64()
    err1074 := argvalue0.Read(context.Background(), jsProt1073)
    if err1074 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1075 := flag.Arg(2)
    mbTrans1076 := thrift.NewTMemoryBufferLen(len(arg1075))
    defer mbTrans1076.Close()
    _, err1077 := mbTrans1076.WriteString(arg1075)
    if err1077 != nil {
      Usage()
      return
    }
    factory1078 := thrift.NewTJSONProtocolFactory()
    jsProt1079 := factory1078.GetProtocol(mbTrans1076)
    argvalue1 := interfaces.NewUint64()
    err1080 := argvalue1.Read(context.Background(), jsProt1079)
    if err1080 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1081 := flag.Arg(3)
    mbTrans1082 := thrift.NewTMemoryBufferLen(len(arg1081))
    defer mbTrans1082.Close()
    _, err1083 := mbTrans1082.WriteString(arg1081)
    if err1083 != nil {
      Usage()
      return
    }
    factory1084 := thrift.NewTJSONProtocolFactory()
    jsProt1085 := factory1084.GetProtocol(mbTrans1082)
    argvalue2 := interfaces.NewUint64()
    err1086 := argvalue2.Read(context.Background(), jsProt1085)
    if err1086 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1088 := flag.Arg(1)
    mbTrans1089 := thrift.NewTMemoryBufferLen(len(arg1088))
    defer mbTrans1089.Close()
    _, err1090 := mbTrans1089.WriteString(arg1088)
    if err1090 != nil {
      Usage()
      return
    }
    factory1091 := thrift.NewTJSONProtocolFactory()
    jsProt1092 := factory1091.GetProtocol(mbTrans1089)
    argvalue0 := interfaces.NewUint64()
    err1093 := argvalue0.Read(context.Background(), jsProt1092)
    if err1093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1094 := flag.Arg(2)
    mbTrans1095 := thrift.NewTMemoryBufferLen(len(arg1094))
    defer mbTrans1095.Close()
    _, err1096 := mbTrans1095.WriteString(arg1094)
    if err1096 != nil {
      Usage()
      return
    }
    factory1097 := thrift.NewTJSONProtocolFactory()
    jsProt1098 := factory1097.GetProtocol(mbTrans1095)
    argvalue1 := interfaces.NewUint64()
    err1099 := argvalue1.Read(context.Background(), jsProt1098)
    if err1099 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1100 := flag.Arg(3)
    mbTrans1101 := thrift.NewTMemoryBufferLen(len(arg1100))
    defer mbTrans1101.Close()
    _, err1102 := mbTrans1101.WriteString(arg1100)
    if err1102 != nil {
      Usage()
      return
    }
    factory1103 := thrift.NewTJSONProtocolFactory()
    jsProt1104 := factory1103.GetProtocol(mbTrans1101)
    argvalue2 := interfaces.NewUint64()
    err1105 := argvalue2.Read(context.Background(), jsProt1104)
    if err1105 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1107 := flag.Arg(5)
    mbTrans1108 := thrift.NewTMemoryBufferLen(len(arg1107))
    defer mbTrans1108.Close()
    _, err1109 := mbTrans1108.WriteString(arg1107)
    if err1109 != nil {
      Usage()
      return
    }
    factory1110 := thrift.NewTJSONProtocolFactory()
    jsProt1111 := factory1110.GetProtocol(mbTrans1108)
    argvalue4 := interfaces.NewUint64()
    err1112 := argvalue4.Read(context.Background(), jsProt1111)
    if err1112 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1113 := flag.Arg(1)
    mbTrans1114 := thrift.NewTMemoryBufferLen(len(arg1113))
    defer mbTrans1114.Close()
    _, err1115 := mbTrans1114.WriteString(arg1113)
    if err1115 != nil {
      Usage()
      return
    }
    factory1116 := thrift.NewTJSONProtocolFactory()
    jsProt1117 := factory1116.GetProtocol(mbTrans1114)
    argvalue0 := interfaces.NewUint64()
    err1118 := argvalue0.Read(context.Background(), jsProt1117)
    if err1118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1119 := flag.Arg(2)
    mbTrans1120 := thrift.NewTMemoryBufferLen(len(arg1119))
    defer mbTrans1120.Close()
    _, err1121 := mbTrans1120.WriteString(arg1119)
    if err1121 != nil {
      Usage()
      return
    }
    factory1122 := thrift.NewTJSONProtocolFactory()
    jsProt1123 := factory1122.GetProtocol(mbTrans1120)
    argvalue1 := interfaces.NewUint64()
    err1124 := argvalue1.Read(context.Background(), jsProt1123)
    if err1124 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1125 := flag.Arg(3)
    mbTrans1126 := thrift.NewTMemoryBufferLen(len(arg1125))
    defer mbTrans1126.Close()
    _, err1127 := mbTrans1126.WriteString(arg1125)
    if err1127 != nil {
      Usage()
      return
    }
    factory1128 := thrift.NewTJSONProtocolFactory()
    jsProt1129 := factory1128.GetProtocol(mbTrans1126)
    argvalue2 := interfaces.NewUint64()
    err1130 := argvalue2.Read(context.Background(), jsProt1129)
    if err1130 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1132 := flag.Arg(5)
    mbTrans1133 := thrift.NewTMemoryBufferLen(len(arg1132))
    defer mbTrans1133.Close()
    _, err1134 := mbTrans1133.WriteString(arg1132)
    if err1134 != nil {
      Usage()
      return
    }
    factory1135 := thrift.NewTJSONProtocolFactory()
    jsProt1136 := factory1135.GetProtocol(mbTrans1133)
    argvalue4 := interfaces.NewUint64()
    err1137 := argvalue4.Read(context.Background(), jsProt1136)
    if err1137 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1138 := flag.Arg(1)
    mbTrans1139 := thrift.NewTMemoryBufferLen(len(arg1138))
    defer mbTrans1139.Close()
    _, err1140 := mbTrans1139.WriteString(arg1138)
    if err1140 != nil {
      Usage()
      return
    }
    factory1141 := thrift.NewTJSONProtocolFactory()
    jsProt1142 := factory1141.GetProtocol(mbTrans1139)
    argvalue0 := interfaces.NewUint64()
    err1143 := argvalue0.Read(context.Background(), jsProt1142)
    if err1143 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1144 := flag.Arg(2)
    mbTrans1145 := thrift.NewTMemoryBufferLen(len(arg1144))
    defer mbTrans1145.Close()
    _, err1146 := mbTrans1145.WriteString(arg1144)
    if err1146 != nil {
      Usage()
      return
    }
    factory1147 := thrift.NewTJSONProtocolFactory()
    jsProt1148 := factory1147.GetProtocol(mbTrans1145)
    argvalue1 := interfaces.NewUint64()
    err1149 := argvalue1.Read(context.Background(), jsProt1148)
    if err1149 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1150 := flag.Arg(3)
    mbTrans1151 := thrift.NewTMemoryBufferLen(len(arg1150))
    defer mbTrans1151.Close()
    _, err1152 := mbTrans1151.WriteString(arg1150)
    if err1152 != nil {
      Usage()
      return
    }
    factory1153 := thrift.NewTJSONProtocolFactory()
    jsProt1154 := factory1153.GetProtocol(mbTrans1151)
    argvalue2 := interfaces.NewUint64()
    err1155 := argvalue2.Read(context.Background(), jsProt1154)
    if err1155 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1156 := flag.Arg(1)
    mbTrans1157 := thrift.NewTMemoryBufferLen(len(arg1156))
    defer mbTrans1157.Close()
    _, err1158 := mbTrans1157.WriteString(arg1156)
    if err1158 != nil {
      Usage()
      return
    }
    factory1159 := thrift.NewTJSONProtocolFactory()
    jsProt1160 := factory1159.GetProtocol(mbTrans1157)
    argvalue0 := interfaces.NewUint64()
    err1161 := argvalue0.Read(context.Background(), jsProt1160)
    if err1161 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1162 := flag.Arg(2)
    mbTrans1163 := thrift.NewTMemoryBufferLen(len(arg1162))
    defer mbTrans1163.Close()
    _, err1164 := mbTrans1163.WriteString(arg1162)
    if err1164 != nil {
      Usage()
      return
    }
    factory1165 := thrift.NewTJSONProtocolFactory()
    jsProt1166 := factory1165.GetProtocol(mbTrans1163)
    argvalue1 := interfaces.NewUint64()
    err1167 := argvalue1.Read(context.Background(), jsProt1166)
    if err1167 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1168 := flag.Arg(3)
    mbTrans1169 := thrift.NewTMemoryBufferLen(len(arg1168))
    defer mbTrans1169.Close()
    _, err1170 := mbTrans1169.WriteString(arg1168)
    if err1170 != nil {
      Usage()
      return
    }
    factory1171 := thrift.NewTJSONProtocolFactory()
    jsProt1172 := factory1171.GetProtocol(mbTrans1169)
    argvalue2 := interfaces.NewUint64()
    err1173 := argvalue2.Read(context.Background(), jsProt1172)
    if err1173 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1174 := flag.Arg(4)
    mbTrans1175 := thrift.NewTMemoryBufferLen(len(arg1174))
    defer mbTrans1175.Close()
    _, err1176 := mbTrans1175.WriteString(arg1174)
    if err1176 != nil {
      Usage()
      return
    }
    factory1177 := thrift.NewTJSONProtocolFactory()
    jsProt1178 := factory1177.GetProtocol(mbTrans1175)
    argvalue3 := interfaces.NewUint64()
    err1179 := argvalue3.Read(context.Background(), jsProt1178)
    if err1179 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1181 := (strconv.Atoi(flag.Arg(1)))
    if err1181 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1182 := flag.Arg(2)
    mbTrans1183 := thrift.NewTMemoryBufferLen(len(arg1182))
    defer mbTrans1183.Close()
    _, err1184 := mbTrans1183.WriteString(arg1182)
    if err1184 != nil {
      Usage()
      return
    }
    factory1185 := thrift.NewTJSONProtocolFactory()
    jsProt1186 := factory1185.GetProtocol(mbTrans1183)
    argvalue1 := interfaces.NewUint64()
    err1187 := argvalue1.Read(context.Background(), jsProt1186)
    if err1187 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1189 := (strconv.Atoi(flag.Arg(1)))
    if err1189 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1190 := (strconv.Atoi(flag.Arg(1)))
    if err1190 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1191 := (strconv.Atoi(flag.Arg(1)))
    if err1191 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1192 := flag.Arg(1)
    mbTrans1193 := thrift.NewTMemoryBufferLen(len(arg1192))
    defer mbTrans1193.Close()
    _, err1194 := mbTrans1193.WriteString(arg1192)
    if err1194 != nil {
      Usage()
      return
    }
    factory1195 := thrift.NewTJSONProtocolFactory()
    jsProt1196 := factory1195.GetProtocol(mbTrans1193)
    argvalue0 := interfaces.NewUint64()
    err1197 := argvalue0.Read(context.Background(), jsProt1196)
    if err1197 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1198 := flag.Arg(2)
    mbTrans1199 := thrift.NewTMemoryBufferLen(len(arg1198))
    defer mbTrans1199.Close()
    _, err1200 := mbTrans1199.WriteString(arg1198)
    if err1200 != nil {
      Usage()
      return
    }
    factory1201 := thrift.NewTJSONProtocolFactory()
    jsProt1202 := factory1201.GetProtocol(mbTrans1199)
    argvalue1 := interfaces.NewUint64()
    err1203 := argvalue1.Read(context.Background(), jsProt1202)
    if err1203 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1204 := flag.Arg(3)
    mbTrans1205 := thrift.NewTMemoryBufferLen(len(arg1204))
    defer mbTrans1205.Close()
    _, err1206 := mbTrans1205.WriteString(arg1204)
    if err1206 != nil {
      Usage()
      return
    }
    factory1207 := thrift.NewTJSONProtocolFactory()
    jsProt1208 := factory1207.GetProtocol(mbTrans1205)
    argvalue2 := interfaces.NewUint64()
    err1209 := argvalue2.Read(context.Background(), jsProt1208)
    if err1209 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1210 := flag.Arg(4)
    mbTrans1211 := thrift.NewTMemoryBufferLen(len(arg1210))
    defer mbTrans1211.Close()
    _, err1212 := mbTrans1211.WriteString(arg1210)
    if err1212 != nil {
      Usage()
      return
    }
    factory1213 := thrift.NewTJSONProtocolFactory()
    jsProt1214 := factory1213.GetProtocol(mbTrans1211)
    argvalue3 := interfaces.NewUint64()
    err1215 := argvalue3.Read(context.Background(), jsProt1214)
    if err1215 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1216 := flag.Arg(1)
    mbTrans1217 := thrift.NewTMemoryBufferLen(len(arg1216))
    defer mbTrans1217.Close()
    _, err1218 := mbTrans1217.WriteString(arg1216)
    if err1218 != nil {
      Usage()
      return
    }
    factory1219 := thrift.NewTJSONProtocolFactory()
    jsProt1220 := factory1219.GetProtocol(mbTrans1217)
    argvalue0 := interfaces.NewUint64()
    err1221 := argvalue0.Read(context.Background(), jsProt1220)
    if err1221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1222 := flag.Arg(2)
    mbTrans1223 := thrift.NewTMemoryBufferLen(len(arg1222))
    defer mbTrans1223.Close()
    _, err1224 := mbTrans1223.WriteString(arg1222)
    if err1224 != nil {
      Usage()
      return
    }
    factory1225 := thrift.NewTJSONProtocolFactory()
    jsProt1226 := factory1225.GetProtocol(mbTrans1223)
    argvalue1 := interfaces.NewUint64()
    err1227 := argvalue1.Read(context.Background(), jsProt1226)
    if err1227 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1228 := flag.Arg(3)
    mbTrans1229 := thrift.NewTMemoryBufferLen(len(arg1228))
    defer mbTrans1229.Close()
    _, err1230 := mbTrans1229.WriteString(arg1228)
    if err1230 != nil {
      Usage()
      return
    }
    factory1231 := thrift.NewTJSONProtocolFactory()
    jsProt1232 := factory1231.GetProtocol(mbTrans1229)
    argvalue2 := interfaces.NewUint64()
    err1233 := argvalue2.Read(context.Background(), jsProt1232)
    if err1233 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1235 := flag.Arg(1)
    mbTrans1236 := thrift.NewTMemoryBufferLen(len(arg1235))
    defer mbTrans1236.Close()
    _, err1237 := mbTrans1236.WriteString(arg1235)
    if err1237 != nil {
      Usage()
      return
    }
    factory1238 := thrift.NewTJSONProtocolFactory()
    jsProt1239 := factory1238.GetProtocol(mbTrans1236)
    argvalue0 := interfaces.NewUint64()
    err1240 := argvalue0.Read(context.Background(), jsProt1239)
    if err1240 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1241 := flag.Arg(2)
    mbTrans1242 := thrift.NewTMemoryBufferLen(len(arg1241))
    defer mbTrans1242.Close()
    _, err1243 := mbTrans1242.WriteString(arg1241)
    if err1243 != nil {
      Usage()
      return
    }
    factory1244 := thrift.NewTJSONProtocolFactory()
    jsProt1245 := factory1244.GetProtocol(mbTrans1242)
    argvalue1 := interfaces.NewUint64()
    err1246 := argvalue1.Read(context.Background(), jsProt1245)
    if err1246 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1247 := flag.Arg(3)
    mbTrans1248 := thrift.NewTMemoryBufferLen(len(arg1247))
    defer mbTrans1248.Close()
    _, err1249 := mbTrans1248.WriteString(arg1247)
    if err1249 != nil {
      Usage()
      return
    }
    factory1250 := thrift.NewTJSONProtocolFactory()
    jsProt1251 := factory1250.GetProtocol(mbTrans1248)
    argvalue2 := interfaces.NewUint64()
    err1252 := argvalue2.Read(context.Background(), jsProt1251)
    if err1252 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1254 := flag.Arg(5)
    mbTrans1255 := thrift.NewTMemoryBufferLen(len(arg1254))
    defer mbTrans1255.Close()
    _, err1256 := mbTrans1255.WriteString(arg1254)
    if err1256 != nil {
      Usage()
      return
    }
    factory1257 := thrift.NewTJSONProtocolFactory()
    jsProt1258 := factory1257.GetProtocol(mbTrans1255)
    argvalue4 := interfaces.NewUint64()
    err1259 := argvalue4.Read(context.Background(), jsProt1258)
    if err1259 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1260 := flag.Arg(1)
    mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
    defer mbTrans1261.Close()
    _, err1262 := mbTrans1261.WriteString(arg1260)
    if err1262 != nil {
      Usage()
      return
    }
    factory1263 := thrift.NewTJSONProtocolFactory()
    jsProt1264 := factory1263.GetProtocol(mbTrans1261)
    argvalue0 := interfaces.NewUint64()
    err1265 := argvalue0.Read(context.Background(), jsProt1264)
    if err1265 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1266 := flag.Arg(2)
    mbTrans1267 := thrift.NewTMemoryBufferLen(len(arg1266))
    defer mbTrans1267.Close()
    _, err1268 := mbTrans1267.WriteString(arg1266)
    if err1268 != nil {
      Usage()
      return
    }
    factory1269 := thrift.NewTJSONProtocolFactory()
    jsProt1270 := factory1269.GetProtocol(mbTrans1267)
    argvalue1 := interfaces.NewUint64()
    err1271 := argvalue1.Read(context.Background(), jsProt1270)
    if err1271 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1272 := flag.Arg(3)
    mbTrans1273 := thrift.NewTMemoryBufferLen(len(arg1272))
    defer mbTrans1273.Close()
    _, err1274 := mbTrans1273.WriteString(arg1272)
    if err1274 != nil {
      Usage()
      return
    }
    factory1275 := thrift.NewTJSONProtocolFactory()
    jsProt1276 := factory1275.GetProtocol(mbTrans1273)
    argvalue2 := interfaces.NewUint64()
    err1277 := argvalue2.Read(context.Background(), jsProt1276)
    if err1277 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1279 := flag.Arg(5)
    mbTrans1280 := thrift.NewTMemoryBufferLen(len(arg1279))
    defer mbTrans1280.Close()
    _, err1281 := mbTrans1280.WriteString(arg1279)
    if err1281 != nil {
      Usage()
      return
    }
    factory1282 := thrift.NewTJSONProtocolFactory()
    jsProt1283 := factory1282.GetProtocol(mbTrans1280)
    argvalue4 := interfaces.NewUint64()
    err1284 := argvalue4.Read(context.Background(), jsProt1283)
    if err1284 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1285 := flag.Arg(1)
    mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
    defer mbTrans1286.Close()
    _, err1287 := mbTrans1286.WriteString(arg1285)
    if err1287 != nil {
      Usage()
      return
    }
    factory1288 := thrift.NewTJSONProtocolFactory()
    jsProt1289 := factory1288.GetProtocol(mbTrans1286)
    argvalue0 := interfaces.NewUint64()
    err1290 := argvalue0.Read(context.Background(), jsProt1289)
    if err1290 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1291 := flag.Arg(2)
    mbTrans1292 := thrift.NewTMemoryBufferLen(len(arg1291))
    defer mbTrans1292.Close()
    _, err1293 := mbTrans1292.WriteString(arg1291)
    if err1293 != nil {
      Usage()
      return
    }
    factory1294 := thrift.NewTJSONProtocolFactory()
    jsProt1295 := factory1294.GetProtocol(mbTrans1292)
    argvalue1 := interfaces.NewUint64()
    err1296 := argvalue1.Read(context.Background(), jsProt1295)
    if err1296 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1297 := flag.Arg(3)
    mbTrans1298 := thrift.NewTMemoryBufferLen(len(arg1297))
    defer mbTrans1298.Close()
    _, err1299 := mbTrans1298.WriteString(arg1297)
    if err1299 != nil {
      Usage()
      return
    }
    factory1300 := thrift.NewTJSONProtocolFactory()
    jsProt1301 := factory1300.GetProtocol(mbTrans1298)
    argvalue2 := interfaces.NewUint64()
    err1302 := argvalue2.Read(context.Background(), jsProt1301)
    if err1302 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1303 := flag.Arg(1)
    mbTrans1304 := thrift.NewTMemoryBufferLen(len(arg1303))
    defer mbTrans1304.Close()
    _, err1305 := mbTrans1304.WriteString(arg1303)
    if err1305 != nil {
      Usage()
      return
    }
    factory1306 := thrift.NewTJSONProtocolFactory()
    jsProt1307 := factory1306.GetProtocol(mbTrans1304)
    argvalue0 := interfaces.NewUint64()
    err1308 := argvalue0.Read(context.Background(), jsProt1307)
    if err1308 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1309 := flag.Arg(2)
    mbTrans1310 := thrift.NewTMemoryBufferLen(len(arg1309))
    defer mbTrans1310.Close()
    _, err1311 := mbTrans1310.WriteString(arg1309)
    if err1311 != nil {
      Usage()
      return
    }
    factory1312 := thrift.NewTJSONProtocolFactory()
    jsProt1313 := factory1312.GetProtocol(mbTrans1310)
    argvalue1 := interfaces.NewUint64()
    err1314 := argvalue1.Read(context.Background(), jsProt1313)
    if err1314 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1315 := flag.Arg(3)
    mbTrans1316 := thrift.NewTMemoryBufferLen(len(arg1315))
    defer mbTrans1316.Close()
    _, err1317 := mbTrans1316.WriteString(arg1315)
    if err1317 != nil {
      Usage()
      return
    }
    factory1318 := thrift.NewTJSONProtocolFactory()
    jsProt1319 := factory1318.GetProtocol(mbTrans1316)
    argvalue2 := interfaces.NewUint64()
    err1320 := argvalue2.Read(context.Background(), jsProt1319)
    if err1320 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1321 := flag.Arg(4)
    mbTrans1322 := thrift.NewTMemoryBufferLen(len(arg1321))
    defer mbTrans1322.Close()
    _, err1323 := mbTrans1322.WriteString(arg1321)
    if err1323 != nil {
      Usage()
      return
    }
    factory1324 := thrift.NewTJSONProtocolFactory()
    jsProt1325 := factory1324.GetProtocol(mbTrans1322)
    argvalue3 := interfaces.NewUint64()
    err1326 := argvalue3.Read(context.Background(), jsProt1325)
    if err1326 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1328 := (strconv.Atoi(flag.Arg(1)))
    if err1328 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1329 := flag.Arg(2)
    mbTrans1330 := thrift.NewTMemoryBufferLen(len(arg1329))
    defer mbTrans1330.Close()
    _, err1331 := mbTrans1330.WriteString(arg1329)
    if err1331 != nil {
      Usage()
      return
    }
    factory1332 := thrift.NewTJSONProtocolFactory()
    jsProt1333 := factory1332.GetProtocol(mbTrans1330)
    argvalue1 := interfaces.NewUint64()
    err1334 := argvalue1.Read(context.Background(), jsProt1333)
    if err1334 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1336 := (strconv.Atoi(flag.Arg(1)))
    if err1336 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1337 := (strconv.Atoi(flag.Arg(1)))
    if err1337 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1338 := (strconv.Atoi(flag.Arg(1)))
    if err1338 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1339 := flag.Arg(1)
    mbTrans1340 := thrift.NewTMemoryBufferLen(len(arg1339))
    defer mbTrans1340.Close()
    _, err1341 := mbTrans1340.WriteString(arg1339)
    if err1341 != nil {
      Usage()
      return
    }
    factory1342 := thrift.NewTJSONProtocolFactory()
    jsProt1343 := factory1342.GetProtocol(mbTrans1340)
    argvalue0 := interfaces.NewUint64()
    err1344 := argvalue0.Read(context.Background(), jsProt1343)
    if err1344 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1345 := flag.Arg(2)
    mbTrans1346 := thrift.NewTMemoryBufferLen(len(arg1345))
    defer mbTrans1346.Close()
    _, err1347 := mbTrans1346.WriteString(arg1345)
    if err1347 != nil {
      Usage()
      return
    }
    factory1348 := thrift.NewTJSONProtocolFactory()
    jsProt1349 := factory1348.GetProtocol(mbTrans1346)
    argvalue1 := interfaces.NewUint64()
    err1350 := argvalue1.Read(context.Background(), jsProt1349)
    if err1350 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1351 := flag.Arg(3)
    mbTrans1352 := thrift.NewTMemoryBufferLen(len(arg1351))
    defer mbTrans1352.Close()
    _, err1353 := mbTrans1352.WriteString(arg1351)
    if err1353 != nil {
      Usage()
      return
    }
    factory1354 := thrift.NewTJSONProtocolFactory()
    jsProt1355 := factory1354.GetProtocol(mbTrans1352)
    argvalue2 := interfaces.NewUint64()
    err1356 := argvalue2.Read(context.Background(), jsProt1355)
    if err1356 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1357 := flag.Arg(4)
    mbTrans1358 := thrift.NewTMemoryBufferLen(len(arg1357))
    defer mbTrans1358.Close()
    _, err1359 := mbTrans1358.WriteString(arg1357)
    if err1359 != nil {
      Usage()
      return
    }
    factory1360 := thrift.NewTJSONProtocolFactory()
    jsProt1361 := factory1360.GetProtocol(mbTrans1358)
    argvalue3 := interfaces.NewUint64()
    err1362 := argvalue3.Read(context.Background(), jsProt1361)
    if err1362 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1363 := flag.Arg(1)
    mbTrans1364 := thrift.NewTMemoryBufferLen(len(arg1363))
    defer mbTrans1364.Close()
    _, err1365 := mbTrans1364.WriteString(arg1363)
    if err1365 != nil {
      Usage()
      return
    }
    factory1366 := thrift.NewTJSONProtocolFactory()
    jsProt1367 := factory1366.GetProtocol(mbTrans1364)
    argvalue0 := interfaces.NewUint64()
    err1368 := argvalue0.Read(context.Background(), jsProt1367)
    if err1368 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1369 := flag.Arg(2)
    mbTrans1370 := thrift.NewTMemoryBufferLen(len(arg1369))
    defer mbTrans1370.Close()
    _, err1371 := mbTrans1370.WriteString(arg1369)
    if err1371 != nil {
      Usage()
      return
    }
    factory1372 := thrift.NewTJSONProtocolFactory()
    jsProt1373 := factory1372.GetProtocol(mbTrans1370)
    argvalue1 := interfaces.NewUint64()
    err1374 := argvalue1.Read(context.Background(), jsProt1373)
    if err1374 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1375 := flag.Arg(3)
    mbTrans1376 := thrift.NewTMemoryBufferLen(len(arg1375))
    defer mbTrans1376.Close()
    _, err1377 := mbTrans1376.WriteString(arg1375)
    if err1377 != nil {
      Usage()
      return
    }
    factory1378 := thrift.NewTJSONProtocolFactory()
    jsProt1379 := factory1378.GetProtocol(mbTrans1376)
    argvalue2 := interfaces.NewUint64()
    err1380 := argvalue2.Read(context.Background(), jsProt1379)
    if err1380 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1382 := flag.Arg(1)
    mbTrans1383 := thrift.NewTMemoryBufferLen(len(arg1382))
    defer mbTrans1383.Close()
    _, err1384 := mbTrans1383.WriteString(arg1382)
    if err1384 != nil {
      Usage()
      return
    }
    factory1385 := thrift.NewTJSONProtocolFactory()
    jsProt1386 := factory1385.GetProtocol(mbTrans1383)
    argvalue0 := interfaces.NewUint64()
    err1387 := argvalue0.Read(context.Background(), jsProt1386)
    if err1387 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1388 := flag.Arg(2)
    mbTrans1389 := thrift.NewTMemoryBufferLen(len(arg1388))
    defer mbTrans1389.Close()
    _, err1390 := mbTrans1389.WriteString(arg1388)
    if err1390 != nil {
      Usage()
      return
    }
    factory1391 := thrift.NewTJSONProtocolFactory()
    jsProt1392 := factory1391.GetProtocol(mbTrans1389)
    argvalue1 := interfaces.NewUint64()
    err1393 := argvalue1.Read(context.Background(), jsProt1392)
    if err1393 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1394 := flag.Arg(3)
    mbTrans1395 := thrift.NewTMemoryBufferLen(len(arg1394))
    defer mbTrans1395.Close()
    _, err1396 := mbTrans1395.WriteString(arg1394)
    if err1396 != nil {
      Usage()
      return
    }
    factory1397 := thrift.NewTJSONProtocolFactory()
    jsProt1398 := factory1397.GetProtocol(mbTrans1395)
    argvalue2 := interfaces.NewUint64()
    err1399 := argvalue2.Read(context.Background(), jsProt1398)
    if err1399 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1401 := flag.Arg(5)
    mbTrans1402 := thrift.NewTMemoryBufferLen(len(arg1401))
    defer mbTrans1402.Close()
    _, err1403 := mbTrans1402.WriteString(arg1401)
    if err1403 != nil {
      Usage()
      return
    }
    factory1404 := thrift.NewTJSONProtocolFactory()
    jsProt1405 := factory1404.GetProtocol(mbTrans1402)
    argvalue4 := interfaces.NewUint64()
    err1406 := argvalue4.Read(context.Background(), jsProt1405)
    if err1406 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1407 := flag.Arg(1)
    mbTrans1408 := thrift.NewTMemoryBufferLen(len(arg1407))
    defer mbTrans1408.Close()
    _, err1409 := mbTrans1408.WriteString(arg1407)
    if err1409 != nil {
      Usage()
      return
    }
    factory1410 := thrift.NewTJSONProtocolFactory()
    jsProt1411 := factory1410.GetProtocol(mbTrans1408)
    argvalue0 := interfaces.NewUint64()
    err1412 := argvalue0.Read(context.Background(), jsProt1411)
    if err1412 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1413 := flag.Arg(2)
    mbTrans1414 := thrift.NewTMemoryBufferLen(len(arg1413))
    defer mbTrans1414.Close()
    _, err1415 := mbTrans1414.WriteString(arg1413)
    if err1415 != nil {
      Usage()
      return
    }
    factory1416 := thrift.NewTJSONProtocolFactory()
    jsProt1417 := factory1416.GetProtocol(mbTrans1414)
    argvalue1 := interfaces.NewUint64()
    err1418 := argvalue1.Read(context.Background(), jsProt1417)
    if err1418 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1419 := flag.Arg(3)
    mbTrans1420 := thrift.NewTMemoryBufferLen(len(arg1419))
    defer mbTrans1420.Close()
    _, err1421 := mbTrans1420.WriteString(arg1419)
    if err1421 != nil {
      Usage()
      return
    }
    factory1422 := thrift.NewTJSONProtocolFactory()
    jsProt1423 := factory1422.GetProtocol(mbTrans1420)
    argvalue2 := interfaces.NewUint64()
    err1424 := argvalue2.Read(context.Background(), jsProt1423)
    if err1424 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1426 := flag.Arg(5)
    mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
    defer mbTrans1427.Close()
    _, err1428 := mbTrans1427.WriteString(arg1426)
    if err1428 != nil {
      Usage()
      return
    }
    factory1429 := thrift.NewTJSONProtocolFactory()
    jsProt1430 := factory1429.GetProtocol(mbTrans1427)
    argvalue4 := interfaces.NewUint64()
    err1431 := argvalue4.Read(context.Background(), jsProt1430)
    if err1431 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1432 := flag.Arg(1)
    mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
    defer mbTrans1433.Close()
    _, err1434 := mbTrans1433.WriteString(arg1432)
    if err1434 != nil {
      Usage()
      return
    }
    factory1435 := thrift.NewTJSONProtocolFactory()
    jsProt1436 := factory1435.GetProtocol(mbTrans1433)
    argvalue0 := interfaces.NewUint64()
    err1437 := argvalue0.Read(context.Background(), jsProt1436)
    if err1437 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1438 := flag.Arg(2)
    mbTrans1439 := thrift.NewTMemoryBufferLen(len(arg1438))
    defer mbTrans1439.Close()
    _, err1440 := mbTrans1439.WriteString(arg1438)
    if err1440 != nil {
      Usage()
      return
    }
    factory1441 := thrift.NewTJSONProtocolFactory()
    jsProt1442 := factory1441.GetProtocol(mbTrans1439)
    argvalue1 := interfaces.NewUint64()
    err1443 := argvalue1.Read(context.Background(), jsProt1442)
    if err1443 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1444 := flag.Arg(3)
    mbTrans1445 := thrift.NewTMemoryBufferLen(len(arg1444))
    defer mbTrans1445.Close()
    _, err1446 := mbTrans1445.WriteString(arg1444)
    if err1446 != nil {
      Usage()
      return
    }
    factory1447 := thrift.NewTJSONProtocolFactory()
    jsProt1448 := factory1447.GetProtocol(mbTrans1445)
    argvalue2 := interfaces.NewUint64()
    err1449 := argvalue2.Read(context.Background(), jsProt1448)
    if err1449 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1450 := flag.Arg(1)
    mbTrans1451 := thrift.NewTMemoryBufferLen(len(arg1450))
    defer mbTrans1451.Close()
    _, err1452 := mbTrans1451.WriteString(arg1450)
    if err1452 != nil {
      Usage()
      return
    }
    factory1453 := thrift.NewTJSONProtocolFactory()
    jsProt1454 := factory1453.GetProtocol(mbTrans1451)
    argvalue0 := interfaces.NewUint64()
    err1455 := argvalue0.Read(context.Background(), jsProt1454)
    if err1455 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1456 := flag.Arg(2)
    mbTrans1457 := thrift.NewTMemoryBufferLen(len(arg1456))
    defer mbTrans1457.Close()
    _, err1458 := mbTrans1457.WriteString(arg1456)
    if err1458 != nil {
      Usage()
      return
    }
    factory1459 := thrift.NewTJSONProtocolFactory()
    jsProt1460 := factory1459.GetProtocol(mbTrans1457)
    argvalue1 := interfaces.NewUint64()
    err1461 := argvalue1.Read(context.Background(), jsProt1460)
    if err1461 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1462 := flag.Arg(3)
    mbTrans1463 := thrift.NewTMemoryBufferLen(len(arg1462))
    defer mbTrans1463.Close()
    _, err1464 := mbTrans1463.WriteString(arg1462)
    if err1464 != nil {
      Usage()
      return
    }
    factory1465 := thrift.NewTJSONProtocolFactory()
    jsProt1466 := factory1465.GetProtocol(mbTrans1463)
    argvalue2 := interfaces.NewUint64()
    err1467 := argvalue2.Read(context.Background(), jsProt1466)
    if err1467 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1468 := flag.Arg(4)
    mbTrans1469 := thrift.NewTMemoryBufferLen(len(arg1468))
    defer mbTrans1469.Close()
    _, err1470 := mbTrans1469.WriteString(arg1468)
    if err1470 != nil {
      Usage()
      return
    }
    factory1471 := thrift.NewTJSONProtocolFactory()
    jsProt1472 := factory1471.GetProtocol(mbTrans1469)
    argvalue3 := interfaces.NewUint64()
    err1473 := argvalue3.Read(context.Background(), jsProt1472)
    if err1473 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1475 := (strconv.Atoi(flag.Arg(1)))
    if err1475 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1476 := flag.Arg(2)
    mbTrans1477 := thrift.NewTMemoryBufferLen(len(arg1476))
    defer mbTrans1477.Close()
    _, err1478 := mbTrans1477.WriteString(arg1476)
    if err1478 != nil {
      Usage()
      return
    }
    factory1479 := thrift.NewTJSONProtocolFactory()
    jsProt1480 := factory1479.GetProtocol(mbTrans1477)
    argvalue1 := interfaces.NewUint64()
    err1481 := argvalue1.Read(context.Background(), jsProt1480)
    if err1481 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1483 := (strconv.Atoi(flag.Arg(1)))
    if err1483 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1484 := (strconv.Atoi(flag.Arg(1)))
    if err1484 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1485 := (strconv.Atoi(flag.Arg(1)))
    if err1485 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1486 := flag.Arg(1)
    mbTrans1487 := thrift.NewTMemoryBufferLen(len(arg1486))
    defer mbTrans1487.Close()
    _, err1488 := mbTrans1487.WriteString(arg1486)
    if err1488 != nil {
      Usage()
      return
    }
    factory1489 := thrift.NewTJSONProtocolFactory()
    jsProt1490 := factory1489.GetProtocol(mbTrans1487)
    argvalue0 := interfaces.NewUint64()
    err1491 := argvalue0.Read(context.Background(), jsProt1490)
    if err1491 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1492 := flag.Arg(2)
    mbTrans1493 := thrift.NewTMemoryBufferLen(len(arg1492))
    defer mbTrans1493.Close()
    _, err1494 := mbTrans1493.WriteString(arg1492)
    if err1494 != nil {
      Usage()
      return
    }
    factory1495 := thrift.NewTJSONProtocolFactory()
    jsProt1496 := factory1495.GetProtocol(mbTrans1493)
    argvalue1 := interfaces.NewUint64()
    err1497 := argvalue1.Read(context.Background(), jsProt1496)
    if err1497 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1498 := flag.Arg(3)
    mbTrans1499 := thrift.NewTMemoryBufferLen(len(arg1498))
    defer mbTrans1499.Close()
    _, err1500 := mbTrans1499.WriteString(arg1498)
    if err1500 != nil {
      Usage()
      return
    }
    factory1501 := thrift.NewTJSONProtocolFactory()
    jsProt1502 := factory1501.GetProtocol(mbTrans1499)
    argvalue2 := interfaces.NewUint64()
    err1503 := argvalue2.Read(context.Background(), jsProt1502)
    if err1503 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1504 := flag.Arg(4)
    mbTrans1505 := thrift.NewTMemoryBufferLen(len(arg1504))
    defer mbTrans1505.Close()
    _, err1506 := mbTrans1505.WriteString(arg1504)
    if err1506 != nil {
      Usage()
      return
    }
    factory1507 := thrift.NewTJSONProtocolFactory()
    jsProt1508 := factory1507.GetProtocol(mbTrans1505)
    argvalue3 := interfaces.NewUint64()
    err1509 := argvalue3.Read(context.Background(), jsProt1508)
    if err1509 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1510 := flag.Arg(1)
    mbTrans1511 := thrift.NewTMemoryBufferLen(len(arg1510))
    defer mbTrans1511.Close()
    _, err1512 := mbTrans1511.WriteString(arg1510)
    if err1512 != nil {
      Usage()
      return
    }
    factory1513 := thrift.NewTJSONProtocolFactory()
    jsProt1514 := factory1513.GetProtocol(mbTrans1511)
    argvalue0 := interfaces.NewUint64()
    err1515 := argvalue0.Read(context.Background(), jsProt1514)
    if err1515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1516 := flag.Arg(2)
    mbTrans1517 := thrift.NewTMemoryBufferLen(len(arg1516))
    defer mbTrans1517.Close()
    _, err1518 := mbTrans1517.WriteString(arg1516)
    if err1518 != nil {
      Usage()
      return
    }
    factory1519 := thrift.NewTJSONProtocolFactory()
    jsProt1520 := factory1519.GetProtocol(mbTrans1517)
    argvalue1 := interfaces.NewUint64()
    err1521 := argvalue1.Read(context.Background(), jsProt1520)
    if err1521 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1522 := flag.Arg(3)
    mbTrans1523 := thrift.NewTMemoryBufferLen(len(arg1522))
    defer mbTrans1523.Close()
    _, err1524 := mbTrans1523.WriteString(arg1522)
    if err1524 != nil {
      Usage()
      return
    }
    factory1525 := thrift.NewTJSONProtocolFactory()
    jsProt1526 := factory1525.GetProtocol(mbTrans1523)
    argvalue2 := interfaces.NewUint64()
    err1527 := argvalue2.Read(context.Background(), jsProt1526)
    if err1527 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1529 := flag.Arg(1)
    mbTrans1530 := thrift.NewTMemoryBufferLen(len(arg1529))
    defer mbTrans1530.Close()
    _, err1531 := mbTrans1530.WriteString(arg1529)
    if err1531 != nil {
      Usage()
      return
    }
    factory1532 := thrift.NewTJSONProtocolFactory()
    jsProt1533 := factory1532.GetProtocol(mbTrans1530)
    argvalue0 := interfaces.NewUint64()
    err1534 := argvalue0.Read(context.Background(), jsProt1533)
    if err1534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1535 := flag.Arg(2)
    mbTrans1536 := thrift.NewTMemoryBufferLen(len(arg1535))
    defer mbTrans1536.Close()
    _, err1537 := mbTrans1536.WriteString(arg1535)
    if err1537 != nil {
      Usage()
      return
    }
    factory1538 := thrift.NewTJSONProtocolFactory()
    jsProt1539 := factory1538.GetProtocol(mbTrans1536)
    argvalue1 := interfaces.NewUint64()
    err1540 := argvalue1.Read(context.Background(), jsProt1539)
    if err1540 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1541 := flag.Arg(3)
    mbTrans1542 := thrift.NewTMemoryBufferLen(len(arg1541))
    defer mbTrans1542.Close()
    _, err1543 := mbTrans1542.WriteString(arg1541)
    if err1543 != nil {
      Usage()
      return
    }
    factory1544 := thrift.NewTJSONProtocolFactory()
    jsProt1545 := factory1544.GetProtocol(mbTrans1542)
    argvalue2 := interfaces.NewUint64()
    err1546 := argvalue2.Read(context.Background(), jsProt1545)
    if err1546 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1548 := flag.Arg(5)
    mbTrans1549 := thrift.NewTMemoryBufferLen(len(arg1548))
    defer mbTrans1549.Close()
    _, err1550 := mbTrans1549.WriteString(arg1548)
    if err1550 != nil {
      Usage()
      return
    }
    factory1551 := thrift.NewTJSONProtocolFactory()
    jsProt1552 := factory1551.GetProtocol(mbTrans1549)
    argvalue4 := interfaces.NewUint64()
    err1553 := argvalue4.Read(context.Background(), jsProt1552)
    if err1553 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1554 := flag.Arg(1)
    mbTrans1555 := thrift.NewTMemoryBufferLen(len(arg1554))
    defer mbTrans1555.Close()
    _, err1556 := mbTrans1555.WriteString(arg1554)
    if err1556 != nil {
      Usage()
      return
    }
    factory1557 := thrift.NewTJSONProtocolFactory()
    jsProt1558 := factory1557.GetProtocol(mbTrans1555)
    argvalue0 := interfaces.NewUint64()
    err1559 := argvalue0.Read(context.Background(), jsProt1558)
    if err1559 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1560 := flag.Arg(2)
    mbTrans1561 := thrift.NewTMemoryBufferLen(len(arg1560))
    defer mbTrans1561.Close()
    _, err1562 := mbTrans1561.WriteString(arg1560)
    if err1562 != nil {
      Usage()
      return
    }
    factory1563 := thrift.NewTJSONProtocolFactory()
    jsProt1564 := factory1563.GetProtocol(mbTrans1561)
    argvalue1 := interfaces.NewUint64()
    err1565 := argvalue1.Read(context.Background(), jsProt1564)
    if err1565 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1566 := flag.Arg(3)
    mbTrans1567 := thrift.NewTMemoryBufferLen(len(arg1566))
    defer mbTrans1567.Close()
    _, err1568 := mbTrans1567.WriteString(arg1566)
    if err1568 != nil {
      Usage()
      return
    }
    factory1569 := thrift.NewTJSONProtocolFactory()
    jsProt1570 := factory1569.GetProtocol(mbTrans1567)
    argvalue2 := interfaces.NewUint64()
    err1571 := argvalue2.Read(context.Background(), jsProt1570)
    if err1571 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1573 := flag.Arg(5)
    mbTrans1574 := thrift.NewTMemoryBufferLen(len(arg1573))
    defer mbTrans1574.Close()
    _, err1575 := mbTrans1574.WriteString(arg1573)
    if err1575 != nil {
      Usage()
      return
    }
    factory1576 := thrift.NewTJSONProtocolFactory()
    jsProt1577 := factory1576.GetProtocol(mbTrans1574)
    argvalue4 := interfaces.NewUint64()
    err1578 := argvalue4.Read(context.Background(), jsProt1577)
    if err1578 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1579 := flag.Arg(1)
    mbTrans1580 := thrift.NewTMemoryBufferLen(len(arg1579))
    defer mbTrans1580.Close()
    _, err1581 := mbTrans1580.WriteString(arg1579)
    if err1581 != nil {
      Usage()
      return
    }
    factory1582 := thrift.NewTJSONProtocolFactory()
    jsProt1583 := factory1582.GetProtocol(mbTrans1580)
    argvalue0 := interfaces.NewUint64()
    err1584 := argvalue0.Read(context.Background(), jsProt1583)
    if err1584 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1585 := flag.Arg(2)
    mbTrans1586 := thrift.NewTMemoryBufferLen(len(arg1585))
    defer mbTrans1586.Close()
    _, err1587 := mbTrans1586.WriteString(arg1585)
    if err1587 != nil {
      Usage()
      return
    }
    factory1588 := thrift.NewTJSONProtocolFactory()
    jsProt1589 := factory1588.GetProtocol(mbTrans1586)
    argvalue1 := interfaces.NewUint64()
    err1590 := argvalue1.Read(context.Background(), jsProt1589)
    if err1590 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1591 := flag.Arg(3)
    mbTrans1592 := thrift.NewTMemoryBufferLen(len(arg1591))
    defer mbTrans1592.Close()
    _, err1593 := mbTrans1592.WriteString(arg1591)
    if err1593 != nil {
      Usage()
      return
    }
    factory1594 := thrift.NewTJSONProtocolFactory()
    jsProt1595 := factory1594.GetProtocol(mbTrans1592)
    argvalue2 := interfaces.NewUint64()
    err1596 := argvalue2.Read(context.Background(), jsProt1595)
    if err1596 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
