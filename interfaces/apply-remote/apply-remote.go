// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  void set_action_return_value(string data)")
  fmt.Fprintln(os.Stderr, "  string get_code_hash(Uint64 account, i64 struct_version)")
  fmt.Fprintln(os.Stderr, "  i64 get_block_num()")
  fmt.Fprintln(os.Stderr, "  string sha3(string data, i32 keccak)")
  fmt.Fprintln(os.Stderr, "  string blake2_f(i64 rounds, string state, string msg, string t0_offset, string t1_offset, i32 final)")
  fmt.Fprintln(os.Stderr, "  string k1_recover(string sig, string dig)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_add(string op1, string op2)")
  fmt.Fprintln(os.Stderr, "  string alt_bn128_mul(string g1, string scalar)")
  fmt.Fprintln(os.Stderr, "  i32 alt_bn128_pair(string pairs)")
  fmt.Fprintln(os.Stderr, "  string mod_exp(string base, string exp, string mod)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg605 := flag.Arg(1)
    mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewTJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue0 := interfaces.NewUint64()
    err610 := argvalue0.Read(context.Background(), jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg611 := flag.Arg(1)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue0 := interfaces.NewUint64()
    err616 := argvalue0.Read(context.Background(), jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err617 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err617 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err618 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err618 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err619 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err619 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg621 := flag.Arg(1)
    mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
    defer mbTrans622.Close()
    _, err623 := mbTrans622.WriteString(arg621)
    if err623 != nil {
      Usage()
      return
    }
    factory624 := thrift.NewTJSONProtocolFactory()
    jsProt625 := factory624.GetProtocol(mbTrans622)
    argvalue0 := interfaces.NewUint64()
    err626 := argvalue0.Read(context.Background(), jsProt625)
    if err626 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg628 := flag.Arg(1)
    mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewTJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue0 := interfaces.NewUint64()
    err633 := argvalue0.Read(context.Background(), jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg634 := flag.Arg(1)
    mbTrans635 := thrift.NewTMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil {
      Usage()
      return
    }
    factory637 := thrift.NewTJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    argvalue0 := interfaces.NewUint64()
    err639 := argvalue0.Read(context.Background(), jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg646 := flag.Arg(1)
    mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
    defer mbTrans647.Close()
    _, err648 := mbTrans647.WriteString(arg646)
    if err648 != nil {
      Usage()
      return
    }
    factory649 := thrift.NewTJSONProtocolFactory()
    jsProt650 := factory649.GetProtocol(mbTrans647)
    argvalue0 := interfaces.NewUint64()
    err651 := argvalue0.Read(context.Background(), jsProt650)
    if err651 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg652 := flag.Arg(2)
    mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
    defer mbTrans653.Close()
    _, err654 := mbTrans653.WriteString(arg652)
    if err654 != nil {
      Usage()
      return
    }
    factory655 := thrift.NewTJSONProtocolFactory()
    jsProt656 := factory655.GetProtocol(mbTrans653)
    argvalue1 := interfaces.NewUint64()
    err657 := argvalue1.Read(context.Background(), jsProt656)
    if err657 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg660 := flag.Arg(5)
    mbTrans661 := thrift.NewTMemoryBufferLen(len(arg660))
    defer mbTrans661.Close()
    _, err662 := mbTrans661.WriteString(arg660)
    if err662 != nil {
      Usage()
      return
    }
    factory663 := thrift.NewTJSONProtocolFactory()
    jsProt664 := factory663.GetProtocol(mbTrans661)
    argvalue4 := interfaces.NewUint64()
    err665 := argvalue4.Read(context.Background(), jsProt664)
    if err665 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg666 := flag.Arg(1)
    mbTrans667 := thrift.NewTMemoryBufferLen(len(arg666))
    defer mbTrans667.Close()
    _, err668 := mbTrans667.WriteString(arg666)
    if err668 != nil {
      Usage()
      return
    }
    factory669 := thrift.NewTJSONProtocolFactory()
    jsProt670 := factory669.GetProtocol(mbTrans667)
    argvalue0 := interfaces.NewUint64()
    err671 := argvalue0.Read(context.Background(), jsProt670)
    if err671 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg672 := flag.Arg(2)
    mbTrans673 := thrift.NewTMemoryBufferLen(len(arg672))
    defer mbTrans673.Close()
    _, err674 := mbTrans673.WriteString(arg672)
    if err674 != nil {
      Usage()
      return
    }
    factory675 := thrift.NewTJSONProtocolFactory()
    jsProt676 := factory675.GetProtocol(mbTrans673)
    argvalue1 := interfaces.NewUint64()
    err677 := argvalue1.Read(context.Background(), jsProt676)
    if err677 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg678 := flag.Arg(1)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue0 := interfaces.NewUint64()
    err683 := argvalue0.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err686 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg687 := flag.Arg(1)
    mbTrans688 := thrift.NewTMemoryBufferLen(len(arg687))
    defer mbTrans688.Close()
    _, err689 := mbTrans688.WriteString(arg687)
    if err689 != nil {
      Usage()
      return
    }
    factory690 := thrift.NewTJSONProtocolFactory()
    jsProt691 := factory690.GetProtocol(mbTrans688)
    argvalue0 := interfaces.NewUint64()
    err692 := argvalue0.Read(context.Background(), jsProt691)
    if err692 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg698 := flag.Arg(1)
    mbTrans699 := thrift.NewTMemoryBufferLen(len(arg698))
    defer mbTrans699.Close()
    _, err700 := mbTrans699.WriteString(arg698)
    if err700 != nil {
      Usage()
      return
    }
    factory701 := thrift.NewTJSONProtocolFactory()
    jsProt702 := factory701.GetProtocol(mbTrans699)
    argvalue0 := interfaces.NewUint64()
    err703 := argvalue0.Read(context.Background(), jsProt702)
    if err703 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg705 := flag.Arg(1)
    mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
    defer mbTrans706.Close()
    _, err707 := mbTrans706.WriteString(arg705)
    if err707 != nil {
      Usage()
      return
    }
    factory708 := thrift.NewTJSONProtocolFactory()
    jsProt709 := factory708.GetProtocol(mbTrans706)
    argvalue0 := interfaces.NewUint64()
    err710 := argvalue0.Read(context.Background(), jsProt709)
    if err710 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg711 := flag.Arg(1)
    mbTrans712 := thrift.NewTMemoryBufferLen(len(arg711))
    defer mbTrans712.Close()
    _, err713 := mbTrans712.WriteString(arg711)
    if err713 != nil {
      Usage()
      return
    }
    factory714 := thrift.NewTJSONProtocolFactory()
    jsProt715 := factory714.GetProtocol(mbTrans712)
    argvalue0 := interfaces.NewUint64()
    err716 := argvalue0.Read(context.Background(), jsProt715)
    if err716 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg717 := flag.Arg(1)
    mbTrans718 := thrift.NewTMemoryBufferLen(len(arg717))
    defer mbTrans718.Close()
    _, err719 := mbTrans718.WriteString(arg717)
    if err719 != nil {
      Usage()
      return
    }
    factory720 := thrift.NewTJSONProtocolFactory()
    jsProt721 := factory720.GetProtocol(mbTrans718)
    argvalue0 := interfaces.NewUint64()
    err722 := argvalue0.Read(context.Background(), jsProt721)
    if err722 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg723 := flag.Arg(1)
    mbTrans724 := thrift.NewTMemoryBufferLen(len(arg723))
    defer mbTrans724.Close()
    _, err725 := mbTrans724.WriteString(arg723)
    if err725 != nil {
      Usage()
      return
    }
    factory726 := thrift.NewTJSONProtocolFactory()
    jsProt727 := factory726.GetProtocol(mbTrans724)
    argvalue0 := interfaces.NewUint64()
    err728 := argvalue0.Read(context.Background(), jsProt727)
    if err728 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg729 := flag.Arg(2)
    mbTrans730 := thrift.NewTMemoryBufferLen(len(arg729))
    defer mbTrans730.Close()
    _, err731 := mbTrans730.WriteString(arg729)
    if err731 != nil {
      Usage()
      return
    }
    factory732 := thrift.NewTJSONProtocolFactory()
    jsProt733 := factory732.GetProtocol(mbTrans730)
    argvalue1 := interfaces.NewUint64()
    err734 := argvalue1.Read(context.Background(), jsProt733)
    if err734 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg735 := flag.Arg(1)
    mbTrans736 := thrift.NewTMemoryBufferLen(len(arg735))
    defer mbTrans736.Close()
    _, err737 := mbTrans736.WriteString(arg735)
    if err737 != nil {
      Usage()
      return
    }
    factory738 := thrift.NewTJSONProtocolFactory()
    jsProt739 := factory738.GetProtocol(mbTrans736)
    argvalue0 := interfaces.NewUint64()
    err740 := argvalue0.Read(context.Background(), jsProt739)
    if err740 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg748 := flag.Arg(2)
    mbTrans749 := thrift.NewTMemoryBufferLen(len(arg748))
    defer mbTrans749.Close()
    _, err750 := mbTrans749.WriteString(arg748)
    if err750 != nil {
      Usage()
      return
    }
    factory751 := thrift.NewTJSONProtocolFactory()
    jsProt752 := factory751.GetProtocol(mbTrans749)
    argvalue1 := interfaces.NewUint64()
    err753 := argvalue1.Read(context.Background(), jsProt752)
    if err753 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err754 := (strconv.Atoi(flag.Arg(1)))
    if err754 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg774 := flag.Arg(2)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil {
      Usage()
      return
    }
    factory777 := thrift.NewTJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    argvalue1 := interfaces.NewUint64()
    err779 := argvalue1.Read(context.Background(), jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err781 := (strconv.Atoi(flag.Arg(4)))
    if err781 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err783 := (strconv.Atoi(flag.Arg(1)))
    if err783 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err784 := (strconv.Atoi(flag.Arg(2)))
    if err784 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err785 := (strconv.Atoi(flag.Arg(1)))
    if err785 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg786 := flag.Arg(1)
    mbTrans787 := thrift.NewTMemoryBufferLen(len(arg786))
    defer mbTrans787.Close()
    _, err788 := mbTrans787.WriteString(arg786)
    if err788 != nil {
      Usage()
      return
    }
    factory789 := thrift.NewTJSONProtocolFactory()
    jsProt790 := factory789.GetProtocol(mbTrans787)
    argvalue0 := interfaces.NewUint64()
    err791 := argvalue0.Read(context.Background(), jsProt790)
    if err791 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg792 := flag.Arg(2)
    mbTrans793 := thrift.NewTMemoryBufferLen(len(arg792))
    defer mbTrans793.Close()
    _, err794 := mbTrans793.WriteString(arg792)
    if err794 != nil {
      Usage()
      return
    }
    factory795 := thrift.NewTJSONProtocolFactory()
    jsProt796 := factory795.GetProtocol(mbTrans793)
    argvalue1 := interfaces.NewUint64()
    err797 := argvalue1.Read(context.Background(), jsProt796)
    if err797 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg798 := flag.Arg(3)
    mbTrans799 := thrift.NewTMemoryBufferLen(len(arg798))
    defer mbTrans799.Close()
    _, err800 := mbTrans799.WriteString(arg798)
    if err800 != nil {
      Usage()
      return
    }
    factory801 := thrift.NewTJSONProtocolFactory()
    jsProt802 := factory801.GetProtocol(mbTrans799)
    argvalue2 := interfaces.NewUint64()
    err803 := argvalue2.Read(context.Background(), jsProt802)
    if err803 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg804 := flag.Arg(4)
    mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
    defer mbTrans805.Close()
    _, err806 := mbTrans805.WriteString(arg804)
    if err806 != nil {
      Usage()
      return
    }
    factory807 := thrift.NewTJSONProtocolFactory()
    jsProt808 := factory807.GetProtocol(mbTrans805)
    argvalue3 := interfaces.NewUint64()
    err809 := argvalue3.Read(context.Background(), jsProt808)
    if err809 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err811 := (strconv.Atoi(flag.Arg(1)))
    if err811 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg812 := flag.Arg(2)
    mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
    defer mbTrans813.Close()
    _, err814 := mbTrans813.WriteString(arg812)
    if err814 != nil {
      Usage()
      return
    }
    factory815 := thrift.NewTJSONProtocolFactory()
    jsProt816 := factory815.GetProtocol(mbTrans813)
    argvalue1 := interfaces.NewUint64()
    err817 := argvalue1.Read(context.Background(), jsProt816)
    if err817 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err819 := (strconv.Atoi(flag.Arg(1)))
    if err819 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err820 := (strconv.Atoi(flag.Arg(1)))
    if err820 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err821 := (strconv.Atoi(flag.Arg(1)))
    if err821 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err822 := (strconv.Atoi(flag.Arg(1)))
    if err822 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg823 := flag.Arg(1)
    mbTrans824 := thrift.NewTMemoryBufferLen(len(arg823))
    defer mbTrans824.Close()
    _, err825 := mbTrans824.WriteString(arg823)
    if err825 != nil {
      Usage()
      return
    }
    factory826 := thrift.NewTJSONProtocolFactory()
    jsProt827 := factory826.GetProtocol(mbTrans824)
    argvalue0 := interfaces.NewUint64()
    err828 := argvalue0.Read(context.Background(), jsProt827)
    if err828 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg829 := flag.Arg(2)
    mbTrans830 := thrift.NewTMemoryBufferLen(len(arg829))
    defer mbTrans830.Close()
    _, err831 := mbTrans830.WriteString(arg829)
    if err831 != nil {
      Usage()
      return
    }
    factory832 := thrift.NewTJSONProtocolFactory()
    jsProt833 := factory832.GetProtocol(mbTrans830)
    argvalue1 := interfaces.NewUint64()
    err834 := argvalue1.Read(context.Background(), jsProt833)
    if err834 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg835 := flag.Arg(3)
    mbTrans836 := thrift.NewTMemoryBufferLen(len(arg835))
    defer mbTrans836.Close()
    _, err837 := mbTrans836.WriteString(arg835)
    if err837 != nil {
      Usage()
      return
    }
    factory838 := thrift.NewTJSONProtocolFactory()
    jsProt839 := factory838.GetProtocol(mbTrans836)
    argvalue2 := interfaces.NewUint64()
    err840 := argvalue2.Read(context.Background(), jsProt839)
    if err840 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg841 := flag.Arg(4)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue3 := interfaces.NewUint64()
    err846 := argvalue3.Read(context.Background(), jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg847 := flag.Arg(1)
    mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
    defer mbTrans848.Close()
    _, err849 := mbTrans848.WriteString(arg847)
    if err849 != nil {
      Usage()
      return
    }
    factory850 := thrift.NewTJSONProtocolFactory()
    jsProt851 := factory850.GetProtocol(mbTrans848)
    argvalue0 := interfaces.NewUint64()
    err852 := argvalue0.Read(context.Background(), jsProt851)
    if err852 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg853 := flag.Arg(2)
    mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
    defer mbTrans854.Close()
    _, err855 := mbTrans854.WriteString(arg853)
    if err855 != nil {
      Usage()
      return
    }
    factory856 := thrift.NewTJSONProtocolFactory()
    jsProt857 := factory856.GetProtocol(mbTrans854)
    argvalue1 := interfaces.NewUint64()
    err858 := argvalue1.Read(context.Background(), jsProt857)
    if err858 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg859 := flag.Arg(3)
    mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
    defer mbTrans860.Close()
    _, err861 := mbTrans860.WriteString(arg859)
    if err861 != nil {
      Usage()
      return
    }
    factory862 := thrift.NewTJSONProtocolFactory()
    jsProt863 := factory862.GetProtocol(mbTrans860)
    argvalue2 := interfaces.NewUint64()
    err864 := argvalue2.Read(context.Background(), jsProt863)
    if err864 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg865 := flag.Arg(4)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue3 := interfaces.NewUint64()
    err870 := argvalue3.Read(context.Background(), jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg871 := flag.Arg(1)
    mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
    defer mbTrans872.Close()
    _, err873 := mbTrans872.WriteString(arg871)
    if err873 != nil {
      Usage()
      return
    }
    factory874 := thrift.NewTJSONProtocolFactory()
    jsProt875 := factory874.GetProtocol(mbTrans872)
    argvalue0 := interfaces.NewUint64()
    err876 := argvalue0.Read(context.Background(), jsProt875)
    if err876 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg877 := flag.Arg(2)
    mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
    defer mbTrans878.Close()
    _, err879 := mbTrans878.WriteString(arg877)
    if err879 != nil {
      Usage()
      return
    }
    factory880 := thrift.NewTJSONProtocolFactory()
    jsProt881 := factory880.GetProtocol(mbTrans878)
    argvalue1 := interfaces.NewUint64()
    err882 := argvalue1.Read(context.Background(), jsProt881)
    if err882 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg883 := flag.Arg(3)
    mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
    defer mbTrans884.Close()
    _, err885 := mbTrans884.WriteString(arg883)
    if err885 != nil {
      Usage()
      return
    }
    factory886 := thrift.NewTJSONProtocolFactory()
    jsProt887 := factory886.GetProtocol(mbTrans884)
    argvalue2 := interfaces.NewUint64()
    err888 := argvalue2.Read(context.Background(), jsProt887)
    if err888 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg889 := flag.Arg(4)
    mbTrans890 := thrift.NewTMemoryBufferLen(len(arg889))
    defer mbTrans890.Close()
    _, err891 := mbTrans890.WriteString(arg889)
    if err891 != nil {
      Usage()
      return
    }
    factory892 := thrift.NewTJSONProtocolFactory()
    jsProt893 := factory892.GetProtocol(mbTrans890)
    argvalue3 := interfaces.NewUint64()
    err894 := argvalue3.Read(context.Background(), jsProt893)
    if err894 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg895 := flag.Arg(1)
    mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
    defer mbTrans896.Close()
    _, err897 := mbTrans896.WriteString(arg895)
    if err897 != nil {
      Usage()
      return
    }
    factory898 := thrift.NewTJSONProtocolFactory()
    jsProt899 := factory898.GetProtocol(mbTrans896)
    argvalue0 := interfaces.NewUint64()
    err900 := argvalue0.Read(context.Background(), jsProt899)
    if err900 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg901 := flag.Arg(2)
    mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
    defer mbTrans902.Close()
    _, err903 := mbTrans902.WriteString(arg901)
    if err903 != nil {
      Usage()
      return
    }
    factory904 := thrift.NewTJSONProtocolFactory()
    jsProt905 := factory904.GetProtocol(mbTrans902)
    argvalue1 := interfaces.NewUint64()
    err906 := argvalue1.Read(context.Background(), jsProt905)
    if err906 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg907 := flag.Arg(3)
    mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
    defer mbTrans908.Close()
    _, err909 := mbTrans908.WriteString(arg907)
    if err909 != nil {
      Usage()
      return
    }
    factory910 := thrift.NewTJSONProtocolFactory()
    jsProt911 := factory910.GetProtocol(mbTrans908)
    argvalue2 := interfaces.NewUint64()
    err912 := argvalue2.Read(context.Background(), jsProt911)
    if err912 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg913 := flag.Arg(1)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil {
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    argvalue0 := interfaces.NewUint64()
    err918 := argvalue0.Read(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg919 := flag.Arg(2)
    mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
    defer mbTrans920.Close()
    _, err921 := mbTrans920.WriteString(arg919)
    if err921 != nil {
      Usage()
      return
    }
    factory922 := thrift.NewTJSONProtocolFactory()
    jsProt923 := factory922.GetProtocol(mbTrans920)
    argvalue1 := interfaces.NewUint64()
    err924 := argvalue1.Read(context.Background(), jsProt923)
    if err924 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg925 := flag.Arg(3)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue2 := interfaces.NewUint64()
    err930 := argvalue2.Read(context.Background(), jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg931 := flag.Arg(4)
    mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
    defer mbTrans932.Close()
    _, err933 := mbTrans932.WriteString(arg931)
    if err933 != nil {
      Usage()
      return
    }
    factory934 := thrift.NewTJSONProtocolFactory()
    jsProt935 := factory934.GetProtocol(mbTrans932)
    argvalue3 := interfaces.NewUint64()
    err936 := argvalue3.Read(context.Background(), jsProt935)
    if err936 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg937 := flag.Arg(5)
    mbTrans938 := thrift.NewTMemoryBufferLen(len(arg937))
    defer mbTrans938.Close()
    _, err939 := mbTrans938.WriteString(arg937)
    if err939 != nil {
      Usage()
      return
    }
    factory940 := thrift.NewTJSONProtocolFactory()
    jsProt941 := factory940.GetProtocol(mbTrans938)
    argvalue4 := interfaces.NewUint64()
    err942 := argvalue4.Read(context.Background(), jsProt941)
    if err942 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err943 := (strconv.Atoi(flag.Arg(1)))
    if err943 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg944 := flag.Arg(2)
    mbTrans945 := thrift.NewTMemoryBufferLen(len(arg944))
    defer mbTrans945.Close()
    _, err946 := mbTrans945.WriteString(arg944)
    if err946 != nil {
      Usage()
      return
    }
    factory947 := thrift.NewTJSONProtocolFactory()
    jsProt948 := factory947.GetProtocol(mbTrans945)
    argvalue1 := interfaces.NewUint64()
    err949 := argvalue1.Read(context.Background(), jsProt948)
    if err949 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg950 := flag.Arg(3)
    mbTrans951 := thrift.NewTMemoryBufferLen(len(arg950))
    defer mbTrans951.Close()
    _, err952 := mbTrans951.WriteString(arg950)
    if err952 != nil {
      Usage()
      return
    }
    factory953 := thrift.NewTJSONProtocolFactory()
    jsProt954 := factory953.GetProtocol(mbTrans951)
    argvalue2 := interfaces.NewUint64()
    err955 := argvalue2.Read(context.Background(), jsProt954)
    if err955 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err956 := (strconv.Atoi(flag.Arg(1)))
    if err956 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err957 := (strconv.Atoi(flag.Arg(1)))
    if err957 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err958 := (strconv.Atoi(flag.Arg(1)))
    if err958 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg959 := flag.Arg(1)
    mbTrans960 := thrift.NewTMemoryBufferLen(len(arg959))
    defer mbTrans960.Close()
    _, err961 := mbTrans960.WriteString(arg959)
    if err961 != nil {
      Usage()
      return
    }
    factory962 := thrift.NewTJSONProtocolFactory()
    jsProt963 := factory962.GetProtocol(mbTrans960)
    argvalue0 := interfaces.NewUint64()
    err964 := argvalue0.Read(context.Background(), jsProt963)
    if err964 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg965 := flag.Arg(2)
    mbTrans966 := thrift.NewTMemoryBufferLen(len(arg965))
    defer mbTrans966.Close()
    _, err967 := mbTrans966.WriteString(arg965)
    if err967 != nil {
      Usage()
      return
    }
    factory968 := thrift.NewTJSONProtocolFactory()
    jsProt969 := factory968.GetProtocol(mbTrans966)
    argvalue1 := interfaces.NewUint64()
    err970 := argvalue1.Read(context.Background(), jsProt969)
    if err970 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg971 := flag.Arg(3)
    mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
    defer mbTrans972.Close()
    _, err973 := mbTrans972.WriteString(arg971)
    if err973 != nil {
      Usage()
      return
    }
    factory974 := thrift.NewTJSONProtocolFactory()
    jsProt975 := factory974.GetProtocol(mbTrans972)
    argvalue2 := interfaces.NewUint64()
    err976 := argvalue2.Read(context.Background(), jsProt975)
    if err976 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg977 := flag.Arg(4)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue3 := interfaces.NewUint64()
    err982 := argvalue3.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg983 := flag.Arg(1)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue0 := interfaces.NewUint64()
    err988 := argvalue0.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg989 := flag.Arg(2)
    mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
    defer mbTrans990.Close()
    _, err991 := mbTrans990.WriteString(arg989)
    if err991 != nil {
      Usage()
      return
    }
    factory992 := thrift.NewTJSONProtocolFactory()
    jsProt993 := factory992.GetProtocol(mbTrans990)
    argvalue1 := interfaces.NewUint64()
    err994 := argvalue1.Read(context.Background(), jsProt993)
    if err994 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg995 := flag.Arg(3)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue2 := interfaces.NewUint64()
    err1000 := argvalue2.Read(context.Background(), jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1001 := flag.Arg(4)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue3 := interfaces.NewUint64()
    err1006 := argvalue3.Read(context.Background(), jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1007 := flag.Arg(1)
    mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
    defer mbTrans1008.Close()
    _, err1009 := mbTrans1008.WriteString(arg1007)
    if err1009 != nil {
      Usage()
      return
    }
    factory1010 := thrift.NewTJSONProtocolFactory()
    jsProt1011 := factory1010.GetProtocol(mbTrans1008)
    argvalue0 := interfaces.NewUint64()
    err1012 := argvalue0.Read(context.Background(), jsProt1011)
    if err1012 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1013 := flag.Arg(2)
    mbTrans1014 := thrift.NewTMemoryBufferLen(len(arg1013))
    defer mbTrans1014.Close()
    _, err1015 := mbTrans1014.WriteString(arg1013)
    if err1015 != nil {
      Usage()
      return
    }
    factory1016 := thrift.NewTJSONProtocolFactory()
    jsProt1017 := factory1016.GetProtocol(mbTrans1014)
    argvalue1 := interfaces.NewUint64()
    err1018 := argvalue1.Read(context.Background(), jsProt1017)
    if err1018 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1019 := flag.Arg(3)
    mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
    defer mbTrans1020.Close()
    _, err1021 := mbTrans1020.WriteString(arg1019)
    if err1021 != nil {
      Usage()
      return
    }
    factory1022 := thrift.NewTJSONProtocolFactory()
    jsProt1023 := factory1022.GetProtocol(mbTrans1020)
    argvalue2 := interfaces.NewUint64()
    err1024 := argvalue2.Read(context.Background(), jsProt1023)
    if err1024 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1025 := flag.Arg(4)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil {
      Usage()
      return
    }
    factory1028 := thrift.NewTJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    argvalue3 := interfaces.NewUint64()
    err1030 := argvalue3.Read(context.Background(), jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1031 := flag.Arg(5)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue4 := interfaces.NewUint64()
    err1036 := argvalue4.Read(context.Background(), jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg1037 := flag.Arg(1)
    mbTrans1038 := thrift.NewTMemoryBufferLen(len(arg1037))
    defer mbTrans1038.Close()
    _, err1039 := mbTrans1038.WriteString(arg1037)
    if err1039 != nil {
      Usage()
      return
    }
    factory1040 := thrift.NewTJSONProtocolFactory()
    jsProt1041 := factory1040.GetProtocol(mbTrans1038)
    argvalue0 := interfaces.NewUint64()
    err1042 := argvalue0.Read(context.Background(), jsProt1041)
    if err1042 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1043 := flag.Arg(2)
    mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
    defer mbTrans1044.Close()
    _, err1045 := mbTrans1044.WriteString(arg1043)
    if err1045 != nil {
      Usage()
      return
    }
    factory1046 := thrift.NewTJSONProtocolFactory()
    jsProt1047 := factory1046.GetProtocol(mbTrans1044)
    argvalue1 := interfaces.NewUint64()
    err1048 := argvalue1.Read(context.Background(), jsProt1047)
    if err1048 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1049 := flag.Arg(3)
    mbTrans1050 := thrift.NewTMemoryBufferLen(len(arg1049))
    defer mbTrans1050.Close()
    _, err1051 := mbTrans1050.WriteString(arg1049)
    if err1051 != nil {
      Usage()
      return
    }
    factory1052 := thrift.NewTJSONProtocolFactory()
    jsProt1053 := factory1052.GetProtocol(mbTrans1050)
    argvalue2 := interfaces.NewUint64()
    err1054 := argvalue2.Read(context.Background(), jsProt1053)
    if err1054 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1055 := flag.Arg(4)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil {
      Usage()
      return
    }
    factory1058 := thrift.NewTJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    argvalue3 := interfaces.NewUint64()
    err1060 := argvalue3.Read(context.Background(), jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1061 := flag.Arg(5)
    mbTrans1062 := thrift.NewTMemoryBufferLen(len(arg1061))
    defer mbTrans1062.Close()
    _, err1063 := mbTrans1062.WriteString(arg1061)
    if err1063 != nil {
      Usage()
      return
    }
    factory1064 := thrift.NewTJSONProtocolFactory()
    jsProt1065 := factory1064.GetProtocol(mbTrans1062)
    argvalue4 := interfaces.NewUint64()
    err1066 := argvalue4.Read(context.Background(), jsProt1065)
    if err1066 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1067 := flag.Arg(1)
    mbTrans1068 := thrift.NewTMemoryBufferLen(len(arg1067))
    defer mbTrans1068.Close()
    _, err1069 := mbTrans1068.WriteString(arg1067)
    if err1069 != nil {
      Usage()
      return
    }
    factory1070 := thrift.NewTJSONProtocolFactory()
    jsProt1071 := factory1070.GetProtocol(mbTrans1068)
    argvalue0 := interfaces.NewUint64()
    err1072 := argvalue0.Read(context.Background(), jsProt1071)
    if err1072 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1073 := flag.Arg(2)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue1 := interfaces.NewUint64()
    err1078 := argvalue1.Read(context.Background(), jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1079 := flag.Arg(3)
    mbTrans1080 := thrift.NewTMemoryBufferLen(len(arg1079))
    defer mbTrans1080.Close()
    _, err1081 := mbTrans1080.WriteString(arg1079)
    if err1081 != nil {
      Usage()
      return
    }
    factory1082 := thrift.NewTJSONProtocolFactory()
    jsProt1083 := factory1082.GetProtocol(mbTrans1080)
    argvalue2 := interfaces.NewUint64()
    err1084 := argvalue2.Read(context.Background(), jsProt1083)
    if err1084 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1085 := flag.Arg(1)
    mbTrans1086 := thrift.NewTMemoryBufferLen(len(arg1085))
    defer mbTrans1086.Close()
    _, err1087 := mbTrans1086.WriteString(arg1085)
    if err1087 != nil {
      Usage()
      return
    }
    factory1088 := thrift.NewTJSONProtocolFactory()
    jsProt1089 := factory1088.GetProtocol(mbTrans1086)
    argvalue0 := interfaces.NewUint64()
    err1090 := argvalue0.Read(context.Background(), jsProt1089)
    if err1090 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1091 := flag.Arg(2)
    mbTrans1092 := thrift.NewTMemoryBufferLen(len(arg1091))
    defer mbTrans1092.Close()
    _, err1093 := mbTrans1092.WriteString(arg1091)
    if err1093 != nil {
      Usage()
      return
    }
    factory1094 := thrift.NewTJSONProtocolFactory()
    jsProt1095 := factory1094.GetProtocol(mbTrans1092)
    argvalue1 := interfaces.NewUint64()
    err1096 := argvalue1.Read(context.Background(), jsProt1095)
    if err1096 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1097 := flag.Arg(3)
    mbTrans1098 := thrift.NewTMemoryBufferLen(len(arg1097))
    defer mbTrans1098.Close()
    _, err1099 := mbTrans1098.WriteString(arg1097)
    if err1099 != nil {
      Usage()
      return
    }
    factory1100 := thrift.NewTJSONProtocolFactory()
    jsProt1101 := factory1100.GetProtocol(mbTrans1098)
    argvalue2 := interfaces.NewUint64()
    err1102 := argvalue2.Read(context.Background(), jsProt1101)
    if err1102 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1103 := flag.Arg(4)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil {
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    argvalue3 := interfaces.NewUint64()
    err1108 := argvalue3.Read(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1110 := (strconv.Atoi(flag.Arg(1)))
    if err1110 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1111 := flag.Arg(2)
    mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
    defer mbTrans1112.Close()
    _, err1113 := mbTrans1112.WriteString(arg1111)
    if err1113 != nil {
      Usage()
      return
    }
    factory1114 := thrift.NewTJSONProtocolFactory()
    jsProt1115 := factory1114.GetProtocol(mbTrans1112)
    argvalue1 := interfaces.NewUint64()
    err1116 := argvalue1.Read(context.Background(), jsProt1115)
    if err1116 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1118 := (strconv.Atoi(flag.Arg(1)))
    if err1118 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1119 := (strconv.Atoi(flag.Arg(1)))
    if err1119 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1120 := (strconv.Atoi(flag.Arg(1)))
    if err1120 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1121 := flag.Arg(1)
    mbTrans1122 := thrift.NewTMemoryBufferLen(len(arg1121))
    defer mbTrans1122.Close()
    _, err1123 := mbTrans1122.WriteString(arg1121)
    if err1123 != nil {
      Usage()
      return
    }
    factory1124 := thrift.NewTJSONProtocolFactory()
    jsProt1125 := factory1124.GetProtocol(mbTrans1122)
    argvalue0 := interfaces.NewUint64()
    err1126 := argvalue0.Read(context.Background(), jsProt1125)
    if err1126 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1127 := flag.Arg(2)
    mbTrans1128 := thrift.NewTMemoryBufferLen(len(arg1127))
    defer mbTrans1128.Close()
    _, err1129 := mbTrans1128.WriteString(arg1127)
    if err1129 != nil {
      Usage()
      return
    }
    factory1130 := thrift.NewTJSONProtocolFactory()
    jsProt1131 := factory1130.GetProtocol(mbTrans1128)
    argvalue1 := interfaces.NewUint64()
    err1132 := argvalue1.Read(context.Background(), jsProt1131)
    if err1132 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1133 := flag.Arg(3)
    mbTrans1134 := thrift.NewTMemoryBufferLen(len(arg1133))
    defer mbTrans1134.Close()
    _, err1135 := mbTrans1134.WriteString(arg1133)
    if err1135 != nil {
      Usage()
      return
    }
    factory1136 := thrift.NewTJSONProtocolFactory()
    jsProt1137 := factory1136.GetProtocol(mbTrans1134)
    argvalue2 := interfaces.NewUint64()
    err1138 := argvalue2.Read(context.Background(), jsProt1137)
    if err1138 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1139 := flag.Arg(4)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue3 := interfaces.NewUint64()
    err1144 := argvalue3.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1145 := flag.Arg(1)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue0 := interfaces.NewUint64()
    err1150 := argvalue0.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1151 := flag.Arg(2)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue1 := interfaces.NewUint64()
    err1156 := argvalue1.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1157 := flag.Arg(3)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue2 := interfaces.NewUint64()
    err1162 := argvalue2.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1164 := flag.Arg(1)
    mbTrans1165 := thrift.NewTMemoryBufferLen(len(arg1164))
    defer mbTrans1165.Close()
    _, err1166 := mbTrans1165.WriteString(arg1164)
    if err1166 != nil {
      Usage()
      return
    }
    factory1167 := thrift.NewTJSONProtocolFactory()
    jsProt1168 := factory1167.GetProtocol(mbTrans1165)
    argvalue0 := interfaces.NewUint64()
    err1169 := argvalue0.Read(context.Background(), jsProt1168)
    if err1169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1170 := flag.Arg(2)
    mbTrans1171 := thrift.NewTMemoryBufferLen(len(arg1170))
    defer mbTrans1171.Close()
    _, err1172 := mbTrans1171.WriteString(arg1170)
    if err1172 != nil {
      Usage()
      return
    }
    factory1173 := thrift.NewTJSONProtocolFactory()
    jsProt1174 := factory1173.GetProtocol(mbTrans1171)
    argvalue1 := interfaces.NewUint64()
    err1175 := argvalue1.Read(context.Background(), jsProt1174)
    if err1175 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1176 := flag.Arg(3)
    mbTrans1177 := thrift.NewTMemoryBufferLen(len(arg1176))
    defer mbTrans1177.Close()
    _, err1178 := mbTrans1177.WriteString(arg1176)
    if err1178 != nil {
      Usage()
      return
    }
    factory1179 := thrift.NewTJSONProtocolFactory()
    jsProt1180 := factory1179.GetProtocol(mbTrans1177)
    argvalue2 := interfaces.NewUint64()
    err1181 := argvalue2.Read(context.Background(), jsProt1180)
    if err1181 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1183 := flag.Arg(5)
    mbTrans1184 := thrift.NewTMemoryBufferLen(len(arg1183))
    defer mbTrans1184.Close()
    _, err1185 := mbTrans1184.WriteString(arg1183)
    if err1185 != nil {
      Usage()
      return
    }
    factory1186 := thrift.NewTJSONProtocolFactory()
    jsProt1187 := factory1186.GetProtocol(mbTrans1184)
    argvalue4 := interfaces.NewUint64()
    err1188 := argvalue4.Read(context.Background(), jsProt1187)
    if err1188 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1189 := flag.Arg(1)
    mbTrans1190 := thrift.NewTMemoryBufferLen(len(arg1189))
    defer mbTrans1190.Close()
    _, err1191 := mbTrans1190.WriteString(arg1189)
    if err1191 != nil {
      Usage()
      return
    }
    factory1192 := thrift.NewTJSONProtocolFactory()
    jsProt1193 := factory1192.GetProtocol(mbTrans1190)
    argvalue0 := interfaces.NewUint64()
    err1194 := argvalue0.Read(context.Background(), jsProt1193)
    if err1194 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1195 := flag.Arg(2)
    mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
    defer mbTrans1196.Close()
    _, err1197 := mbTrans1196.WriteString(arg1195)
    if err1197 != nil {
      Usage()
      return
    }
    factory1198 := thrift.NewTJSONProtocolFactory()
    jsProt1199 := factory1198.GetProtocol(mbTrans1196)
    argvalue1 := interfaces.NewUint64()
    err1200 := argvalue1.Read(context.Background(), jsProt1199)
    if err1200 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1201 := flag.Arg(3)
    mbTrans1202 := thrift.NewTMemoryBufferLen(len(arg1201))
    defer mbTrans1202.Close()
    _, err1203 := mbTrans1202.WriteString(arg1201)
    if err1203 != nil {
      Usage()
      return
    }
    factory1204 := thrift.NewTJSONProtocolFactory()
    jsProt1205 := factory1204.GetProtocol(mbTrans1202)
    argvalue2 := interfaces.NewUint64()
    err1206 := argvalue2.Read(context.Background(), jsProt1205)
    if err1206 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1208 := flag.Arg(5)
    mbTrans1209 := thrift.NewTMemoryBufferLen(len(arg1208))
    defer mbTrans1209.Close()
    _, err1210 := mbTrans1209.WriteString(arg1208)
    if err1210 != nil {
      Usage()
      return
    }
    factory1211 := thrift.NewTJSONProtocolFactory()
    jsProt1212 := factory1211.GetProtocol(mbTrans1209)
    argvalue4 := interfaces.NewUint64()
    err1213 := argvalue4.Read(context.Background(), jsProt1212)
    if err1213 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1214 := flag.Arg(1)
    mbTrans1215 := thrift.NewTMemoryBufferLen(len(arg1214))
    defer mbTrans1215.Close()
    _, err1216 := mbTrans1215.WriteString(arg1214)
    if err1216 != nil {
      Usage()
      return
    }
    factory1217 := thrift.NewTJSONProtocolFactory()
    jsProt1218 := factory1217.GetProtocol(mbTrans1215)
    argvalue0 := interfaces.NewUint64()
    err1219 := argvalue0.Read(context.Background(), jsProt1218)
    if err1219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1220 := flag.Arg(2)
    mbTrans1221 := thrift.NewTMemoryBufferLen(len(arg1220))
    defer mbTrans1221.Close()
    _, err1222 := mbTrans1221.WriteString(arg1220)
    if err1222 != nil {
      Usage()
      return
    }
    factory1223 := thrift.NewTJSONProtocolFactory()
    jsProt1224 := factory1223.GetProtocol(mbTrans1221)
    argvalue1 := interfaces.NewUint64()
    err1225 := argvalue1.Read(context.Background(), jsProt1224)
    if err1225 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1226 := flag.Arg(3)
    mbTrans1227 := thrift.NewTMemoryBufferLen(len(arg1226))
    defer mbTrans1227.Close()
    _, err1228 := mbTrans1227.WriteString(arg1226)
    if err1228 != nil {
      Usage()
      return
    }
    factory1229 := thrift.NewTJSONProtocolFactory()
    jsProt1230 := factory1229.GetProtocol(mbTrans1227)
    argvalue2 := interfaces.NewUint64()
    err1231 := argvalue2.Read(context.Background(), jsProt1230)
    if err1231 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1232 := flag.Arg(1)
    mbTrans1233 := thrift.NewTMemoryBufferLen(len(arg1232))
    defer mbTrans1233.Close()
    _, err1234 := mbTrans1233.WriteString(arg1232)
    if err1234 != nil {
      Usage()
      return
    }
    factory1235 := thrift.NewTJSONProtocolFactory()
    jsProt1236 := factory1235.GetProtocol(mbTrans1233)
    argvalue0 := interfaces.NewUint64()
    err1237 := argvalue0.Read(context.Background(), jsProt1236)
    if err1237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1238 := flag.Arg(2)
    mbTrans1239 := thrift.NewTMemoryBufferLen(len(arg1238))
    defer mbTrans1239.Close()
    _, err1240 := mbTrans1239.WriteString(arg1238)
    if err1240 != nil {
      Usage()
      return
    }
    factory1241 := thrift.NewTJSONProtocolFactory()
    jsProt1242 := factory1241.GetProtocol(mbTrans1239)
    argvalue1 := interfaces.NewUint64()
    err1243 := argvalue1.Read(context.Background(), jsProt1242)
    if err1243 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1244 := flag.Arg(3)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil {
      Usage()
      return
    }
    factory1247 := thrift.NewTJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    argvalue2 := interfaces.NewUint64()
    err1249 := argvalue2.Read(context.Background(), jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1250 := flag.Arg(4)
    mbTrans1251 := thrift.NewTMemoryBufferLen(len(arg1250))
    defer mbTrans1251.Close()
    _, err1252 := mbTrans1251.WriteString(arg1250)
    if err1252 != nil {
      Usage()
      return
    }
    factory1253 := thrift.NewTJSONProtocolFactory()
    jsProt1254 := factory1253.GetProtocol(mbTrans1251)
    argvalue3 := interfaces.NewUint64()
    err1255 := argvalue3.Read(context.Background(), jsProt1254)
    if err1255 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1257 := (strconv.Atoi(flag.Arg(1)))
    if err1257 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1258 := flag.Arg(2)
    mbTrans1259 := thrift.NewTMemoryBufferLen(len(arg1258))
    defer mbTrans1259.Close()
    _, err1260 := mbTrans1259.WriteString(arg1258)
    if err1260 != nil {
      Usage()
      return
    }
    factory1261 := thrift.NewTJSONProtocolFactory()
    jsProt1262 := factory1261.GetProtocol(mbTrans1259)
    argvalue1 := interfaces.NewUint64()
    err1263 := argvalue1.Read(context.Background(), jsProt1262)
    if err1263 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1265 := (strconv.Atoi(flag.Arg(1)))
    if err1265 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1266 := (strconv.Atoi(flag.Arg(1)))
    if err1266 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1267 := (strconv.Atoi(flag.Arg(1)))
    if err1267 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1268 := flag.Arg(1)
    mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
    defer mbTrans1269.Close()
    _, err1270 := mbTrans1269.WriteString(arg1268)
    if err1270 != nil {
      Usage()
      return
    }
    factory1271 := thrift.NewTJSONProtocolFactory()
    jsProt1272 := factory1271.GetProtocol(mbTrans1269)
    argvalue0 := interfaces.NewUint64()
    err1273 := argvalue0.Read(context.Background(), jsProt1272)
    if err1273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1274 := flag.Arg(2)
    mbTrans1275 := thrift.NewTMemoryBufferLen(len(arg1274))
    defer mbTrans1275.Close()
    _, err1276 := mbTrans1275.WriteString(arg1274)
    if err1276 != nil {
      Usage()
      return
    }
    factory1277 := thrift.NewTJSONProtocolFactory()
    jsProt1278 := factory1277.GetProtocol(mbTrans1275)
    argvalue1 := interfaces.NewUint64()
    err1279 := argvalue1.Read(context.Background(), jsProt1278)
    if err1279 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1280 := flag.Arg(3)
    mbTrans1281 := thrift.NewTMemoryBufferLen(len(arg1280))
    defer mbTrans1281.Close()
    _, err1282 := mbTrans1281.WriteString(arg1280)
    if err1282 != nil {
      Usage()
      return
    }
    factory1283 := thrift.NewTJSONProtocolFactory()
    jsProt1284 := factory1283.GetProtocol(mbTrans1281)
    argvalue2 := interfaces.NewUint64()
    err1285 := argvalue2.Read(context.Background(), jsProt1284)
    if err1285 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1286 := flag.Arg(4)
    mbTrans1287 := thrift.NewTMemoryBufferLen(len(arg1286))
    defer mbTrans1287.Close()
    _, err1288 := mbTrans1287.WriteString(arg1286)
    if err1288 != nil {
      Usage()
      return
    }
    factory1289 := thrift.NewTJSONProtocolFactory()
    jsProt1290 := factory1289.GetProtocol(mbTrans1287)
    argvalue3 := interfaces.NewUint64()
    err1291 := argvalue3.Read(context.Background(), jsProt1290)
    if err1291 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1292 := flag.Arg(1)
    mbTrans1293 := thrift.NewTMemoryBufferLen(len(arg1292))
    defer mbTrans1293.Close()
    _, err1294 := mbTrans1293.WriteString(arg1292)
    if err1294 != nil {
      Usage()
      return
    }
    factory1295 := thrift.NewTJSONProtocolFactory()
    jsProt1296 := factory1295.GetProtocol(mbTrans1293)
    argvalue0 := interfaces.NewUint64()
    err1297 := argvalue0.Read(context.Background(), jsProt1296)
    if err1297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1298 := flag.Arg(2)
    mbTrans1299 := thrift.NewTMemoryBufferLen(len(arg1298))
    defer mbTrans1299.Close()
    _, err1300 := mbTrans1299.WriteString(arg1298)
    if err1300 != nil {
      Usage()
      return
    }
    factory1301 := thrift.NewTJSONProtocolFactory()
    jsProt1302 := factory1301.GetProtocol(mbTrans1299)
    argvalue1 := interfaces.NewUint64()
    err1303 := argvalue1.Read(context.Background(), jsProt1302)
    if err1303 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1304 := flag.Arg(3)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue2 := interfaces.NewUint64()
    err1309 := argvalue2.Read(context.Background(), jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1311 := flag.Arg(1)
    mbTrans1312 := thrift.NewTMemoryBufferLen(len(arg1311))
    defer mbTrans1312.Close()
    _, err1313 := mbTrans1312.WriteString(arg1311)
    if err1313 != nil {
      Usage()
      return
    }
    factory1314 := thrift.NewTJSONProtocolFactory()
    jsProt1315 := factory1314.GetProtocol(mbTrans1312)
    argvalue0 := interfaces.NewUint64()
    err1316 := argvalue0.Read(context.Background(), jsProt1315)
    if err1316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1317 := flag.Arg(2)
    mbTrans1318 := thrift.NewTMemoryBufferLen(len(arg1317))
    defer mbTrans1318.Close()
    _, err1319 := mbTrans1318.WriteString(arg1317)
    if err1319 != nil {
      Usage()
      return
    }
    factory1320 := thrift.NewTJSONProtocolFactory()
    jsProt1321 := factory1320.GetProtocol(mbTrans1318)
    argvalue1 := interfaces.NewUint64()
    err1322 := argvalue1.Read(context.Background(), jsProt1321)
    if err1322 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1323 := flag.Arg(3)
    mbTrans1324 := thrift.NewTMemoryBufferLen(len(arg1323))
    defer mbTrans1324.Close()
    _, err1325 := mbTrans1324.WriteString(arg1323)
    if err1325 != nil {
      Usage()
      return
    }
    factory1326 := thrift.NewTJSONProtocolFactory()
    jsProt1327 := factory1326.GetProtocol(mbTrans1324)
    argvalue2 := interfaces.NewUint64()
    err1328 := argvalue2.Read(context.Background(), jsProt1327)
    if err1328 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1330 := flag.Arg(5)
    mbTrans1331 := thrift.NewTMemoryBufferLen(len(arg1330))
    defer mbTrans1331.Close()
    _, err1332 := mbTrans1331.WriteString(arg1330)
    if err1332 != nil {
      Usage()
      return
    }
    factory1333 := thrift.NewTJSONProtocolFactory()
    jsProt1334 := factory1333.GetProtocol(mbTrans1331)
    argvalue4 := interfaces.NewUint64()
    err1335 := argvalue4.Read(context.Background(), jsProt1334)
    if err1335 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1336 := flag.Arg(1)
    mbTrans1337 := thrift.NewTMemoryBufferLen(len(arg1336))
    defer mbTrans1337.Close()
    _, err1338 := mbTrans1337.WriteString(arg1336)
    if err1338 != nil {
      Usage()
      return
    }
    factory1339 := thrift.NewTJSONProtocolFactory()
    jsProt1340 := factory1339.GetProtocol(mbTrans1337)
    argvalue0 := interfaces.NewUint64()
    err1341 := argvalue0.Read(context.Background(), jsProt1340)
    if err1341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1342 := flag.Arg(2)
    mbTrans1343 := thrift.NewTMemoryBufferLen(len(arg1342))
    defer mbTrans1343.Close()
    _, err1344 := mbTrans1343.WriteString(arg1342)
    if err1344 != nil {
      Usage()
      return
    }
    factory1345 := thrift.NewTJSONProtocolFactory()
    jsProt1346 := factory1345.GetProtocol(mbTrans1343)
    argvalue1 := interfaces.NewUint64()
    err1347 := argvalue1.Read(context.Background(), jsProt1346)
    if err1347 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1348 := flag.Arg(3)
    mbTrans1349 := thrift.NewTMemoryBufferLen(len(arg1348))
    defer mbTrans1349.Close()
    _, err1350 := mbTrans1349.WriteString(arg1348)
    if err1350 != nil {
      Usage()
      return
    }
    factory1351 := thrift.NewTJSONProtocolFactory()
    jsProt1352 := factory1351.GetProtocol(mbTrans1349)
    argvalue2 := interfaces.NewUint64()
    err1353 := argvalue2.Read(context.Background(), jsProt1352)
    if err1353 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1355 := flag.Arg(5)
    mbTrans1356 := thrift.NewTMemoryBufferLen(len(arg1355))
    defer mbTrans1356.Close()
    _, err1357 := mbTrans1356.WriteString(arg1355)
    if err1357 != nil {
      Usage()
      return
    }
    factory1358 := thrift.NewTJSONProtocolFactory()
    jsProt1359 := factory1358.GetProtocol(mbTrans1356)
    argvalue4 := interfaces.NewUint64()
    err1360 := argvalue4.Read(context.Background(), jsProt1359)
    if err1360 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1361 := flag.Arg(1)
    mbTrans1362 := thrift.NewTMemoryBufferLen(len(arg1361))
    defer mbTrans1362.Close()
    _, err1363 := mbTrans1362.WriteString(arg1361)
    if err1363 != nil {
      Usage()
      return
    }
    factory1364 := thrift.NewTJSONProtocolFactory()
    jsProt1365 := factory1364.GetProtocol(mbTrans1362)
    argvalue0 := interfaces.NewUint64()
    err1366 := argvalue0.Read(context.Background(), jsProt1365)
    if err1366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1367 := flag.Arg(2)
    mbTrans1368 := thrift.NewTMemoryBufferLen(len(arg1367))
    defer mbTrans1368.Close()
    _, err1369 := mbTrans1368.WriteString(arg1367)
    if err1369 != nil {
      Usage()
      return
    }
    factory1370 := thrift.NewTJSONProtocolFactory()
    jsProt1371 := factory1370.GetProtocol(mbTrans1368)
    argvalue1 := interfaces.NewUint64()
    err1372 := argvalue1.Read(context.Background(), jsProt1371)
    if err1372 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1373 := flag.Arg(3)
    mbTrans1374 := thrift.NewTMemoryBufferLen(len(arg1373))
    defer mbTrans1374.Close()
    _, err1375 := mbTrans1374.WriteString(arg1373)
    if err1375 != nil {
      Usage()
      return
    }
    factory1376 := thrift.NewTJSONProtocolFactory()
    jsProt1377 := factory1376.GetProtocol(mbTrans1374)
    argvalue2 := interfaces.NewUint64()
    err1378 := argvalue2.Read(context.Background(), jsProt1377)
    if err1378 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1379 := flag.Arg(1)
    mbTrans1380 := thrift.NewTMemoryBufferLen(len(arg1379))
    defer mbTrans1380.Close()
    _, err1381 := mbTrans1380.WriteString(arg1379)
    if err1381 != nil {
      Usage()
      return
    }
    factory1382 := thrift.NewTJSONProtocolFactory()
    jsProt1383 := factory1382.GetProtocol(mbTrans1380)
    argvalue0 := interfaces.NewUint64()
    err1384 := argvalue0.Read(context.Background(), jsProt1383)
    if err1384 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1385 := flag.Arg(2)
    mbTrans1386 := thrift.NewTMemoryBufferLen(len(arg1385))
    defer mbTrans1386.Close()
    _, err1387 := mbTrans1386.WriteString(arg1385)
    if err1387 != nil {
      Usage()
      return
    }
    factory1388 := thrift.NewTJSONProtocolFactory()
    jsProt1389 := factory1388.GetProtocol(mbTrans1386)
    argvalue1 := interfaces.NewUint64()
    err1390 := argvalue1.Read(context.Background(), jsProt1389)
    if err1390 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1391 := flag.Arg(3)
    mbTrans1392 := thrift.NewTMemoryBufferLen(len(arg1391))
    defer mbTrans1392.Close()
    _, err1393 := mbTrans1392.WriteString(arg1391)
    if err1393 != nil {
      Usage()
      return
    }
    factory1394 := thrift.NewTJSONProtocolFactory()
    jsProt1395 := factory1394.GetProtocol(mbTrans1392)
    argvalue2 := interfaces.NewUint64()
    err1396 := argvalue2.Read(context.Background(), jsProt1395)
    if err1396 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1397 := flag.Arg(4)
    mbTrans1398 := thrift.NewTMemoryBufferLen(len(arg1397))
    defer mbTrans1398.Close()
    _, err1399 := mbTrans1398.WriteString(arg1397)
    if err1399 != nil {
      Usage()
      return
    }
    factory1400 := thrift.NewTJSONProtocolFactory()
    jsProt1401 := factory1400.GetProtocol(mbTrans1398)
    argvalue3 := interfaces.NewUint64()
    err1402 := argvalue3.Read(context.Background(), jsProt1401)
    if err1402 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1404 := (strconv.Atoi(flag.Arg(1)))
    if err1404 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1405 := flag.Arg(2)
    mbTrans1406 := thrift.NewTMemoryBufferLen(len(arg1405))
    defer mbTrans1406.Close()
    _, err1407 := mbTrans1406.WriteString(arg1405)
    if err1407 != nil {
      Usage()
      return
    }
    factory1408 := thrift.NewTJSONProtocolFactory()
    jsProt1409 := factory1408.GetProtocol(mbTrans1406)
    argvalue1 := interfaces.NewUint64()
    err1410 := argvalue1.Read(context.Background(), jsProt1409)
    if err1410 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1412 := (strconv.Atoi(flag.Arg(1)))
    if err1412 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1413 := (strconv.Atoi(flag.Arg(1)))
    if err1413 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1414 := (strconv.Atoi(flag.Arg(1)))
    if err1414 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1415 := flag.Arg(1)
    mbTrans1416 := thrift.NewTMemoryBufferLen(len(arg1415))
    defer mbTrans1416.Close()
    _, err1417 := mbTrans1416.WriteString(arg1415)
    if err1417 != nil {
      Usage()
      return
    }
    factory1418 := thrift.NewTJSONProtocolFactory()
    jsProt1419 := factory1418.GetProtocol(mbTrans1416)
    argvalue0 := interfaces.NewUint64()
    err1420 := argvalue0.Read(context.Background(), jsProt1419)
    if err1420 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1421 := flag.Arg(2)
    mbTrans1422 := thrift.NewTMemoryBufferLen(len(arg1421))
    defer mbTrans1422.Close()
    _, err1423 := mbTrans1422.WriteString(arg1421)
    if err1423 != nil {
      Usage()
      return
    }
    factory1424 := thrift.NewTJSONProtocolFactory()
    jsProt1425 := factory1424.GetProtocol(mbTrans1422)
    argvalue1 := interfaces.NewUint64()
    err1426 := argvalue1.Read(context.Background(), jsProt1425)
    if err1426 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1427 := flag.Arg(3)
    mbTrans1428 := thrift.NewTMemoryBufferLen(len(arg1427))
    defer mbTrans1428.Close()
    _, err1429 := mbTrans1428.WriteString(arg1427)
    if err1429 != nil {
      Usage()
      return
    }
    factory1430 := thrift.NewTJSONProtocolFactory()
    jsProt1431 := factory1430.GetProtocol(mbTrans1428)
    argvalue2 := interfaces.NewUint64()
    err1432 := argvalue2.Read(context.Background(), jsProt1431)
    if err1432 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1433 := flag.Arg(4)
    mbTrans1434 := thrift.NewTMemoryBufferLen(len(arg1433))
    defer mbTrans1434.Close()
    _, err1435 := mbTrans1434.WriteString(arg1433)
    if err1435 != nil {
      Usage()
      return
    }
    factory1436 := thrift.NewTJSONProtocolFactory()
    jsProt1437 := factory1436.GetProtocol(mbTrans1434)
    argvalue3 := interfaces.NewUint64()
    err1438 := argvalue3.Read(context.Background(), jsProt1437)
    if err1438 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1439 := flag.Arg(1)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil {
      Usage()
      return
    }
    factory1442 := thrift.NewTJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    argvalue0 := interfaces.NewUint64()
    err1444 := argvalue0.Read(context.Background(), jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1445 := flag.Arg(2)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil {
      Usage()
      return
    }
    factory1448 := thrift.NewTJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    argvalue1 := interfaces.NewUint64()
    err1450 := argvalue1.Read(context.Background(), jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1451 := flag.Arg(3)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil {
      Usage()
      return
    }
    factory1454 := thrift.NewTJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    argvalue2 := interfaces.NewUint64()
    err1456 := argvalue2.Read(context.Background(), jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1458 := flag.Arg(1)
    mbTrans1459 := thrift.NewTMemoryBufferLen(len(arg1458))
    defer mbTrans1459.Close()
    _, err1460 := mbTrans1459.WriteString(arg1458)
    if err1460 != nil {
      Usage()
      return
    }
    factory1461 := thrift.NewTJSONProtocolFactory()
    jsProt1462 := factory1461.GetProtocol(mbTrans1459)
    argvalue0 := interfaces.NewUint64()
    err1463 := argvalue0.Read(context.Background(), jsProt1462)
    if err1463 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1464 := flag.Arg(2)
    mbTrans1465 := thrift.NewTMemoryBufferLen(len(arg1464))
    defer mbTrans1465.Close()
    _, err1466 := mbTrans1465.WriteString(arg1464)
    if err1466 != nil {
      Usage()
      return
    }
    factory1467 := thrift.NewTJSONProtocolFactory()
    jsProt1468 := factory1467.GetProtocol(mbTrans1465)
    argvalue1 := interfaces.NewUint64()
    err1469 := argvalue1.Read(context.Background(), jsProt1468)
    if err1469 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1470 := flag.Arg(3)
    mbTrans1471 := thrift.NewTMemoryBufferLen(len(arg1470))
    defer mbTrans1471.Close()
    _, err1472 := mbTrans1471.WriteString(arg1470)
    if err1472 != nil {
      Usage()
      return
    }
    factory1473 := thrift.NewTJSONProtocolFactory()
    jsProt1474 := factory1473.GetProtocol(mbTrans1471)
    argvalue2 := interfaces.NewUint64()
    err1475 := argvalue2.Read(context.Background(), jsProt1474)
    if err1475 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1477 := flag.Arg(5)
    mbTrans1478 := thrift.NewTMemoryBufferLen(len(arg1477))
    defer mbTrans1478.Close()
    _, err1479 := mbTrans1478.WriteString(arg1477)
    if err1479 != nil {
      Usage()
      return
    }
    factory1480 := thrift.NewTJSONProtocolFactory()
    jsProt1481 := factory1480.GetProtocol(mbTrans1478)
    argvalue4 := interfaces.NewUint64()
    err1482 := argvalue4.Read(context.Background(), jsProt1481)
    if err1482 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1483 := flag.Arg(1)
    mbTrans1484 := thrift.NewTMemoryBufferLen(len(arg1483))
    defer mbTrans1484.Close()
    _, err1485 := mbTrans1484.WriteString(arg1483)
    if err1485 != nil {
      Usage()
      return
    }
    factory1486 := thrift.NewTJSONProtocolFactory()
    jsProt1487 := factory1486.GetProtocol(mbTrans1484)
    argvalue0 := interfaces.NewUint64()
    err1488 := argvalue0.Read(context.Background(), jsProt1487)
    if err1488 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1489 := flag.Arg(2)
    mbTrans1490 := thrift.NewTMemoryBufferLen(len(arg1489))
    defer mbTrans1490.Close()
    _, err1491 := mbTrans1490.WriteString(arg1489)
    if err1491 != nil {
      Usage()
      return
    }
    factory1492 := thrift.NewTJSONProtocolFactory()
    jsProt1493 := factory1492.GetProtocol(mbTrans1490)
    argvalue1 := interfaces.NewUint64()
    err1494 := argvalue1.Read(context.Background(), jsProt1493)
    if err1494 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1495 := flag.Arg(3)
    mbTrans1496 := thrift.NewTMemoryBufferLen(len(arg1495))
    defer mbTrans1496.Close()
    _, err1497 := mbTrans1496.WriteString(arg1495)
    if err1497 != nil {
      Usage()
      return
    }
    factory1498 := thrift.NewTJSONProtocolFactory()
    jsProt1499 := factory1498.GetProtocol(mbTrans1496)
    argvalue2 := interfaces.NewUint64()
    err1500 := argvalue2.Read(context.Background(), jsProt1499)
    if err1500 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1502 := flag.Arg(5)
    mbTrans1503 := thrift.NewTMemoryBufferLen(len(arg1502))
    defer mbTrans1503.Close()
    _, err1504 := mbTrans1503.WriteString(arg1502)
    if err1504 != nil {
      Usage()
      return
    }
    factory1505 := thrift.NewTJSONProtocolFactory()
    jsProt1506 := factory1505.GetProtocol(mbTrans1503)
    argvalue4 := interfaces.NewUint64()
    err1507 := argvalue4.Read(context.Background(), jsProt1506)
    if err1507 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1508 := flag.Arg(1)
    mbTrans1509 := thrift.NewTMemoryBufferLen(len(arg1508))
    defer mbTrans1509.Close()
    _, err1510 := mbTrans1509.WriteString(arg1508)
    if err1510 != nil {
      Usage()
      return
    }
    factory1511 := thrift.NewTJSONProtocolFactory()
    jsProt1512 := factory1511.GetProtocol(mbTrans1509)
    argvalue0 := interfaces.NewUint64()
    err1513 := argvalue0.Read(context.Background(), jsProt1512)
    if err1513 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1514 := flag.Arg(2)
    mbTrans1515 := thrift.NewTMemoryBufferLen(len(arg1514))
    defer mbTrans1515.Close()
    _, err1516 := mbTrans1515.WriteString(arg1514)
    if err1516 != nil {
      Usage()
      return
    }
    factory1517 := thrift.NewTJSONProtocolFactory()
    jsProt1518 := factory1517.GetProtocol(mbTrans1515)
    argvalue1 := interfaces.NewUint64()
    err1519 := argvalue1.Read(context.Background(), jsProt1518)
    if err1519 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1520 := flag.Arg(3)
    mbTrans1521 := thrift.NewTMemoryBufferLen(len(arg1520))
    defer mbTrans1521.Close()
    _, err1522 := mbTrans1521.WriteString(arg1520)
    if err1522 != nil {
      Usage()
      return
    }
    factory1523 := thrift.NewTJSONProtocolFactory()
    jsProt1524 := factory1523.GetProtocol(mbTrans1521)
    argvalue2 := interfaces.NewUint64()
    err1525 := argvalue2.Read(context.Background(), jsProt1524)
    if err1525 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1526 := flag.Arg(1)
    mbTrans1527 := thrift.NewTMemoryBufferLen(len(arg1526))
    defer mbTrans1527.Close()
    _, err1528 := mbTrans1527.WriteString(arg1526)
    if err1528 != nil {
      Usage()
      return
    }
    factory1529 := thrift.NewTJSONProtocolFactory()
    jsProt1530 := factory1529.GetProtocol(mbTrans1527)
    argvalue0 := interfaces.NewUint64()
    err1531 := argvalue0.Read(context.Background(), jsProt1530)
    if err1531 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1532 := flag.Arg(2)
    mbTrans1533 := thrift.NewTMemoryBufferLen(len(arg1532))
    defer mbTrans1533.Close()
    _, err1534 := mbTrans1533.WriteString(arg1532)
    if err1534 != nil {
      Usage()
      return
    }
    factory1535 := thrift.NewTJSONProtocolFactory()
    jsProt1536 := factory1535.GetProtocol(mbTrans1533)
    argvalue1 := interfaces.NewUint64()
    err1537 := argvalue1.Read(context.Background(), jsProt1536)
    if err1537 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1538 := flag.Arg(3)
    mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
    defer mbTrans1539.Close()
    _, err1540 := mbTrans1539.WriteString(arg1538)
    if err1540 != nil {
      Usage()
      return
    }
    factory1541 := thrift.NewTJSONProtocolFactory()
    jsProt1542 := factory1541.GetProtocol(mbTrans1539)
    argvalue2 := interfaces.NewUint64()
    err1543 := argvalue2.Read(context.Background(), jsProt1542)
    if err1543 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1544 := flag.Arg(4)
    mbTrans1545 := thrift.NewTMemoryBufferLen(len(arg1544))
    defer mbTrans1545.Close()
    _, err1546 := mbTrans1545.WriteString(arg1544)
    if err1546 != nil {
      Usage()
      return
    }
    factory1547 := thrift.NewTJSONProtocolFactory()
    jsProt1548 := factory1547.GetProtocol(mbTrans1545)
    argvalue3 := interfaces.NewUint64()
    err1549 := argvalue3.Read(context.Background(), jsProt1548)
    if err1549 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1551 := (strconv.Atoi(flag.Arg(1)))
    if err1551 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1552 := flag.Arg(2)
    mbTrans1553 := thrift.NewTMemoryBufferLen(len(arg1552))
    defer mbTrans1553.Close()
    _, err1554 := mbTrans1553.WriteString(arg1552)
    if err1554 != nil {
      Usage()
      return
    }
    factory1555 := thrift.NewTJSONProtocolFactory()
    jsProt1556 := factory1555.GetProtocol(mbTrans1553)
    argvalue1 := interfaces.NewUint64()
    err1557 := argvalue1.Read(context.Background(), jsProt1556)
    if err1557 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1559 := (strconv.Atoi(flag.Arg(1)))
    if err1559 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1560 := (strconv.Atoi(flag.Arg(1)))
    if err1560 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1561 := (strconv.Atoi(flag.Arg(1)))
    if err1561 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1562 := flag.Arg(1)
    mbTrans1563 := thrift.NewTMemoryBufferLen(len(arg1562))
    defer mbTrans1563.Close()
    _, err1564 := mbTrans1563.WriteString(arg1562)
    if err1564 != nil {
      Usage()
      return
    }
    factory1565 := thrift.NewTJSONProtocolFactory()
    jsProt1566 := factory1565.GetProtocol(mbTrans1563)
    argvalue0 := interfaces.NewUint64()
    err1567 := argvalue0.Read(context.Background(), jsProt1566)
    if err1567 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1568 := flag.Arg(2)
    mbTrans1569 := thrift.NewTMemoryBufferLen(len(arg1568))
    defer mbTrans1569.Close()
    _, err1570 := mbTrans1569.WriteString(arg1568)
    if err1570 != nil {
      Usage()
      return
    }
    factory1571 := thrift.NewTJSONProtocolFactory()
    jsProt1572 := factory1571.GetProtocol(mbTrans1569)
    argvalue1 := interfaces.NewUint64()
    err1573 := argvalue1.Read(context.Background(), jsProt1572)
    if err1573 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1574 := flag.Arg(3)
    mbTrans1575 := thrift.NewTMemoryBufferLen(len(arg1574))
    defer mbTrans1575.Close()
    _, err1576 := mbTrans1575.WriteString(arg1574)
    if err1576 != nil {
      Usage()
      return
    }
    factory1577 := thrift.NewTJSONProtocolFactory()
    jsProt1578 := factory1577.GetProtocol(mbTrans1575)
    argvalue2 := interfaces.NewUint64()
    err1579 := argvalue2.Read(context.Background(), jsProt1578)
    if err1579 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1580 := flag.Arg(4)
    mbTrans1581 := thrift.NewTMemoryBufferLen(len(arg1580))
    defer mbTrans1581.Close()
    _, err1582 := mbTrans1581.WriteString(arg1580)
    if err1582 != nil {
      Usage()
      return
    }
    factory1583 := thrift.NewTJSONProtocolFactory()
    jsProt1584 := factory1583.GetProtocol(mbTrans1581)
    argvalue3 := interfaces.NewUint64()
    err1585 := argvalue3.Read(context.Background(), jsProt1584)
    if err1585 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1586 := flag.Arg(1)
    mbTrans1587 := thrift.NewTMemoryBufferLen(len(arg1586))
    defer mbTrans1587.Close()
    _, err1588 := mbTrans1587.WriteString(arg1586)
    if err1588 != nil {
      Usage()
      return
    }
    factory1589 := thrift.NewTJSONProtocolFactory()
    jsProt1590 := factory1589.GetProtocol(mbTrans1587)
    argvalue0 := interfaces.NewUint64()
    err1591 := argvalue0.Read(context.Background(), jsProt1590)
    if err1591 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1592 := flag.Arg(2)
    mbTrans1593 := thrift.NewTMemoryBufferLen(len(arg1592))
    defer mbTrans1593.Close()
    _, err1594 := mbTrans1593.WriteString(arg1592)
    if err1594 != nil {
      Usage()
      return
    }
    factory1595 := thrift.NewTJSONProtocolFactory()
    jsProt1596 := factory1595.GetProtocol(mbTrans1593)
    argvalue1 := interfaces.NewUint64()
    err1597 := argvalue1.Read(context.Background(), jsProt1596)
    if err1597 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1598 := flag.Arg(3)
    mbTrans1599 := thrift.NewTMemoryBufferLen(len(arg1598))
    defer mbTrans1599.Close()
    _, err1600 := mbTrans1599.WriteString(arg1598)
    if err1600 != nil {
      Usage()
      return
    }
    factory1601 := thrift.NewTJSONProtocolFactory()
    jsProt1602 := factory1601.GetProtocol(mbTrans1599)
    argvalue2 := interfaces.NewUint64()
    err1603 := argvalue2.Read(context.Background(), jsProt1602)
    if err1603 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1605 := flag.Arg(1)
    mbTrans1606 := thrift.NewTMemoryBufferLen(len(arg1605))
    defer mbTrans1606.Close()
    _, err1607 := mbTrans1606.WriteString(arg1605)
    if err1607 != nil {
      Usage()
      return
    }
    factory1608 := thrift.NewTJSONProtocolFactory()
    jsProt1609 := factory1608.GetProtocol(mbTrans1606)
    argvalue0 := interfaces.NewUint64()
    err1610 := argvalue0.Read(context.Background(), jsProt1609)
    if err1610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1611 := flag.Arg(2)
    mbTrans1612 := thrift.NewTMemoryBufferLen(len(arg1611))
    defer mbTrans1612.Close()
    _, err1613 := mbTrans1612.WriteString(arg1611)
    if err1613 != nil {
      Usage()
      return
    }
    factory1614 := thrift.NewTJSONProtocolFactory()
    jsProt1615 := factory1614.GetProtocol(mbTrans1612)
    argvalue1 := interfaces.NewUint64()
    err1616 := argvalue1.Read(context.Background(), jsProt1615)
    if err1616 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1617 := flag.Arg(3)
    mbTrans1618 := thrift.NewTMemoryBufferLen(len(arg1617))
    defer mbTrans1618.Close()
    _, err1619 := mbTrans1618.WriteString(arg1617)
    if err1619 != nil {
      Usage()
      return
    }
    factory1620 := thrift.NewTJSONProtocolFactory()
    jsProt1621 := factory1620.GetProtocol(mbTrans1618)
    argvalue2 := interfaces.NewUint64()
    err1622 := argvalue2.Read(context.Background(), jsProt1621)
    if err1622 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1624 := flag.Arg(5)
    mbTrans1625 := thrift.NewTMemoryBufferLen(len(arg1624))
    defer mbTrans1625.Close()
    _, err1626 := mbTrans1625.WriteString(arg1624)
    if err1626 != nil {
      Usage()
      return
    }
    factory1627 := thrift.NewTJSONProtocolFactory()
    jsProt1628 := factory1627.GetProtocol(mbTrans1625)
    argvalue4 := interfaces.NewUint64()
    err1629 := argvalue4.Read(context.Background(), jsProt1628)
    if err1629 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1630 := flag.Arg(1)
    mbTrans1631 := thrift.NewTMemoryBufferLen(len(arg1630))
    defer mbTrans1631.Close()
    _, err1632 := mbTrans1631.WriteString(arg1630)
    if err1632 != nil {
      Usage()
      return
    }
    factory1633 := thrift.NewTJSONProtocolFactory()
    jsProt1634 := factory1633.GetProtocol(mbTrans1631)
    argvalue0 := interfaces.NewUint64()
    err1635 := argvalue0.Read(context.Background(), jsProt1634)
    if err1635 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1636 := flag.Arg(2)
    mbTrans1637 := thrift.NewTMemoryBufferLen(len(arg1636))
    defer mbTrans1637.Close()
    _, err1638 := mbTrans1637.WriteString(arg1636)
    if err1638 != nil {
      Usage()
      return
    }
    factory1639 := thrift.NewTJSONProtocolFactory()
    jsProt1640 := factory1639.GetProtocol(mbTrans1637)
    argvalue1 := interfaces.NewUint64()
    err1641 := argvalue1.Read(context.Background(), jsProt1640)
    if err1641 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1642 := flag.Arg(3)
    mbTrans1643 := thrift.NewTMemoryBufferLen(len(arg1642))
    defer mbTrans1643.Close()
    _, err1644 := mbTrans1643.WriteString(arg1642)
    if err1644 != nil {
      Usage()
      return
    }
    factory1645 := thrift.NewTJSONProtocolFactory()
    jsProt1646 := factory1645.GetProtocol(mbTrans1643)
    argvalue2 := interfaces.NewUint64()
    err1647 := argvalue2.Read(context.Background(), jsProt1646)
    if err1647 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1649 := flag.Arg(5)
    mbTrans1650 := thrift.NewTMemoryBufferLen(len(arg1649))
    defer mbTrans1650.Close()
    _, err1651 := mbTrans1650.WriteString(arg1649)
    if err1651 != nil {
      Usage()
      return
    }
    factory1652 := thrift.NewTJSONProtocolFactory()
    jsProt1653 := factory1652.GetProtocol(mbTrans1650)
    argvalue4 := interfaces.NewUint64()
    err1654 := argvalue4.Read(context.Background(), jsProt1653)
    if err1654 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1655 := flag.Arg(1)
    mbTrans1656 := thrift.NewTMemoryBufferLen(len(arg1655))
    defer mbTrans1656.Close()
    _, err1657 := mbTrans1656.WriteString(arg1655)
    if err1657 != nil {
      Usage()
      return
    }
    factory1658 := thrift.NewTJSONProtocolFactory()
    jsProt1659 := factory1658.GetProtocol(mbTrans1656)
    argvalue0 := interfaces.NewUint64()
    err1660 := argvalue0.Read(context.Background(), jsProt1659)
    if err1660 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1661 := flag.Arg(2)
    mbTrans1662 := thrift.NewTMemoryBufferLen(len(arg1661))
    defer mbTrans1662.Close()
    _, err1663 := mbTrans1662.WriteString(arg1661)
    if err1663 != nil {
      Usage()
      return
    }
    factory1664 := thrift.NewTJSONProtocolFactory()
    jsProt1665 := factory1664.GetProtocol(mbTrans1662)
    argvalue1 := interfaces.NewUint64()
    err1666 := argvalue1.Read(context.Background(), jsProt1665)
    if err1666 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1667 := flag.Arg(3)
    mbTrans1668 := thrift.NewTMemoryBufferLen(len(arg1667))
    defer mbTrans1668.Close()
    _, err1669 := mbTrans1668.WriteString(arg1667)
    if err1669 != nil {
      Usage()
      return
    }
    factory1670 := thrift.NewTJSONProtocolFactory()
    jsProt1671 := factory1670.GetProtocol(mbTrans1668)
    argvalue2 := interfaces.NewUint64()
    err1672 := argvalue2.Read(context.Background(), jsProt1671)
    if err1672 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_action_return_value":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetActionReturnValue requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetActionReturnValue(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_code_hash":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetCodeHash requires 2 args")
      flag.Usage()
    }
    arg1674 := flag.Arg(1)
    mbTrans1675 := thrift.NewTMemoryBufferLen(len(arg1674))
    defer mbTrans1675.Close()
    _, err1676 := mbTrans1675.WriteString(arg1674)
    if err1676 != nil {
      Usage()
      return
    }
    factory1677 := thrift.NewTJSONProtocolFactory()
    jsProt1678 := factory1677.GetProtocol(mbTrans1675)
    argvalue0 := interfaces.NewUint64()
    err1679 := argvalue0.Read(context.Background(), jsProt1678)
    if err1679 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err1680 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1680 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetCodeHash(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "sha3":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Sha3 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    tmp1, err1682 := (strconv.Atoi(flag.Arg(2)))
    if err1682 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Sha3(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blake2_f":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "Blake2F requires 6 args")
      flag.Usage()
    }
    argvalue0, err1683 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1683 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    tmp5, err1688 := (strconv.Atoi(flag.Arg(6)))
    if err1688 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.Blake2F(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "k1_recover":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "K1Recover requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.K1Recover(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_add":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Add requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Add(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_mul":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AltBn128Mul requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AltBn128Mul(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alt_bn128_pair":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AltBn128Pair requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.AltBn128Pair(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mod_exp":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ModExp requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.ModExp(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
