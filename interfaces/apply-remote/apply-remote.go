// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  DataBuffer db_get_i64(i32 iterator, i32 data_size)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err469 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err469 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg470 := flag.Arg(1)
    mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
    defer mbTrans471.Close()
    _, err472 := mbTrans471.WriteString(arg470)
    if err472 != nil {
      Usage()
      return
    }
    factory473 := thrift.NewTJSONProtocolFactory()
    jsProt474 := factory473.GetProtocol(mbTrans471)
    argvalue0 := interfaces.NewUint64()
    err475 := argvalue0.Read(context.Background(), jsProt474)
    if err475 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg481 := flag.Arg(1)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue0 := interfaces.NewUint64()
    err486 := argvalue0.Read(context.Background(), jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg488 := flag.Arg(1)
    mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
    defer mbTrans489.Close()
    _, err490 := mbTrans489.WriteString(arg488)
    if err490 != nil {
      Usage()
      return
    }
    factory491 := thrift.NewTJSONProtocolFactory()
    jsProt492 := factory491.GetProtocol(mbTrans489)
    argvalue0 := interfaces.NewUint64()
    err493 := argvalue0.Read(context.Background(), jsProt492)
    if err493 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg494 := flag.Arg(1)
    mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil {
      Usage()
      return
    }
    factory497 := thrift.NewTJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    argvalue0 := interfaces.NewUint64()
    err499 := argvalue0.Read(context.Background(), jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg500 := flag.Arg(1)
    mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil {
      Usage()
      return
    }
    factory503 := thrift.NewTJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    argvalue0 := interfaces.NewUint64()
    err505 := argvalue0.Read(context.Background(), jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg506 := flag.Arg(1)
    mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
    defer mbTrans507.Close()
    _, err508 := mbTrans507.WriteString(arg506)
    if err508 != nil {
      Usage()
      return
    }
    factory509 := thrift.NewTJSONProtocolFactory()
    jsProt510 := factory509.GetProtocol(mbTrans507)
    argvalue0 := interfaces.NewUint64()
    err511 := argvalue0.Read(context.Background(), jsProt510)
    if err511 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg512 := flag.Arg(2)
    mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil {
      Usage()
      return
    }
    factory515 := thrift.NewTJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    argvalue1 := interfaces.NewUint64()
    err517 := argvalue1.Read(context.Background(), jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg518 := flag.Arg(1)
    mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
    defer mbTrans519.Close()
    _, err520 := mbTrans519.WriteString(arg518)
    if err520 != nil {
      Usage()
      return
    }
    factory521 := thrift.NewTJSONProtocolFactory()
    jsProt522 := factory521.GetProtocol(mbTrans519)
    argvalue0 := interfaces.NewUint64()
    err523 := argvalue0.Read(context.Background(), jsProt522)
    if err523 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg531 := flag.Arg(2)
    mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
    defer mbTrans532.Close()
    _, err533 := mbTrans532.WriteString(arg531)
    if err533 != nil {
      Usage()
      return
    }
    factory534 := thrift.NewTJSONProtocolFactory()
    jsProt535 := factory534.GetProtocol(mbTrans532)
    argvalue1 := interfaces.NewUint64()
    err536 := argvalue1.Read(context.Background(), jsProt535)
    if err536 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err537 := (strconv.Atoi(flag.Arg(1)))
    if err537 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg557 := flag.Arg(2)
    mbTrans558 := thrift.NewTMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewTJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue1 := interfaces.NewUint64()
    err562 := argvalue1.Read(context.Background(), jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err564 := (strconv.Atoi(flag.Arg(4)))
    if err564 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err566 := (strconv.Atoi(flag.Arg(1)))
    if err566 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err567 := (strconv.Atoi(flag.Arg(2)))
    if err567 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err568 := (strconv.Atoi(flag.Arg(1)))
    if err568 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg569 := flag.Arg(1)
    mbTrans570 := thrift.NewTMemoryBufferLen(len(arg569))
    defer mbTrans570.Close()
    _, err571 := mbTrans570.WriteString(arg569)
    if err571 != nil {
      Usage()
      return
    }
    factory572 := thrift.NewTJSONProtocolFactory()
    jsProt573 := factory572.GetProtocol(mbTrans570)
    argvalue0 := interfaces.NewUint64()
    err574 := argvalue0.Read(context.Background(), jsProt573)
    if err574 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg575 := flag.Arg(2)
    mbTrans576 := thrift.NewTMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewTJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue1 := interfaces.NewUint64()
    err580 := argvalue1.Read(context.Background(), jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg581 := flag.Arg(3)
    mbTrans582 := thrift.NewTMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewTJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue2 := interfaces.NewUint64()
    err586 := argvalue2.Read(context.Background(), jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg587 := flag.Arg(4)
    mbTrans588 := thrift.NewTMemoryBufferLen(len(arg587))
    defer mbTrans588.Close()
    _, err589 := mbTrans588.WriteString(arg587)
    if err589 != nil {
      Usage()
      return
    }
    factory590 := thrift.NewTJSONProtocolFactory()
    jsProt591 := factory590.GetProtocol(mbTrans588)
    argvalue3 := interfaces.NewUint64()
    err592 := argvalue3.Read(context.Background(), jsProt591)
    if err592 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err594 := (strconv.Atoi(flag.Arg(1)))
    if err594 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg595 := flag.Arg(2)
    mbTrans596 := thrift.NewTMemoryBufferLen(len(arg595))
    defer mbTrans596.Close()
    _, err597 := mbTrans596.WriteString(arg595)
    if err597 != nil {
      Usage()
      return
    }
    factory598 := thrift.NewTJSONProtocolFactory()
    jsProt599 := factory598.GetProtocol(mbTrans596)
    argvalue1 := interfaces.NewUint64()
    err600 := argvalue1.Read(context.Background(), jsProt599)
    if err600 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err602 := (strconv.Atoi(flag.Arg(1)))
    if err602 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 2 args")
      flag.Usage()
    }
    tmp0, err603 := (strconv.Atoi(flag.Arg(1)))
    if err603 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err604 := (strconv.Atoi(flag.Arg(2)))
    if err604 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.DbGetI64(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err605 := (strconv.Atoi(flag.Arg(1)))
    if err605 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err606 := (strconv.Atoi(flag.Arg(1)))
    if err606 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg607 := flag.Arg(1)
    mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
    defer mbTrans608.Close()
    _, err609 := mbTrans608.WriteString(arg607)
    if err609 != nil {
      Usage()
      return
    }
    factory610 := thrift.NewTJSONProtocolFactory()
    jsProt611 := factory610.GetProtocol(mbTrans608)
    argvalue0 := interfaces.NewUint64()
    err612 := argvalue0.Read(context.Background(), jsProt611)
    if err612 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg613 := flag.Arg(2)
    mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
    defer mbTrans614.Close()
    _, err615 := mbTrans614.WriteString(arg613)
    if err615 != nil {
      Usage()
      return
    }
    factory616 := thrift.NewTJSONProtocolFactory()
    jsProt617 := factory616.GetProtocol(mbTrans614)
    argvalue1 := interfaces.NewUint64()
    err618 := argvalue1.Read(context.Background(), jsProt617)
    if err618 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg619 := flag.Arg(3)
    mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
    defer mbTrans620.Close()
    _, err621 := mbTrans620.WriteString(arg619)
    if err621 != nil {
      Usage()
      return
    }
    factory622 := thrift.NewTJSONProtocolFactory()
    jsProt623 := factory622.GetProtocol(mbTrans620)
    argvalue2 := interfaces.NewUint64()
    err624 := argvalue2.Read(context.Background(), jsProt623)
    if err624 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg625 := flag.Arg(4)
    mbTrans626 := thrift.NewTMemoryBufferLen(len(arg625))
    defer mbTrans626.Close()
    _, err627 := mbTrans626.WriteString(arg625)
    if err627 != nil {
      Usage()
      return
    }
    factory628 := thrift.NewTJSONProtocolFactory()
    jsProt629 := factory628.GetProtocol(mbTrans626)
    argvalue3 := interfaces.NewUint64()
    err630 := argvalue3.Read(context.Background(), jsProt629)
    if err630 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg631 := flag.Arg(1)
    mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
    defer mbTrans632.Close()
    _, err633 := mbTrans632.WriteString(arg631)
    if err633 != nil {
      Usage()
      return
    }
    factory634 := thrift.NewTJSONProtocolFactory()
    jsProt635 := factory634.GetProtocol(mbTrans632)
    argvalue0 := interfaces.NewUint64()
    err636 := argvalue0.Read(context.Background(), jsProt635)
    if err636 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg637 := flag.Arg(2)
    mbTrans638 := thrift.NewTMemoryBufferLen(len(arg637))
    defer mbTrans638.Close()
    _, err639 := mbTrans638.WriteString(arg637)
    if err639 != nil {
      Usage()
      return
    }
    factory640 := thrift.NewTJSONProtocolFactory()
    jsProt641 := factory640.GetProtocol(mbTrans638)
    argvalue1 := interfaces.NewUint64()
    err642 := argvalue1.Read(context.Background(), jsProt641)
    if err642 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg643 := flag.Arg(3)
    mbTrans644 := thrift.NewTMemoryBufferLen(len(arg643))
    defer mbTrans644.Close()
    _, err645 := mbTrans644.WriteString(arg643)
    if err645 != nil {
      Usage()
      return
    }
    factory646 := thrift.NewTJSONProtocolFactory()
    jsProt647 := factory646.GetProtocol(mbTrans644)
    argvalue2 := interfaces.NewUint64()
    err648 := argvalue2.Read(context.Background(), jsProt647)
    if err648 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg649 := flag.Arg(4)
    mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
    defer mbTrans650.Close()
    _, err651 := mbTrans650.WriteString(arg649)
    if err651 != nil {
      Usage()
      return
    }
    factory652 := thrift.NewTJSONProtocolFactory()
    jsProt653 := factory652.GetProtocol(mbTrans650)
    argvalue3 := interfaces.NewUint64()
    err654 := argvalue3.Read(context.Background(), jsProt653)
    if err654 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg655 := flag.Arg(1)
    mbTrans656 := thrift.NewTMemoryBufferLen(len(arg655))
    defer mbTrans656.Close()
    _, err657 := mbTrans656.WriteString(arg655)
    if err657 != nil {
      Usage()
      return
    }
    factory658 := thrift.NewTJSONProtocolFactory()
    jsProt659 := factory658.GetProtocol(mbTrans656)
    argvalue0 := interfaces.NewUint64()
    err660 := argvalue0.Read(context.Background(), jsProt659)
    if err660 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg661 := flag.Arg(2)
    mbTrans662 := thrift.NewTMemoryBufferLen(len(arg661))
    defer mbTrans662.Close()
    _, err663 := mbTrans662.WriteString(arg661)
    if err663 != nil {
      Usage()
      return
    }
    factory664 := thrift.NewTJSONProtocolFactory()
    jsProt665 := factory664.GetProtocol(mbTrans662)
    argvalue1 := interfaces.NewUint64()
    err666 := argvalue1.Read(context.Background(), jsProt665)
    if err666 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg667 := flag.Arg(3)
    mbTrans668 := thrift.NewTMemoryBufferLen(len(arg667))
    defer mbTrans668.Close()
    _, err669 := mbTrans668.WriteString(arg667)
    if err669 != nil {
      Usage()
      return
    }
    factory670 := thrift.NewTJSONProtocolFactory()
    jsProt671 := factory670.GetProtocol(mbTrans668)
    argvalue2 := interfaces.NewUint64()
    err672 := argvalue2.Read(context.Background(), jsProt671)
    if err672 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg673 := flag.Arg(4)
    mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
    defer mbTrans674.Close()
    _, err675 := mbTrans674.WriteString(arg673)
    if err675 != nil {
      Usage()
      return
    }
    factory676 := thrift.NewTJSONProtocolFactory()
    jsProt677 := factory676.GetProtocol(mbTrans674)
    argvalue3 := interfaces.NewUint64()
    err678 := argvalue3.Read(context.Background(), jsProt677)
    if err678 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg679 := flag.Arg(1)
    mbTrans680 := thrift.NewTMemoryBufferLen(len(arg679))
    defer mbTrans680.Close()
    _, err681 := mbTrans680.WriteString(arg679)
    if err681 != nil {
      Usage()
      return
    }
    factory682 := thrift.NewTJSONProtocolFactory()
    jsProt683 := factory682.GetProtocol(mbTrans680)
    argvalue0 := interfaces.NewUint64()
    err684 := argvalue0.Read(context.Background(), jsProt683)
    if err684 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg685 := flag.Arg(2)
    mbTrans686 := thrift.NewTMemoryBufferLen(len(arg685))
    defer mbTrans686.Close()
    _, err687 := mbTrans686.WriteString(arg685)
    if err687 != nil {
      Usage()
      return
    }
    factory688 := thrift.NewTJSONProtocolFactory()
    jsProt689 := factory688.GetProtocol(mbTrans686)
    argvalue1 := interfaces.NewUint64()
    err690 := argvalue1.Read(context.Background(), jsProt689)
    if err690 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg691 := flag.Arg(3)
    mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
    defer mbTrans692.Close()
    _, err693 := mbTrans692.WriteString(arg691)
    if err693 != nil {
      Usage()
      return
    }
    factory694 := thrift.NewTJSONProtocolFactory()
    jsProt695 := factory694.GetProtocol(mbTrans692)
    argvalue2 := interfaces.NewUint64()
    err696 := argvalue2.Read(context.Background(), jsProt695)
    if err696 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg697 := flag.Arg(1)
    mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
    defer mbTrans698.Close()
    _, err699 := mbTrans698.WriteString(arg697)
    if err699 != nil {
      Usage()
      return
    }
    factory700 := thrift.NewTJSONProtocolFactory()
    jsProt701 := factory700.GetProtocol(mbTrans698)
    argvalue0 := interfaces.NewUint64()
    err702 := argvalue0.Read(context.Background(), jsProt701)
    if err702 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg703 := flag.Arg(2)
    mbTrans704 := thrift.NewTMemoryBufferLen(len(arg703))
    defer mbTrans704.Close()
    _, err705 := mbTrans704.WriteString(arg703)
    if err705 != nil {
      Usage()
      return
    }
    factory706 := thrift.NewTJSONProtocolFactory()
    jsProt707 := factory706.GetProtocol(mbTrans704)
    argvalue1 := interfaces.NewUint64()
    err708 := argvalue1.Read(context.Background(), jsProt707)
    if err708 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg709 := flag.Arg(3)
    mbTrans710 := thrift.NewTMemoryBufferLen(len(arg709))
    defer mbTrans710.Close()
    _, err711 := mbTrans710.WriteString(arg709)
    if err711 != nil {
      Usage()
      return
    }
    factory712 := thrift.NewTJSONProtocolFactory()
    jsProt713 := factory712.GetProtocol(mbTrans710)
    argvalue2 := interfaces.NewUint64()
    err714 := argvalue2.Read(context.Background(), jsProt713)
    if err714 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg715 := flag.Arg(4)
    mbTrans716 := thrift.NewTMemoryBufferLen(len(arg715))
    defer mbTrans716.Close()
    _, err717 := mbTrans716.WriteString(arg715)
    if err717 != nil {
      Usage()
      return
    }
    factory718 := thrift.NewTJSONProtocolFactory()
    jsProt719 := factory718.GetProtocol(mbTrans716)
    argvalue3 := interfaces.NewUint64()
    err720 := argvalue3.Read(context.Background(), jsProt719)
    if err720 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg721 := flag.Arg(5)
    mbTrans722 := thrift.NewTMemoryBufferLen(len(arg721))
    defer mbTrans722.Close()
    _, err723 := mbTrans722.WriteString(arg721)
    if err723 != nil {
      Usage()
      return
    }
    factory724 := thrift.NewTJSONProtocolFactory()
    jsProt725 := factory724.GetProtocol(mbTrans722)
    argvalue4 := interfaces.NewUint64()
    err726 := argvalue4.Read(context.Background(), jsProt725)
    if err726 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err727 := (strconv.Atoi(flag.Arg(1)))
    if err727 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg728 := flag.Arg(2)
    mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewTJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue1 := interfaces.NewUint64()
    err733 := argvalue1.Read(context.Background(), jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg734 := flag.Arg(3)
    mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewTJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue2 := interfaces.NewUint64()
    err739 := argvalue2.Read(context.Background(), jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err740 := (strconv.Atoi(flag.Arg(1)))
    if err740 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err741 := (strconv.Atoi(flag.Arg(1)))
    if err741 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err742 := (strconv.Atoi(flag.Arg(1)))
    if err742 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg743 := flag.Arg(1)
    mbTrans744 := thrift.NewTMemoryBufferLen(len(arg743))
    defer mbTrans744.Close()
    _, err745 := mbTrans744.WriteString(arg743)
    if err745 != nil {
      Usage()
      return
    }
    factory746 := thrift.NewTJSONProtocolFactory()
    jsProt747 := factory746.GetProtocol(mbTrans744)
    argvalue0 := interfaces.NewUint64()
    err748 := argvalue0.Read(context.Background(), jsProt747)
    if err748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg749 := flag.Arg(2)
    mbTrans750 := thrift.NewTMemoryBufferLen(len(arg749))
    defer mbTrans750.Close()
    _, err751 := mbTrans750.WriteString(arg749)
    if err751 != nil {
      Usage()
      return
    }
    factory752 := thrift.NewTJSONProtocolFactory()
    jsProt753 := factory752.GetProtocol(mbTrans750)
    argvalue1 := interfaces.NewUint64()
    err754 := argvalue1.Read(context.Background(), jsProt753)
    if err754 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg755 := flag.Arg(3)
    mbTrans756 := thrift.NewTMemoryBufferLen(len(arg755))
    defer mbTrans756.Close()
    _, err757 := mbTrans756.WriteString(arg755)
    if err757 != nil {
      Usage()
      return
    }
    factory758 := thrift.NewTJSONProtocolFactory()
    jsProt759 := factory758.GetProtocol(mbTrans756)
    argvalue2 := interfaces.NewUint64()
    err760 := argvalue2.Read(context.Background(), jsProt759)
    if err760 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg761 := flag.Arg(4)
    mbTrans762 := thrift.NewTMemoryBufferLen(len(arg761))
    defer mbTrans762.Close()
    _, err763 := mbTrans762.WriteString(arg761)
    if err763 != nil {
      Usage()
      return
    }
    factory764 := thrift.NewTJSONProtocolFactory()
    jsProt765 := factory764.GetProtocol(mbTrans762)
    argvalue3 := interfaces.NewUint64()
    err766 := argvalue3.Read(context.Background(), jsProt765)
    if err766 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg767 := flag.Arg(1)
    mbTrans768 := thrift.NewTMemoryBufferLen(len(arg767))
    defer mbTrans768.Close()
    _, err769 := mbTrans768.WriteString(arg767)
    if err769 != nil {
      Usage()
      return
    }
    factory770 := thrift.NewTJSONProtocolFactory()
    jsProt771 := factory770.GetProtocol(mbTrans768)
    argvalue0 := interfaces.NewUint64()
    err772 := argvalue0.Read(context.Background(), jsProt771)
    if err772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg773 := flag.Arg(2)
    mbTrans774 := thrift.NewTMemoryBufferLen(len(arg773))
    defer mbTrans774.Close()
    _, err775 := mbTrans774.WriteString(arg773)
    if err775 != nil {
      Usage()
      return
    }
    factory776 := thrift.NewTJSONProtocolFactory()
    jsProt777 := factory776.GetProtocol(mbTrans774)
    argvalue1 := interfaces.NewUint64()
    err778 := argvalue1.Read(context.Background(), jsProt777)
    if err778 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg779 := flag.Arg(3)
    mbTrans780 := thrift.NewTMemoryBufferLen(len(arg779))
    defer mbTrans780.Close()
    _, err781 := mbTrans780.WriteString(arg779)
    if err781 != nil {
      Usage()
      return
    }
    factory782 := thrift.NewTJSONProtocolFactory()
    jsProt783 := factory782.GetProtocol(mbTrans780)
    argvalue2 := interfaces.NewUint64()
    err784 := argvalue2.Read(context.Background(), jsProt783)
    if err784 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg785 := flag.Arg(4)
    mbTrans786 := thrift.NewTMemoryBufferLen(len(arg785))
    defer mbTrans786.Close()
    _, err787 := mbTrans786.WriteString(arg785)
    if err787 != nil {
      Usage()
      return
    }
    factory788 := thrift.NewTJSONProtocolFactory()
    jsProt789 := factory788.GetProtocol(mbTrans786)
    argvalue3 := interfaces.NewUint64()
    err790 := argvalue3.Read(context.Background(), jsProt789)
    if err790 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg791 := flag.Arg(1)
    mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewTJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue0 := interfaces.NewUint64()
    err796 := argvalue0.Read(context.Background(), jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg797 := flag.Arg(2)
    mbTrans798 := thrift.NewTMemoryBufferLen(len(arg797))
    defer mbTrans798.Close()
    _, err799 := mbTrans798.WriteString(arg797)
    if err799 != nil {
      Usage()
      return
    }
    factory800 := thrift.NewTJSONProtocolFactory()
    jsProt801 := factory800.GetProtocol(mbTrans798)
    argvalue1 := interfaces.NewUint64()
    err802 := argvalue1.Read(context.Background(), jsProt801)
    if err802 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg803 := flag.Arg(3)
    mbTrans804 := thrift.NewTMemoryBufferLen(len(arg803))
    defer mbTrans804.Close()
    _, err805 := mbTrans804.WriteString(arg803)
    if err805 != nil {
      Usage()
      return
    }
    factory806 := thrift.NewTJSONProtocolFactory()
    jsProt807 := factory806.GetProtocol(mbTrans804)
    argvalue2 := interfaces.NewUint64()
    err808 := argvalue2.Read(context.Background(), jsProt807)
    if err808 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg809 := flag.Arg(4)
    mbTrans810 := thrift.NewTMemoryBufferLen(len(arg809))
    defer mbTrans810.Close()
    _, err811 := mbTrans810.WriteString(arg809)
    if err811 != nil {
      Usage()
      return
    }
    factory812 := thrift.NewTJSONProtocolFactory()
    jsProt813 := factory812.GetProtocol(mbTrans810)
    argvalue3 := interfaces.NewUint64()
    err814 := argvalue3.Read(context.Background(), jsProt813)
    if err814 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg815 := flag.Arg(5)
    mbTrans816 := thrift.NewTMemoryBufferLen(len(arg815))
    defer mbTrans816.Close()
    _, err817 := mbTrans816.WriteString(arg815)
    if err817 != nil {
      Usage()
      return
    }
    factory818 := thrift.NewTJSONProtocolFactory()
    jsProt819 := factory818.GetProtocol(mbTrans816)
    argvalue4 := interfaces.NewUint64()
    err820 := argvalue4.Read(context.Background(), jsProt819)
    if err820 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg821 := flag.Arg(1)
    mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewTJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue0 := interfaces.NewUint64()
    err826 := argvalue0.Read(context.Background(), jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg827 := flag.Arg(2)
    mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
    defer mbTrans828.Close()
    _, err829 := mbTrans828.WriteString(arg827)
    if err829 != nil {
      Usage()
      return
    }
    factory830 := thrift.NewTJSONProtocolFactory()
    jsProt831 := factory830.GetProtocol(mbTrans828)
    argvalue1 := interfaces.NewUint64()
    err832 := argvalue1.Read(context.Background(), jsProt831)
    if err832 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg833 := flag.Arg(3)
    mbTrans834 := thrift.NewTMemoryBufferLen(len(arg833))
    defer mbTrans834.Close()
    _, err835 := mbTrans834.WriteString(arg833)
    if err835 != nil {
      Usage()
      return
    }
    factory836 := thrift.NewTJSONProtocolFactory()
    jsProt837 := factory836.GetProtocol(mbTrans834)
    argvalue2 := interfaces.NewUint64()
    err838 := argvalue2.Read(context.Background(), jsProt837)
    if err838 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg839 := flag.Arg(4)
    mbTrans840 := thrift.NewTMemoryBufferLen(len(arg839))
    defer mbTrans840.Close()
    _, err841 := mbTrans840.WriteString(arg839)
    if err841 != nil {
      Usage()
      return
    }
    factory842 := thrift.NewTJSONProtocolFactory()
    jsProt843 := factory842.GetProtocol(mbTrans840)
    argvalue3 := interfaces.NewUint64()
    err844 := argvalue3.Read(context.Background(), jsProt843)
    if err844 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg845 := flag.Arg(5)
    mbTrans846 := thrift.NewTMemoryBufferLen(len(arg845))
    defer mbTrans846.Close()
    _, err847 := mbTrans846.WriteString(arg845)
    if err847 != nil {
      Usage()
      return
    }
    factory848 := thrift.NewTJSONProtocolFactory()
    jsProt849 := factory848.GetProtocol(mbTrans846)
    argvalue4 := interfaces.NewUint64()
    err850 := argvalue4.Read(context.Background(), jsProt849)
    if err850 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg851 := flag.Arg(1)
    mbTrans852 := thrift.NewTMemoryBufferLen(len(arg851))
    defer mbTrans852.Close()
    _, err853 := mbTrans852.WriteString(arg851)
    if err853 != nil {
      Usage()
      return
    }
    factory854 := thrift.NewTJSONProtocolFactory()
    jsProt855 := factory854.GetProtocol(mbTrans852)
    argvalue0 := interfaces.NewUint64()
    err856 := argvalue0.Read(context.Background(), jsProt855)
    if err856 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg857 := flag.Arg(2)
    mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil {
      Usage()
      return
    }
    factory860 := thrift.NewTJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    argvalue1 := interfaces.NewUint64()
    err862 := argvalue1.Read(context.Background(), jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg863 := flag.Arg(3)
    mbTrans864 := thrift.NewTMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewTJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue2 := interfaces.NewUint64()
    err868 := argvalue2.Read(context.Background(), jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg869 := flag.Arg(1)
    mbTrans870 := thrift.NewTMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewTJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue0 := interfaces.NewUint64()
    err874 := argvalue0.Read(context.Background(), jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg875 := flag.Arg(2)
    mbTrans876 := thrift.NewTMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewTJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue1 := interfaces.NewUint64()
    err880 := argvalue1.Read(context.Background(), jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg881 := flag.Arg(3)
    mbTrans882 := thrift.NewTMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewTJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue2 := interfaces.NewUint64()
    err886 := argvalue2.Read(context.Background(), jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg887 := flag.Arg(4)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue3 := interfaces.NewUint64()
    err892 := argvalue3.Read(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err894 := (strconv.Atoi(flag.Arg(1)))
    if err894 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg895 := flag.Arg(2)
    mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
    defer mbTrans896.Close()
    _, err897 := mbTrans896.WriteString(arg895)
    if err897 != nil {
      Usage()
      return
    }
    factory898 := thrift.NewTJSONProtocolFactory()
    jsProt899 := factory898.GetProtocol(mbTrans896)
    argvalue1 := interfaces.NewUint64()
    err900 := argvalue1.Read(context.Background(), jsProt899)
    if err900 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err902 := (strconv.Atoi(flag.Arg(1)))
    if err902 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err903 := (strconv.Atoi(flag.Arg(1)))
    if err903 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err904 := (strconv.Atoi(flag.Arg(1)))
    if err904 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg905 := flag.Arg(1)
    mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
    defer mbTrans906.Close()
    _, err907 := mbTrans906.WriteString(arg905)
    if err907 != nil {
      Usage()
      return
    }
    factory908 := thrift.NewTJSONProtocolFactory()
    jsProt909 := factory908.GetProtocol(mbTrans906)
    argvalue0 := interfaces.NewUint64()
    err910 := argvalue0.Read(context.Background(), jsProt909)
    if err910 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg911 := flag.Arg(2)
    mbTrans912 := thrift.NewTMemoryBufferLen(len(arg911))
    defer mbTrans912.Close()
    _, err913 := mbTrans912.WriteString(arg911)
    if err913 != nil {
      Usage()
      return
    }
    factory914 := thrift.NewTJSONProtocolFactory()
    jsProt915 := factory914.GetProtocol(mbTrans912)
    argvalue1 := interfaces.NewUint64()
    err916 := argvalue1.Read(context.Background(), jsProt915)
    if err916 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg917 := flag.Arg(3)
    mbTrans918 := thrift.NewTMemoryBufferLen(len(arg917))
    defer mbTrans918.Close()
    _, err919 := mbTrans918.WriteString(arg917)
    if err919 != nil {
      Usage()
      return
    }
    factory920 := thrift.NewTJSONProtocolFactory()
    jsProt921 := factory920.GetProtocol(mbTrans918)
    argvalue2 := interfaces.NewUint64()
    err922 := argvalue2.Read(context.Background(), jsProt921)
    if err922 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg923 := flag.Arg(4)
    mbTrans924 := thrift.NewTMemoryBufferLen(len(arg923))
    defer mbTrans924.Close()
    _, err925 := mbTrans924.WriteString(arg923)
    if err925 != nil {
      Usage()
      return
    }
    factory926 := thrift.NewTJSONProtocolFactory()
    jsProt927 := factory926.GetProtocol(mbTrans924)
    argvalue3 := interfaces.NewUint64()
    err928 := argvalue3.Read(context.Background(), jsProt927)
    if err928 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg929 := flag.Arg(1)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue0 := interfaces.NewUint64()
    err934 := argvalue0.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg935 := flag.Arg(2)
    mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
    defer mbTrans936.Close()
    _, err937 := mbTrans936.WriteString(arg935)
    if err937 != nil {
      Usage()
      return
    }
    factory938 := thrift.NewTJSONProtocolFactory()
    jsProt939 := factory938.GetProtocol(mbTrans936)
    argvalue1 := interfaces.NewUint64()
    err940 := argvalue1.Read(context.Background(), jsProt939)
    if err940 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg941 := flag.Arg(3)
    mbTrans942 := thrift.NewTMemoryBufferLen(len(arg941))
    defer mbTrans942.Close()
    _, err943 := mbTrans942.WriteString(arg941)
    if err943 != nil {
      Usage()
      return
    }
    factory944 := thrift.NewTJSONProtocolFactory()
    jsProt945 := factory944.GetProtocol(mbTrans942)
    argvalue2 := interfaces.NewUint64()
    err946 := argvalue2.Read(context.Background(), jsProt945)
    if err946 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg948 := flag.Arg(1)
    mbTrans949 := thrift.NewTMemoryBufferLen(len(arg948))
    defer mbTrans949.Close()
    _, err950 := mbTrans949.WriteString(arg948)
    if err950 != nil {
      Usage()
      return
    }
    factory951 := thrift.NewTJSONProtocolFactory()
    jsProt952 := factory951.GetProtocol(mbTrans949)
    argvalue0 := interfaces.NewUint64()
    err953 := argvalue0.Read(context.Background(), jsProt952)
    if err953 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg954 := flag.Arg(2)
    mbTrans955 := thrift.NewTMemoryBufferLen(len(arg954))
    defer mbTrans955.Close()
    _, err956 := mbTrans955.WriteString(arg954)
    if err956 != nil {
      Usage()
      return
    }
    factory957 := thrift.NewTJSONProtocolFactory()
    jsProt958 := factory957.GetProtocol(mbTrans955)
    argvalue1 := interfaces.NewUint64()
    err959 := argvalue1.Read(context.Background(), jsProt958)
    if err959 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg960 := flag.Arg(3)
    mbTrans961 := thrift.NewTMemoryBufferLen(len(arg960))
    defer mbTrans961.Close()
    _, err962 := mbTrans961.WriteString(arg960)
    if err962 != nil {
      Usage()
      return
    }
    factory963 := thrift.NewTJSONProtocolFactory()
    jsProt964 := factory963.GetProtocol(mbTrans961)
    argvalue2 := interfaces.NewUint64()
    err965 := argvalue2.Read(context.Background(), jsProt964)
    if err965 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg967 := flag.Arg(5)
    mbTrans968 := thrift.NewTMemoryBufferLen(len(arg967))
    defer mbTrans968.Close()
    _, err969 := mbTrans968.WriteString(arg967)
    if err969 != nil {
      Usage()
      return
    }
    factory970 := thrift.NewTJSONProtocolFactory()
    jsProt971 := factory970.GetProtocol(mbTrans968)
    argvalue4 := interfaces.NewUint64()
    err972 := argvalue4.Read(context.Background(), jsProt971)
    if err972 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg973 := flag.Arg(1)
    mbTrans974 := thrift.NewTMemoryBufferLen(len(arg973))
    defer mbTrans974.Close()
    _, err975 := mbTrans974.WriteString(arg973)
    if err975 != nil {
      Usage()
      return
    }
    factory976 := thrift.NewTJSONProtocolFactory()
    jsProt977 := factory976.GetProtocol(mbTrans974)
    argvalue0 := interfaces.NewUint64()
    err978 := argvalue0.Read(context.Background(), jsProt977)
    if err978 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg979 := flag.Arg(2)
    mbTrans980 := thrift.NewTMemoryBufferLen(len(arg979))
    defer mbTrans980.Close()
    _, err981 := mbTrans980.WriteString(arg979)
    if err981 != nil {
      Usage()
      return
    }
    factory982 := thrift.NewTJSONProtocolFactory()
    jsProt983 := factory982.GetProtocol(mbTrans980)
    argvalue1 := interfaces.NewUint64()
    err984 := argvalue1.Read(context.Background(), jsProt983)
    if err984 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg985 := flag.Arg(3)
    mbTrans986 := thrift.NewTMemoryBufferLen(len(arg985))
    defer mbTrans986.Close()
    _, err987 := mbTrans986.WriteString(arg985)
    if err987 != nil {
      Usage()
      return
    }
    factory988 := thrift.NewTJSONProtocolFactory()
    jsProt989 := factory988.GetProtocol(mbTrans986)
    argvalue2 := interfaces.NewUint64()
    err990 := argvalue2.Read(context.Background(), jsProt989)
    if err990 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg992 := flag.Arg(5)
    mbTrans993 := thrift.NewTMemoryBufferLen(len(arg992))
    defer mbTrans993.Close()
    _, err994 := mbTrans993.WriteString(arg992)
    if err994 != nil {
      Usage()
      return
    }
    factory995 := thrift.NewTJSONProtocolFactory()
    jsProt996 := factory995.GetProtocol(mbTrans993)
    argvalue4 := interfaces.NewUint64()
    err997 := argvalue4.Read(context.Background(), jsProt996)
    if err997 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg998 := flag.Arg(1)
    mbTrans999 := thrift.NewTMemoryBufferLen(len(arg998))
    defer mbTrans999.Close()
    _, err1000 := mbTrans999.WriteString(arg998)
    if err1000 != nil {
      Usage()
      return
    }
    factory1001 := thrift.NewTJSONProtocolFactory()
    jsProt1002 := factory1001.GetProtocol(mbTrans999)
    argvalue0 := interfaces.NewUint64()
    err1003 := argvalue0.Read(context.Background(), jsProt1002)
    if err1003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1004 := flag.Arg(2)
    mbTrans1005 := thrift.NewTMemoryBufferLen(len(arg1004))
    defer mbTrans1005.Close()
    _, err1006 := mbTrans1005.WriteString(arg1004)
    if err1006 != nil {
      Usage()
      return
    }
    factory1007 := thrift.NewTJSONProtocolFactory()
    jsProt1008 := factory1007.GetProtocol(mbTrans1005)
    argvalue1 := interfaces.NewUint64()
    err1009 := argvalue1.Read(context.Background(), jsProt1008)
    if err1009 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1010 := flag.Arg(3)
    mbTrans1011 := thrift.NewTMemoryBufferLen(len(arg1010))
    defer mbTrans1011.Close()
    _, err1012 := mbTrans1011.WriteString(arg1010)
    if err1012 != nil {
      Usage()
      return
    }
    factory1013 := thrift.NewTJSONProtocolFactory()
    jsProt1014 := factory1013.GetProtocol(mbTrans1011)
    argvalue2 := interfaces.NewUint64()
    err1015 := argvalue2.Read(context.Background(), jsProt1014)
    if err1015 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1016 := flag.Arg(1)
    mbTrans1017 := thrift.NewTMemoryBufferLen(len(arg1016))
    defer mbTrans1017.Close()
    _, err1018 := mbTrans1017.WriteString(arg1016)
    if err1018 != nil {
      Usage()
      return
    }
    factory1019 := thrift.NewTJSONProtocolFactory()
    jsProt1020 := factory1019.GetProtocol(mbTrans1017)
    argvalue0 := interfaces.NewUint64()
    err1021 := argvalue0.Read(context.Background(), jsProt1020)
    if err1021 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1022 := flag.Arg(2)
    mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
    defer mbTrans1023.Close()
    _, err1024 := mbTrans1023.WriteString(arg1022)
    if err1024 != nil {
      Usage()
      return
    }
    factory1025 := thrift.NewTJSONProtocolFactory()
    jsProt1026 := factory1025.GetProtocol(mbTrans1023)
    argvalue1 := interfaces.NewUint64()
    err1027 := argvalue1.Read(context.Background(), jsProt1026)
    if err1027 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1028 := flag.Arg(3)
    mbTrans1029 := thrift.NewTMemoryBufferLen(len(arg1028))
    defer mbTrans1029.Close()
    _, err1030 := mbTrans1029.WriteString(arg1028)
    if err1030 != nil {
      Usage()
      return
    }
    factory1031 := thrift.NewTJSONProtocolFactory()
    jsProt1032 := factory1031.GetProtocol(mbTrans1029)
    argvalue2 := interfaces.NewUint64()
    err1033 := argvalue2.Read(context.Background(), jsProt1032)
    if err1033 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1034 := flag.Arg(4)
    mbTrans1035 := thrift.NewTMemoryBufferLen(len(arg1034))
    defer mbTrans1035.Close()
    _, err1036 := mbTrans1035.WriteString(arg1034)
    if err1036 != nil {
      Usage()
      return
    }
    factory1037 := thrift.NewTJSONProtocolFactory()
    jsProt1038 := factory1037.GetProtocol(mbTrans1035)
    argvalue3 := interfaces.NewUint64()
    err1039 := argvalue3.Read(context.Background(), jsProt1038)
    if err1039 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1041 := (strconv.Atoi(flag.Arg(1)))
    if err1041 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1042 := flag.Arg(2)
    mbTrans1043 := thrift.NewTMemoryBufferLen(len(arg1042))
    defer mbTrans1043.Close()
    _, err1044 := mbTrans1043.WriteString(arg1042)
    if err1044 != nil {
      Usage()
      return
    }
    factory1045 := thrift.NewTJSONProtocolFactory()
    jsProt1046 := factory1045.GetProtocol(mbTrans1043)
    argvalue1 := interfaces.NewUint64()
    err1047 := argvalue1.Read(context.Background(), jsProt1046)
    if err1047 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1049 := (strconv.Atoi(flag.Arg(1)))
    if err1049 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1050 := (strconv.Atoi(flag.Arg(1)))
    if err1050 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1051 := (strconv.Atoi(flag.Arg(1)))
    if err1051 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1052 := flag.Arg(1)
    mbTrans1053 := thrift.NewTMemoryBufferLen(len(arg1052))
    defer mbTrans1053.Close()
    _, err1054 := mbTrans1053.WriteString(arg1052)
    if err1054 != nil {
      Usage()
      return
    }
    factory1055 := thrift.NewTJSONProtocolFactory()
    jsProt1056 := factory1055.GetProtocol(mbTrans1053)
    argvalue0 := interfaces.NewUint64()
    err1057 := argvalue0.Read(context.Background(), jsProt1056)
    if err1057 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1058 := flag.Arg(2)
    mbTrans1059 := thrift.NewTMemoryBufferLen(len(arg1058))
    defer mbTrans1059.Close()
    _, err1060 := mbTrans1059.WriteString(arg1058)
    if err1060 != nil {
      Usage()
      return
    }
    factory1061 := thrift.NewTJSONProtocolFactory()
    jsProt1062 := factory1061.GetProtocol(mbTrans1059)
    argvalue1 := interfaces.NewUint64()
    err1063 := argvalue1.Read(context.Background(), jsProt1062)
    if err1063 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1064 := flag.Arg(3)
    mbTrans1065 := thrift.NewTMemoryBufferLen(len(arg1064))
    defer mbTrans1065.Close()
    _, err1066 := mbTrans1065.WriteString(arg1064)
    if err1066 != nil {
      Usage()
      return
    }
    factory1067 := thrift.NewTJSONProtocolFactory()
    jsProt1068 := factory1067.GetProtocol(mbTrans1065)
    argvalue2 := interfaces.NewUint64()
    err1069 := argvalue2.Read(context.Background(), jsProt1068)
    if err1069 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1070 := flag.Arg(4)
    mbTrans1071 := thrift.NewTMemoryBufferLen(len(arg1070))
    defer mbTrans1071.Close()
    _, err1072 := mbTrans1071.WriteString(arg1070)
    if err1072 != nil {
      Usage()
      return
    }
    factory1073 := thrift.NewTJSONProtocolFactory()
    jsProt1074 := factory1073.GetProtocol(mbTrans1071)
    argvalue3 := interfaces.NewUint64()
    err1075 := argvalue3.Read(context.Background(), jsProt1074)
    if err1075 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1076 := flag.Arg(1)
    mbTrans1077 := thrift.NewTMemoryBufferLen(len(arg1076))
    defer mbTrans1077.Close()
    _, err1078 := mbTrans1077.WriteString(arg1076)
    if err1078 != nil {
      Usage()
      return
    }
    factory1079 := thrift.NewTJSONProtocolFactory()
    jsProt1080 := factory1079.GetProtocol(mbTrans1077)
    argvalue0 := interfaces.NewUint64()
    err1081 := argvalue0.Read(context.Background(), jsProt1080)
    if err1081 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1082 := flag.Arg(2)
    mbTrans1083 := thrift.NewTMemoryBufferLen(len(arg1082))
    defer mbTrans1083.Close()
    _, err1084 := mbTrans1083.WriteString(arg1082)
    if err1084 != nil {
      Usage()
      return
    }
    factory1085 := thrift.NewTJSONProtocolFactory()
    jsProt1086 := factory1085.GetProtocol(mbTrans1083)
    argvalue1 := interfaces.NewUint64()
    err1087 := argvalue1.Read(context.Background(), jsProt1086)
    if err1087 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1088 := flag.Arg(3)
    mbTrans1089 := thrift.NewTMemoryBufferLen(len(arg1088))
    defer mbTrans1089.Close()
    _, err1090 := mbTrans1089.WriteString(arg1088)
    if err1090 != nil {
      Usage()
      return
    }
    factory1091 := thrift.NewTJSONProtocolFactory()
    jsProt1092 := factory1091.GetProtocol(mbTrans1089)
    argvalue2 := interfaces.NewUint64()
    err1093 := argvalue2.Read(context.Background(), jsProt1092)
    if err1093 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1095 := flag.Arg(1)
    mbTrans1096 := thrift.NewTMemoryBufferLen(len(arg1095))
    defer mbTrans1096.Close()
    _, err1097 := mbTrans1096.WriteString(arg1095)
    if err1097 != nil {
      Usage()
      return
    }
    factory1098 := thrift.NewTJSONProtocolFactory()
    jsProt1099 := factory1098.GetProtocol(mbTrans1096)
    argvalue0 := interfaces.NewUint64()
    err1100 := argvalue0.Read(context.Background(), jsProt1099)
    if err1100 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1101 := flag.Arg(2)
    mbTrans1102 := thrift.NewTMemoryBufferLen(len(arg1101))
    defer mbTrans1102.Close()
    _, err1103 := mbTrans1102.WriteString(arg1101)
    if err1103 != nil {
      Usage()
      return
    }
    factory1104 := thrift.NewTJSONProtocolFactory()
    jsProt1105 := factory1104.GetProtocol(mbTrans1102)
    argvalue1 := interfaces.NewUint64()
    err1106 := argvalue1.Read(context.Background(), jsProt1105)
    if err1106 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1107 := flag.Arg(3)
    mbTrans1108 := thrift.NewTMemoryBufferLen(len(arg1107))
    defer mbTrans1108.Close()
    _, err1109 := mbTrans1108.WriteString(arg1107)
    if err1109 != nil {
      Usage()
      return
    }
    factory1110 := thrift.NewTJSONProtocolFactory()
    jsProt1111 := factory1110.GetProtocol(mbTrans1108)
    argvalue2 := interfaces.NewUint64()
    err1112 := argvalue2.Read(context.Background(), jsProt1111)
    if err1112 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1114 := flag.Arg(5)
    mbTrans1115 := thrift.NewTMemoryBufferLen(len(arg1114))
    defer mbTrans1115.Close()
    _, err1116 := mbTrans1115.WriteString(arg1114)
    if err1116 != nil {
      Usage()
      return
    }
    factory1117 := thrift.NewTJSONProtocolFactory()
    jsProt1118 := factory1117.GetProtocol(mbTrans1115)
    argvalue4 := interfaces.NewUint64()
    err1119 := argvalue4.Read(context.Background(), jsProt1118)
    if err1119 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1120 := flag.Arg(1)
    mbTrans1121 := thrift.NewTMemoryBufferLen(len(arg1120))
    defer mbTrans1121.Close()
    _, err1122 := mbTrans1121.WriteString(arg1120)
    if err1122 != nil {
      Usage()
      return
    }
    factory1123 := thrift.NewTJSONProtocolFactory()
    jsProt1124 := factory1123.GetProtocol(mbTrans1121)
    argvalue0 := interfaces.NewUint64()
    err1125 := argvalue0.Read(context.Background(), jsProt1124)
    if err1125 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1126 := flag.Arg(2)
    mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
    defer mbTrans1127.Close()
    _, err1128 := mbTrans1127.WriteString(arg1126)
    if err1128 != nil {
      Usage()
      return
    }
    factory1129 := thrift.NewTJSONProtocolFactory()
    jsProt1130 := factory1129.GetProtocol(mbTrans1127)
    argvalue1 := interfaces.NewUint64()
    err1131 := argvalue1.Read(context.Background(), jsProt1130)
    if err1131 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1132 := flag.Arg(3)
    mbTrans1133 := thrift.NewTMemoryBufferLen(len(arg1132))
    defer mbTrans1133.Close()
    _, err1134 := mbTrans1133.WriteString(arg1132)
    if err1134 != nil {
      Usage()
      return
    }
    factory1135 := thrift.NewTJSONProtocolFactory()
    jsProt1136 := factory1135.GetProtocol(mbTrans1133)
    argvalue2 := interfaces.NewUint64()
    err1137 := argvalue2.Read(context.Background(), jsProt1136)
    if err1137 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1139 := flag.Arg(5)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue4 := interfaces.NewUint64()
    err1144 := argvalue4.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1145 := flag.Arg(1)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue0 := interfaces.NewUint64()
    err1150 := argvalue0.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1151 := flag.Arg(2)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue1 := interfaces.NewUint64()
    err1156 := argvalue1.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1157 := flag.Arg(3)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue2 := interfaces.NewUint64()
    err1162 := argvalue2.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1163 := flag.Arg(1)
    mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
    defer mbTrans1164.Close()
    _, err1165 := mbTrans1164.WriteString(arg1163)
    if err1165 != nil {
      Usage()
      return
    }
    factory1166 := thrift.NewTJSONProtocolFactory()
    jsProt1167 := factory1166.GetProtocol(mbTrans1164)
    argvalue0 := interfaces.NewUint64()
    err1168 := argvalue0.Read(context.Background(), jsProt1167)
    if err1168 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1169 := flag.Arg(2)
    mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
    defer mbTrans1170.Close()
    _, err1171 := mbTrans1170.WriteString(arg1169)
    if err1171 != nil {
      Usage()
      return
    }
    factory1172 := thrift.NewTJSONProtocolFactory()
    jsProt1173 := factory1172.GetProtocol(mbTrans1170)
    argvalue1 := interfaces.NewUint64()
    err1174 := argvalue1.Read(context.Background(), jsProt1173)
    if err1174 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1175 := flag.Arg(3)
    mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
    defer mbTrans1176.Close()
    _, err1177 := mbTrans1176.WriteString(arg1175)
    if err1177 != nil {
      Usage()
      return
    }
    factory1178 := thrift.NewTJSONProtocolFactory()
    jsProt1179 := factory1178.GetProtocol(mbTrans1176)
    argvalue2 := interfaces.NewUint64()
    err1180 := argvalue2.Read(context.Background(), jsProt1179)
    if err1180 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1181 := flag.Arg(4)
    mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
    defer mbTrans1182.Close()
    _, err1183 := mbTrans1182.WriteString(arg1181)
    if err1183 != nil {
      Usage()
      return
    }
    factory1184 := thrift.NewTJSONProtocolFactory()
    jsProt1185 := factory1184.GetProtocol(mbTrans1182)
    argvalue3 := interfaces.NewUint64()
    err1186 := argvalue3.Read(context.Background(), jsProt1185)
    if err1186 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1188 := (strconv.Atoi(flag.Arg(1)))
    if err1188 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1189 := flag.Arg(2)
    mbTrans1190 := thrift.NewTMemoryBufferLen(len(arg1189))
    defer mbTrans1190.Close()
    _, err1191 := mbTrans1190.WriteString(arg1189)
    if err1191 != nil {
      Usage()
      return
    }
    factory1192 := thrift.NewTJSONProtocolFactory()
    jsProt1193 := factory1192.GetProtocol(mbTrans1190)
    argvalue1 := interfaces.NewUint64()
    err1194 := argvalue1.Read(context.Background(), jsProt1193)
    if err1194 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1196 := (strconv.Atoi(flag.Arg(1)))
    if err1196 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1197 := (strconv.Atoi(flag.Arg(1)))
    if err1197 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1198 := (strconv.Atoi(flag.Arg(1)))
    if err1198 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1199 := flag.Arg(1)
    mbTrans1200 := thrift.NewTMemoryBufferLen(len(arg1199))
    defer mbTrans1200.Close()
    _, err1201 := mbTrans1200.WriteString(arg1199)
    if err1201 != nil {
      Usage()
      return
    }
    factory1202 := thrift.NewTJSONProtocolFactory()
    jsProt1203 := factory1202.GetProtocol(mbTrans1200)
    argvalue0 := interfaces.NewUint64()
    err1204 := argvalue0.Read(context.Background(), jsProt1203)
    if err1204 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1205 := flag.Arg(2)
    mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
    defer mbTrans1206.Close()
    _, err1207 := mbTrans1206.WriteString(arg1205)
    if err1207 != nil {
      Usage()
      return
    }
    factory1208 := thrift.NewTJSONProtocolFactory()
    jsProt1209 := factory1208.GetProtocol(mbTrans1206)
    argvalue1 := interfaces.NewUint64()
    err1210 := argvalue1.Read(context.Background(), jsProt1209)
    if err1210 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1211 := flag.Arg(3)
    mbTrans1212 := thrift.NewTMemoryBufferLen(len(arg1211))
    defer mbTrans1212.Close()
    _, err1213 := mbTrans1212.WriteString(arg1211)
    if err1213 != nil {
      Usage()
      return
    }
    factory1214 := thrift.NewTJSONProtocolFactory()
    jsProt1215 := factory1214.GetProtocol(mbTrans1212)
    argvalue2 := interfaces.NewUint64()
    err1216 := argvalue2.Read(context.Background(), jsProt1215)
    if err1216 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1217 := flag.Arg(4)
    mbTrans1218 := thrift.NewTMemoryBufferLen(len(arg1217))
    defer mbTrans1218.Close()
    _, err1219 := mbTrans1218.WriteString(arg1217)
    if err1219 != nil {
      Usage()
      return
    }
    factory1220 := thrift.NewTJSONProtocolFactory()
    jsProt1221 := factory1220.GetProtocol(mbTrans1218)
    argvalue3 := interfaces.NewUint64()
    err1222 := argvalue3.Read(context.Background(), jsProt1221)
    if err1222 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1223 := flag.Arg(1)
    mbTrans1224 := thrift.NewTMemoryBufferLen(len(arg1223))
    defer mbTrans1224.Close()
    _, err1225 := mbTrans1224.WriteString(arg1223)
    if err1225 != nil {
      Usage()
      return
    }
    factory1226 := thrift.NewTJSONProtocolFactory()
    jsProt1227 := factory1226.GetProtocol(mbTrans1224)
    argvalue0 := interfaces.NewUint64()
    err1228 := argvalue0.Read(context.Background(), jsProt1227)
    if err1228 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1229 := flag.Arg(2)
    mbTrans1230 := thrift.NewTMemoryBufferLen(len(arg1229))
    defer mbTrans1230.Close()
    _, err1231 := mbTrans1230.WriteString(arg1229)
    if err1231 != nil {
      Usage()
      return
    }
    factory1232 := thrift.NewTJSONProtocolFactory()
    jsProt1233 := factory1232.GetProtocol(mbTrans1230)
    argvalue1 := interfaces.NewUint64()
    err1234 := argvalue1.Read(context.Background(), jsProt1233)
    if err1234 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1235 := flag.Arg(3)
    mbTrans1236 := thrift.NewTMemoryBufferLen(len(arg1235))
    defer mbTrans1236.Close()
    _, err1237 := mbTrans1236.WriteString(arg1235)
    if err1237 != nil {
      Usage()
      return
    }
    factory1238 := thrift.NewTJSONProtocolFactory()
    jsProt1239 := factory1238.GetProtocol(mbTrans1236)
    argvalue2 := interfaces.NewUint64()
    err1240 := argvalue2.Read(context.Background(), jsProt1239)
    if err1240 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1242 := flag.Arg(1)
    mbTrans1243 := thrift.NewTMemoryBufferLen(len(arg1242))
    defer mbTrans1243.Close()
    _, err1244 := mbTrans1243.WriteString(arg1242)
    if err1244 != nil {
      Usage()
      return
    }
    factory1245 := thrift.NewTJSONProtocolFactory()
    jsProt1246 := factory1245.GetProtocol(mbTrans1243)
    argvalue0 := interfaces.NewUint64()
    err1247 := argvalue0.Read(context.Background(), jsProt1246)
    if err1247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1248 := flag.Arg(2)
    mbTrans1249 := thrift.NewTMemoryBufferLen(len(arg1248))
    defer mbTrans1249.Close()
    _, err1250 := mbTrans1249.WriteString(arg1248)
    if err1250 != nil {
      Usage()
      return
    }
    factory1251 := thrift.NewTJSONProtocolFactory()
    jsProt1252 := factory1251.GetProtocol(mbTrans1249)
    argvalue1 := interfaces.NewUint64()
    err1253 := argvalue1.Read(context.Background(), jsProt1252)
    if err1253 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1254 := flag.Arg(3)
    mbTrans1255 := thrift.NewTMemoryBufferLen(len(arg1254))
    defer mbTrans1255.Close()
    _, err1256 := mbTrans1255.WriteString(arg1254)
    if err1256 != nil {
      Usage()
      return
    }
    factory1257 := thrift.NewTJSONProtocolFactory()
    jsProt1258 := factory1257.GetProtocol(mbTrans1255)
    argvalue2 := interfaces.NewUint64()
    err1259 := argvalue2.Read(context.Background(), jsProt1258)
    if err1259 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1261 := flag.Arg(5)
    mbTrans1262 := thrift.NewTMemoryBufferLen(len(arg1261))
    defer mbTrans1262.Close()
    _, err1263 := mbTrans1262.WriteString(arg1261)
    if err1263 != nil {
      Usage()
      return
    }
    factory1264 := thrift.NewTJSONProtocolFactory()
    jsProt1265 := factory1264.GetProtocol(mbTrans1262)
    argvalue4 := interfaces.NewUint64()
    err1266 := argvalue4.Read(context.Background(), jsProt1265)
    if err1266 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1267 := flag.Arg(1)
    mbTrans1268 := thrift.NewTMemoryBufferLen(len(arg1267))
    defer mbTrans1268.Close()
    _, err1269 := mbTrans1268.WriteString(arg1267)
    if err1269 != nil {
      Usage()
      return
    }
    factory1270 := thrift.NewTJSONProtocolFactory()
    jsProt1271 := factory1270.GetProtocol(mbTrans1268)
    argvalue0 := interfaces.NewUint64()
    err1272 := argvalue0.Read(context.Background(), jsProt1271)
    if err1272 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1273 := flag.Arg(2)
    mbTrans1274 := thrift.NewTMemoryBufferLen(len(arg1273))
    defer mbTrans1274.Close()
    _, err1275 := mbTrans1274.WriteString(arg1273)
    if err1275 != nil {
      Usage()
      return
    }
    factory1276 := thrift.NewTJSONProtocolFactory()
    jsProt1277 := factory1276.GetProtocol(mbTrans1274)
    argvalue1 := interfaces.NewUint64()
    err1278 := argvalue1.Read(context.Background(), jsProt1277)
    if err1278 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1279 := flag.Arg(3)
    mbTrans1280 := thrift.NewTMemoryBufferLen(len(arg1279))
    defer mbTrans1280.Close()
    _, err1281 := mbTrans1280.WriteString(arg1279)
    if err1281 != nil {
      Usage()
      return
    }
    factory1282 := thrift.NewTJSONProtocolFactory()
    jsProt1283 := factory1282.GetProtocol(mbTrans1280)
    argvalue2 := interfaces.NewUint64()
    err1284 := argvalue2.Read(context.Background(), jsProt1283)
    if err1284 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1286 := flag.Arg(5)
    mbTrans1287 := thrift.NewTMemoryBufferLen(len(arg1286))
    defer mbTrans1287.Close()
    _, err1288 := mbTrans1287.WriteString(arg1286)
    if err1288 != nil {
      Usage()
      return
    }
    factory1289 := thrift.NewTJSONProtocolFactory()
    jsProt1290 := factory1289.GetProtocol(mbTrans1287)
    argvalue4 := interfaces.NewUint64()
    err1291 := argvalue4.Read(context.Background(), jsProt1290)
    if err1291 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1292 := flag.Arg(1)
    mbTrans1293 := thrift.NewTMemoryBufferLen(len(arg1292))
    defer mbTrans1293.Close()
    _, err1294 := mbTrans1293.WriteString(arg1292)
    if err1294 != nil {
      Usage()
      return
    }
    factory1295 := thrift.NewTJSONProtocolFactory()
    jsProt1296 := factory1295.GetProtocol(mbTrans1293)
    argvalue0 := interfaces.NewUint64()
    err1297 := argvalue0.Read(context.Background(), jsProt1296)
    if err1297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1298 := flag.Arg(2)
    mbTrans1299 := thrift.NewTMemoryBufferLen(len(arg1298))
    defer mbTrans1299.Close()
    _, err1300 := mbTrans1299.WriteString(arg1298)
    if err1300 != nil {
      Usage()
      return
    }
    factory1301 := thrift.NewTJSONProtocolFactory()
    jsProt1302 := factory1301.GetProtocol(mbTrans1299)
    argvalue1 := interfaces.NewUint64()
    err1303 := argvalue1.Read(context.Background(), jsProt1302)
    if err1303 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1304 := flag.Arg(3)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue2 := interfaces.NewUint64()
    err1309 := argvalue2.Read(context.Background(), jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1310 := flag.Arg(1)
    mbTrans1311 := thrift.NewTMemoryBufferLen(len(arg1310))
    defer mbTrans1311.Close()
    _, err1312 := mbTrans1311.WriteString(arg1310)
    if err1312 != nil {
      Usage()
      return
    }
    factory1313 := thrift.NewTJSONProtocolFactory()
    jsProt1314 := factory1313.GetProtocol(mbTrans1311)
    argvalue0 := interfaces.NewUint64()
    err1315 := argvalue0.Read(context.Background(), jsProt1314)
    if err1315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1316 := flag.Arg(2)
    mbTrans1317 := thrift.NewTMemoryBufferLen(len(arg1316))
    defer mbTrans1317.Close()
    _, err1318 := mbTrans1317.WriteString(arg1316)
    if err1318 != nil {
      Usage()
      return
    }
    factory1319 := thrift.NewTJSONProtocolFactory()
    jsProt1320 := factory1319.GetProtocol(mbTrans1317)
    argvalue1 := interfaces.NewUint64()
    err1321 := argvalue1.Read(context.Background(), jsProt1320)
    if err1321 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1322 := flag.Arg(3)
    mbTrans1323 := thrift.NewTMemoryBufferLen(len(arg1322))
    defer mbTrans1323.Close()
    _, err1324 := mbTrans1323.WriteString(arg1322)
    if err1324 != nil {
      Usage()
      return
    }
    factory1325 := thrift.NewTJSONProtocolFactory()
    jsProt1326 := factory1325.GetProtocol(mbTrans1323)
    argvalue2 := interfaces.NewUint64()
    err1327 := argvalue2.Read(context.Background(), jsProt1326)
    if err1327 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1328 := flag.Arg(4)
    mbTrans1329 := thrift.NewTMemoryBufferLen(len(arg1328))
    defer mbTrans1329.Close()
    _, err1330 := mbTrans1329.WriteString(arg1328)
    if err1330 != nil {
      Usage()
      return
    }
    factory1331 := thrift.NewTJSONProtocolFactory()
    jsProt1332 := factory1331.GetProtocol(mbTrans1329)
    argvalue3 := interfaces.NewUint64()
    err1333 := argvalue3.Read(context.Background(), jsProt1332)
    if err1333 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1335 := (strconv.Atoi(flag.Arg(1)))
    if err1335 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1336 := flag.Arg(2)
    mbTrans1337 := thrift.NewTMemoryBufferLen(len(arg1336))
    defer mbTrans1337.Close()
    _, err1338 := mbTrans1337.WriteString(arg1336)
    if err1338 != nil {
      Usage()
      return
    }
    factory1339 := thrift.NewTJSONProtocolFactory()
    jsProt1340 := factory1339.GetProtocol(mbTrans1337)
    argvalue1 := interfaces.NewUint64()
    err1341 := argvalue1.Read(context.Background(), jsProt1340)
    if err1341 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1343 := (strconv.Atoi(flag.Arg(1)))
    if err1343 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1344 := (strconv.Atoi(flag.Arg(1)))
    if err1344 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1345 := (strconv.Atoi(flag.Arg(1)))
    if err1345 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1346 := flag.Arg(1)
    mbTrans1347 := thrift.NewTMemoryBufferLen(len(arg1346))
    defer mbTrans1347.Close()
    _, err1348 := mbTrans1347.WriteString(arg1346)
    if err1348 != nil {
      Usage()
      return
    }
    factory1349 := thrift.NewTJSONProtocolFactory()
    jsProt1350 := factory1349.GetProtocol(mbTrans1347)
    argvalue0 := interfaces.NewUint64()
    err1351 := argvalue0.Read(context.Background(), jsProt1350)
    if err1351 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1352 := flag.Arg(2)
    mbTrans1353 := thrift.NewTMemoryBufferLen(len(arg1352))
    defer mbTrans1353.Close()
    _, err1354 := mbTrans1353.WriteString(arg1352)
    if err1354 != nil {
      Usage()
      return
    }
    factory1355 := thrift.NewTJSONProtocolFactory()
    jsProt1356 := factory1355.GetProtocol(mbTrans1353)
    argvalue1 := interfaces.NewUint64()
    err1357 := argvalue1.Read(context.Background(), jsProt1356)
    if err1357 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1358 := flag.Arg(3)
    mbTrans1359 := thrift.NewTMemoryBufferLen(len(arg1358))
    defer mbTrans1359.Close()
    _, err1360 := mbTrans1359.WriteString(arg1358)
    if err1360 != nil {
      Usage()
      return
    }
    factory1361 := thrift.NewTJSONProtocolFactory()
    jsProt1362 := factory1361.GetProtocol(mbTrans1359)
    argvalue2 := interfaces.NewUint64()
    err1363 := argvalue2.Read(context.Background(), jsProt1362)
    if err1363 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1364 := flag.Arg(4)
    mbTrans1365 := thrift.NewTMemoryBufferLen(len(arg1364))
    defer mbTrans1365.Close()
    _, err1366 := mbTrans1365.WriteString(arg1364)
    if err1366 != nil {
      Usage()
      return
    }
    factory1367 := thrift.NewTJSONProtocolFactory()
    jsProt1368 := factory1367.GetProtocol(mbTrans1365)
    argvalue3 := interfaces.NewUint64()
    err1369 := argvalue3.Read(context.Background(), jsProt1368)
    if err1369 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1370 := flag.Arg(1)
    mbTrans1371 := thrift.NewTMemoryBufferLen(len(arg1370))
    defer mbTrans1371.Close()
    _, err1372 := mbTrans1371.WriteString(arg1370)
    if err1372 != nil {
      Usage()
      return
    }
    factory1373 := thrift.NewTJSONProtocolFactory()
    jsProt1374 := factory1373.GetProtocol(mbTrans1371)
    argvalue0 := interfaces.NewUint64()
    err1375 := argvalue0.Read(context.Background(), jsProt1374)
    if err1375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1376 := flag.Arg(2)
    mbTrans1377 := thrift.NewTMemoryBufferLen(len(arg1376))
    defer mbTrans1377.Close()
    _, err1378 := mbTrans1377.WriteString(arg1376)
    if err1378 != nil {
      Usage()
      return
    }
    factory1379 := thrift.NewTJSONProtocolFactory()
    jsProt1380 := factory1379.GetProtocol(mbTrans1377)
    argvalue1 := interfaces.NewUint64()
    err1381 := argvalue1.Read(context.Background(), jsProt1380)
    if err1381 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1382 := flag.Arg(3)
    mbTrans1383 := thrift.NewTMemoryBufferLen(len(arg1382))
    defer mbTrans1383.Close()
    _, err1384 := mbTrans1383.WriteString(arg1382)
    if err1384 != nil {
      Usage()
      return
    }
    factory1385 := thrift.NewTJSONProtocolFactory()
    jsProt1386 := factory1385.GetProtocol(mbTrans1383)
    argvalue2 := interfaces.NewUint64()
    err1387 := argvalue2.Read(context.Background(), jsProt1386)
    if err1387 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1389 := flag.Arg(1)
    mbTrans1390 := thrift.NewTMemoryBufferLen(len(arg1389))
    defer mbTrans1390.Close()
    _, err1391 := mbTrans1390.WriteString(arg1389)
    if err1391 != nil {
      Usage()
      return
    }
    factory1392 := thrift.NewTJSONProtocolFactory()
    jsProt1393 := factory1392.GetProtocol(mbTrans1390)
    argvalue0 := interfaces.NewUint64()
    err1394 := argvalue0.Read(context.Background(), jsProt1393)
    if err1394 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1395 := flag.Arg(2)
    mbTrans1396 := thrift.NewTMemoryBufferLen(len(arg1395))
    defer mbTrans1396.Close()
    _, err1397 := mbTrans1396.WriteString(arg1395)
    if err1397 != nil {
      Usage()
      return
    }
    factory1398 := thrift.NewTJSONProtocolFactory()
    jsProt1399 := factory1398.GetProtocol(mbTrans1396)
    argvalue1 := interfaces.NewUint64()
    err1400 := argvalue1.Read(context.Background(), jsProt1399)
    if err1400 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1401 := flag.Arg(3)
    mbTrans1402 := thrift.NewTMemoryBufferLen(len(arg1401))
    defer mbTrans1402.Close()
    _, err1403 := mbTrans1402.WriteString(arg1401)
    if err1403 != nil {
      Usage()
      return
    }
    factory1404 := thrift.NewTJSONProtocolFactory()
    jsProt1405 := factory1404.GetProtocol(mbTrans1402)
    argvalue2 := interfaces.NewUint64()
    err1406 := argvalue2.Read(context.Background(), jsProt1405)
    if err1406 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1408 := flag.Arg(5)
    mbTrans1409 := thrift.NewTMemoryBufferLen(len(arg1408))
    defer mbTrans1409.Close()
    _, err1410 := mbTrans1409.WriteString(arg1408)
    if err1410 != nil {
      Usage()
      return
    }
    factory1411 := thrift.NewTJSONProtocolFactory()
    jsProt1412 := factory1411.GetProtocol(mbTrans1409)
    argvalue4 := interfaces.NewUint64()
    err1413 := argvalue4.Read(context.Background(), jsProt1412)
    if err1413 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1414 := flag.Arg(1)
    mbTrans1415 := thrift.NewTMemoryBufferLen(len(arg1414))
    defer mbTrans1415.Close()
    _, err1416 := mbTrans1415.WriteString(arg1414)
    if err1416 != nil {
      Usage()
      return
    }
    factory1417 := thrift.NewTJSONProtocolFactory()
    jsProt1418 := factory1417.GetProtocol(mbTrans1415)
    argvalue0 := interfaces.NewUint64()
    err1419 := argvalue0.Read(context.Background(), jsProt1418)
    if err1419 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1420 := flag.Arg(2)
    mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
    defer mbTrans1421.Close()
    _, err1422 := mbTrans1421.WriteString(arg1420)
    if err1422 != nil {
      Usage()
      return
    }
    factory1423 := thrift.NewTJSONProtocolFactory()
    jsProt1424 := factory1423.GetProtocol(mbTrans1421)
    argvalue1 := interfaces.NewUint64()
    err1425 := argvalue1.Read(context.Background(), jsProt1424)
    if err1425 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1426 := flag.Arg(3)
    mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
    defer mbTrans1427.Close()
    _, err1428 := mbTrans1427.WriteString(arg1426)
    if err1428 != nil {
      Usage()
      return
    }
    factory1429 := thrift.NewTJSONProtocolFactory()
    jsProt1430 := factory1429.GetProtocol(mbTrans1427)
    argvalue2 := interfaces.NewUint64()
    err1431 := argvalue2.Read(context.Background(), jsProt1430)
    if err1431 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1433 := flag.Arg(5)
    mbTrans1434 := thrift.NewTMemoryBufferLen(len(arg1433))
    defer mbTrans1434.Close()
    _, err1435 := mbTrans1434.WriteString(arg1433)
    if err1435 != nil {
      Usage()
      return
    }
    factory1436 := thrift.NewTJSONProtocolFactory()
    jsProt1437 := factory1436.GetProtocol(mbTrans1434)
    argvalue4 := interfaces.NewUint64()
    err1438 := argvalue4.Read(context.Background(), jsProt1437)
    if err1438 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1439 := flag.Arg(1)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil {
      Usage()
      return
    }
    factory1442 := thrift.NewTJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    argvalue0 := interfaces.NewUint64()
    err1444 := argvalue0.Read(context.Background(), jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1445 := flag.Arg(2)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil {
      Usage()
      return
    }
    factory1448 := thrift.NewTJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    argvalue1 := interfaces.NewUint64()
    err1450 := argvalue1.Read(context.Background(), jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1451 := flag.Arg(3)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil {
      Usage()
      return
    }
    factory1454 := thrift.NewTJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    argvalue2 := interfaces.NewUint64()
    err1456 := argvalue2.Read(context.Background(), jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
