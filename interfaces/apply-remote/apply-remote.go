// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg552 := flag.Arg(1)
    mbTrans553 := thrift.NewTMemoryBufferLen(len(arg552))
    defer mbTrans553.Close()
    _, err554 := mbTrans553.WriteString(arg552)
    if err554 != nil {
      Usage()
      return
    }
    factory555 := thrift.NewTJSONProtocolFactory()
    jsProt556 := factory555.GetProtocol(mbTrans553)
    argvalue0 := interfaces.NewUint64()
    err557 := argvalue0.Read(context.Background(), jsProt556)
    if err557 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg558 := flag.Arg(1)
    mbTrans559 := thrift.NewTMemoryBufferLen(len(arg558))
    defer mbTrans559.Close()
    _, err560 := mbTrans559.WriteString(arg558)
    if err560 != nil {
      Usage()
      return
    }
    factory561 := thrift.NewTJSONProtocolFactory()
    jsProt562 := factory561.GetProtocol(mbTrans559)
    argvalue0 := interfaces.NewUint64()
    err563 := argvalue0.Read(context.Background(), jsProt562)
    if err563 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err564 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err564 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err565 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err565 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err566 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err566 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg568 := flag.Arg(1)
    mbTrans569 := thrift.NewTMemoryBufferLen(len(arg568))
    defer mbTrans569.Close()
    _, err570 := mbTrans569.WriteString(arg568)
    if err570 != nil {
      Usage()
      return
    }
    factory571 := thrift.NewTJSONProtocolFactory()
    jsProt572 := factory571.GetProtocol(mbTrans569)
    argvalue0 := interfaces.NewUint64()
    err573 := argvalue0.Read(context.Background(), jsProt572)
    if err573 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg575 := flag.Arg(1)
    mbTrans576 := thrift.NewTMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewTJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue0 := interfaces.NewUint64()
    err580 := argvalue0.Read(context.Background(), jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg581 := flag.Arg(1)
    mbTrans582 := thrift.NewTMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewTJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue0 := interfaces.NewUint64()
    err586 := argvalue0.Read(context.Background(), jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg593 := flag.Arg(1)
    mbTrans594 := thrift.NewTMemoryBufferLen(len(arg593))
    defer mbTrans594.Close()
    _, err595 := mbTrans594.WriteString(arg593)
    if err595 != nil {
      Usage()
      return
    }
    factory596 := thrift.NewTJSONProtocolFactory()
    jsProt597 := factory596.GetProtocol(mbTrans594)
    argvalue0 := interfaces.NewUint64()
    err598 := argvalue0.Read(context.Background(), jsProt597)
    if err598 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg599 := flag.Arg(2)
    mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
    defer mbTrans600.Close()
    _, err601 := mbTrans600.WriteString(arg599)
    if err601 != nil {
      Usage()
      return
    }
    factory602 := thrift.NewTJSONProtocolFactory()
    jsProt603 := factory602.GetProtocol(mbTrans600)
    argvalue1 := interfaces.NewUint64()
    err604 := argvalue1.Read(context.Background(), jsProt603)
    if err604 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg607 := flag.Arg(5)
    mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
    defer mbTrans608.Close()
    _, err609 := mbTrans608.WriteString(arg607)
    if err609 != nil {
      Usage()
      return
    }
    factory610 := thrift.NewTJSONProtocolFactory()
    jsProt611 := factory610.GetProtocol(mbTrans608)
    argvalue4 := interfaces.NewUint64()
    err612 := argvalue4.Read(context.Background(), jsProt611)
    if err612 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg613 := flag.Arg(1)
    mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
    defer mbTrans614.Close()
    _, err615 := mbTrans614.WriteString(arg613)
    if err615 != nil {
      Usage()
      return
    }
    factory616 := thrift.NewTJSONProtocolFactory()
    jsProt617 := factory616.GetProtocol(mbTrans614)
    argvalue0 := interfaces.NewUint64()
    err618 := argvalue0.Read(context.Background(), jsProt617)
    if err618 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg619 := flag.Arg(2)
    mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
    defer mbTrans620.Close()
    _, err621 := mbTrans620.WriteString(arg619)
    if err621 != nil {
      Usage()
      return
    }
    factory622 := thrift.NewTJSONProtocolFactory()
    jsProt623 := factory622.GetProtocol(mbTrans620)
    argvalue1 := interfaces.NewUint64()
    err624 := argvalue1.Read(context.Background(), jsProt623)
    if err624 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg625 := flag.Arg(1)
    mbTrans626 := thrift.NewTMemoryBufferLen(len(arg625))
    defer mbTrans626.Close()
    _, err627 := mbTrans626.WriteString(arg625)
    if err627 != nil {
      Usage()
      return
    }
    factory628 := thrift.NewTJSONProtocolFactory()
    jsProt629 := factory628.GetProtocol(mbTrans626)
    argvalue0 := interfaces.NewUint64()
    err630 := argvalue0.Read(context.Background(), jsProt629)
    if err630 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err633 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg634 := flag.Arg(1)
    mbTrans635 := thrift.NewTMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil {
      Usage()
      return
    }
    factory637 := thrift.NewTJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    argvalue0 := interfaces.NewUint64()
    err639 := argvalue0.Read(context.Background(), jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg645 := flag.Arg(1)
    mbTrans646 := thrift.NewTMemoryBufferLen(len(arg645))
    defer mbTrans646.Close()
    _, err647 := mbTrans646.WriteString(arg645)
    if err647 != nil {
      Usage()
      return
    }
    factory648 := thrift.NewTJSONProtocolFactory()
    jsProt649 := factory648.GetProtocol(mbTrans646)
    argvalue0 := interfaces.NewUint64()
    err650 := argvalue0.Read(context.Background(), jsProt649)
    if err650 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg652 := flag.Arg(1)
    mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
    defer mbTrans653.Close()
    _, err654 := mbTrans653.WriteString(arg652)
    if err654 != nil {
      Usage()
      return
    }
    factory655 := thrift.NewTJSONProtocolFactory()
    jsProt656 := factory655.GetProtocol(mbTrans653)
    argvalue0 := interfaces.NewUint64()
    err657 := argvalue0.Read(context.Background(), jsProt656)
    if err657 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg658 := flag.Arg(1)
    mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewTJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue0 := interfaces.NewUint64()
    err663 := argvalue0.Read(context.Background(), jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg664 := flag.Arg(1)
    mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil {
      Usage()
      return
    }
    factory667 := thrift.NewTJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    argvalue0 := interfaces.NewUint64()
    err669 := argvalue0.Read(context.Background(), jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg670 := flag.Arg(1)
    mbTrans671 := thrift.NewTMemoryBufferLen(len(arg670))
    defer mbTrans671.Close()
    _, err672 := mbTrans671.WriteString(arg670)
    if err672 != nil {
      Usage()
      return
    }
    factory673 := thrift.NewTJSONProtocolFactory()
    jsProt674 := factory673.GetProtocol(mbTrans671)
    argvalue0 := interfaces.NewUint64()
    err675 := argvalue0.Read(context.Background(), jsProt674)
    if err675 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg676 := flag.Arg(2)
    mbTrans677 := thrift.NewTMemoryBufferLen(len(arg676))
    defer mbTrans677.Close()
    _, err678 := mbTrans677.WriteString(arg676)
    if err678 != nil {
      Usage()
      return
    }
    factory679 := thrift.NewTJSONProtocolFactory()
    jsProt680 := factory679.GetProtocol(mbTrans677)
    argvalue1 := interfaces.NewUint64()
    err681 := argvalue1.Read(context.Background(), jsProt680)
    if err681 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg682 := flag.Arg(1)
    mbTrans683 := thrift.NewTMemoryBufferLen(len(arg682))
    defer mbTrans683.Close()
    _, err684 := mbTrans683.WriteString(arg682)
    if err684 != nil {
      Usage()
      return
    }
    factory685 := thrift.NewTJSONProtocolFactory()
    jsProt686 := factory685.GetProtocol(mbTrans683)
    argvalue0 := interfaces.NewUint64()
    err687 := argvalue0.Read(context.Background(), jsProt686)
    if err687 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg695 := flag.Arg(2)
    mbTrans696 := thrift.NewTMemoryBufferLen(len(arg695))
    defer mbTrans696.Close()
    _, err697 := mbTrans696.WriteString(arg695)
    if err697 != nil {
      Usage()
      return
    }
    factory698 := thrift.NewTJSONProtocolFactory()
    jsProt699 := factory698.GetProtocol(mbTrans696)
    argvalue1 := interfaces.NewUint64()
    err700 := argvalue1.Read(context.Background(), jsProt699)
    if err700 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err701 := (strconv.Atoi(flag.Arg(1)))
    if err701 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg721 := flag.Arg(2)
    mbTrans722 := thrift.NewTMemoryBufferLen(len(arg721))
    defer mbTrans722.Close()
    _, err723 := mbTrans722.WriteString(arg721)
    if err723 != nil {
      Usage()
      return
    }
    factory724 := thrift.NewTJSONProtocolFactory()
    jsProt725 := factory724.GetProtocol(mbTrans722)
    argvalue1 := interfaces.NewUint64()
    err726 := argvalue1.Read(context.Background(), jsProt725)
    if err726 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err728 := (strconv.Atoi(flag.Arg(4)))
    if err728 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err730 := (strconv.Atoi(flag.Arg(1)))
    if err730 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err731 := (strconv.Atoi(flag.Arg(2)))
    if err731 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err732 := (strconv.Atoi(flag.Arg(1)))
    if err732 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg733 := flag.Arg(1)
    mbTrans734 := thrift.NewTMemoryBufferLen(len(arg733))
    defer mbTrans734.Close()
    _, err735 := mbTrans734.WriteString(arg733)
    if err735 != nil {
      Usage()
      return
    }
    factory736 := thrift.NewTJSONProtocolFactory()
    jsProt737 := factory736.GetProtocol(mbTrans734)
    argvalue0 := interfaces.NewUint64()
    err738 := argvalue0.Read(context.Background(), jsProt737)
    if err738 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg739 := flag.Arg(2)
    mbTrans740 := thrift.NewTMemoryBufferLen(len(arg739))
    defer mbTrans740.Close()
    _, err741 := mbTrans740.WriteString(arg739)
    if err741 != nil {
      Usage()
      return
    }
    factory742 := thrift.NewTJSONProtocolFactory()
    jsProt743 := factory742.GetProtocol(mbTrans740)
    argvalue1 := interfaces.NewUint64()
    err744 := argvalue1.Read(context.Background(), jsProt743)
    if err744 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg745 := flag.Arg(3)
    mbTrans746 := thrift.NewTMemoryBufferLen(len(arg745))
    defer mbTrans746.Close()
    _, err747 := mbTrans746.WriteString(arg745)
    if err747 != nil {
      Usage()
      return
    }
    factory748 := thrift.NewTJSONProtocolFactory()
    jsProt749 := factory748.GetProtocol(mbTrans746)
    argvalue2 := interfaces.NewUint64()
    err750 := argvalue2.Read(context.Background(), jsProt749)
    if err750 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg751 := flag.Arg(4)
    mbTrans752 := thrift.NewTMemoryBufferLen(len(arg751))
    defer mbTrans752.Close()
    _, err753 := mbTrans752.WriteString(arg751)
    if err753 != nil {
      Usage()
      return
    }
    factory754 := thrift.NewTJSONProtocolFactory()
    jsProt755 := factory754.GetProtocol(mbTrans752)
    argvalue3 := interfaces.NewUint64()
    err756 := argvalue3.Read(context.Background(), jsProt755)
    if err756 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err758 := (strconv.Atoi(flag.Arg(1)))
    if err758 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg759 := flag.Arg(2)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil {
      Usage()
      return
    }
    factory762 := thrift.NewTJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    argvalue1 := interfaces.NewUint64()
    err764 := argvalue1.Read(context.Background(), jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err766 := (strconv.Atoi(flag.Arg(1)))
    if err766 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err767 := (strconv.Atoi(flag.Arg(1)))
    if err767 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err768 := (strconv.Atoi(flag.Arg(1)))
    if err768 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err769 := (strconv.Atoi(flag.Arg(1)))
    if err769 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg770 := flag.Arg(1)
    mbTrans771 := thrift.NewTMemoryBufferLen(len(arg770))
    defer mbTrans771.Close()
    _, err772 := mbTrans771.WriteString(arg770)
    if err772 != nil {
      Usage()
      return
    }
    factory773 := thrift.NewTJSONProtocolFactory()
    jsProt774 := factory773.GetProtocol(mbTrans771)
    argvalue0 := interfaces.NewUint64()
    err775 := argvalue0.Read(context.Background(), jsProt774)
    if err775 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg776 := flag.Arg(2)
    mbTrans777 := thrift.NewTMemoryBufferLen(len(arg776))
    defer mbTrans777.Close()
    _, err778 := mbTrans777.WriteString(arg776)
    if err778 != nil {
      Usage()
      return
    }
    factory779 := thrift.NewTJSONProtocolFactory()
    jsProt780 := factory779.GetProtocol(mbTrans777)
    argvalue1 := interfaces.NewUint64()
    err781 := argvalue1.Read(context.Background(), jsProt780)
    if err781 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg782 := flag.Arg(3)
    mbTrans783 := thrift.NewTMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil {
      Usage()
      return
    }
    factory785 := thrift.NewTJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    argvalue2 := interfaces.NewUint64()
    err787 := argvalue2.Read(context.Background(), jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg788 := flag.Arg(4)
    mbTrans789 := thrift.NewTMemoryBufferLen(len(arg788))
    defer mbTrans789.Close()
    _, err790 := mbTrans789.WriteString(arg788)
    if err790 != nil {
      Usage()
      return
    }
    factory791 := thrift.NewTJSONProtocolFactory()
    jsProt792 := factory791.GetProtocol(mbTrans789)
    argvalue3 := interfaces.NewUint64()
    err793 := argvalue3.Read(context.Background(), jsProt792)
    if err793 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg794 := flag.Arg(1)
    mbTrans795 := thrift.NewTMemoryBufferLen(len(arg794))
    defer mbTrans795.Close()
    _, err796 := mbTrans795.WriteString(arg794)
    if err796 != nil {
      Usage()
      return
    }
    factory797 := thrift.NewTJSONProtocolFactory()
    jsProt798 := factory797.GetProtocol(mbTrans795)
    argvalue0 := interfaces.NewUint64()
    err799 := argvalue0.Read(context.Background(), jsProt798)
    if err799 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg800 := flag.Arg(2)
    mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
    defer mbTrans801.Close()
    _, err802 := mbTrans801.WriteString(arg800)
    if err802 != nil {
      Usage()
      return
    }
    factory803 := thrift.NewTJSONProtocolFactory()
    jsProt804 := factory803.GetProtocol(mbTrans801)
    argvalue1 := interfaces.NewUint64()
    err805 := argvalue1.Read(context.Background(), jsProt804)
    if err805 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg806 := flag.Arg(3)
    mbTrans807 := thrift.NewTMemoryBufferLen(len(arg806))
    defer mbTrans807.Close()
    _, err808 := mbTrans807.WriteString(arg806)
    if err808 != nil {
      Usage()
      return
    }
    factory809 := thrift.NewTJSONProtocolFactory()
    jsProt810 := factory809.GetProtocol(mbTrans807)
    argvalue2 := interfaces.NewUint64()
    err811 := argvalue2.Read(context.Background(), jsProt810)
    if err811 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg812 := flag.Arg(4)
    mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
    defer mbTrans813.Close()
    _, err814 := mbTrans813.WriteString(arg812)
    if err814 != nil {
      Usage()
      return
    }
    factory815 := thrift.NewTJSONProtocolFactory()
    jsProt816 := factory815.GetProtocol(mbTrans813)
    argvalue3 := interfaces.NewUint64()
    err817 := argvalue3.Read(context.Background(), jsProt816)
    if err817 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg818 := flag.Arg(1)
    mbTrans819 := thrift.NewTMemoryBufferLen(len(arg818))
    defer mbTrans819.Close()
    _, err820 := mbTrans819.WriteString(arg818)
    if err820 != nil {
      Usage()
      return
    }
    factory821 := thrift.NewTJSONProtocolFactory()
    jsProt822 := factory821.GetProtocol(mbTrans819)
    argvalue0 := interfaces.NewUint64()
    err823 := argvalue0.Read(context.Background(), jsProt822)
    if err823 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg824 := flag.Arg(2)
    mbTrans825 := thrift.NewTMemoryBufferLen(len(arg824))
    defer mbTrans825.Close()
    _, err826 := mbTrans825.WriteString(arg824)
    if err826 != nil {
      Usage()
      return
    }
    factory827 := thrift.NewTJSONProtocolFactory()
    jsProt828 := factory827.GetProtocol(mbTrans825)
    argvalue1 := interfaces.NewUint64()
    err829 := argvalue1.Read(context.Background(), jsProt828)
    if err829 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg830 := flag.Arg(3)
    mbTrans831 := thrift.NewTMemoryBufferLen(len(arg830))
    defer mbTrans831.Close()
    _, err832 := mbTrans831.WriteString(arg830)
    if err832 != nil {
      Usage()
      return
    }
    factory833 := thrift.NewTJSONProtocolFactory()
    jsProt834 := factory833.GetProtocol(mbTrans831)
    argvalue2 := interfaces.NewUint64()
    err835 := argvalue2.Read(context.Background(), jsProt834)
    if err835 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg836 := flag.Arg(4)
    mbTrans837 := thrift.NewTMemoryBufferLen(len(arg836))
    defer mbTrans837.Close()
    _, err838 := mbTrans837.WriteString(arg836)
    if err838 != nil {
      Usage()
      return
    }
    factory839 := thrift.NewTJSONProtocolFactory()
    jsProt840 := factory839.GetProtocol(mbTrans837)
    argvalue3 := interfaces.NewUint64()
    err841 := argvalue3.Read(context.Background(), jsProt840)
    if err841 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg842 := flag.Arg(1)
    mbTrans843 := thrift.NewTMemoryBufferLen(len(arg842))
    defer mbTrans843.Close()
    _, err844 := mbTrans843.WriteString(arg842)
    if err844 != nil {
      Usage()
      return
    }
    factory845 := thrift.NewTJSONProtocolFactory()
    jsProt846 := factory845.GetProtocol(mbTrans843)
    argvalue0 := interfaces.NewUint64()
    err847 := argvalue0.Read(context.Background(), jsProt846)
    if err847 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg848 := flag.Arg(2)
    mbTrans849 := thrift.NewTMemoryBufferLen(len(arg848))
    defer mbTrans849.Close()
    _, err850 := mbTrans849.WriteString(arg848)
    if err850 != nil {
      Usage()
      return
    }
    factory851 := thrift.NewTJSONProtocolFactory()
    jsProt852 := factory851.GetProtocol(mbTrans849)
    argvalue1 := interfaces.NewUint64()
    err853 := argvalue1.Read(context.Background(), jsProt852)
    if err853 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg854 := flag.Arg(3)
    mbTrans855 := thrift.NewTMemoryBufferLen(len(arg854))
    defer mbTrans855.Close()
    _, err856 := mbTrans855.WriteString(arg854)
    if err856 != nil {
      Usage()
      return
    }
    factory857 := thrift.NewTJSONProtocolFactory()
    jsProt858 := factory857.GetProtocol(mbTrans855)
    argvalue2 := interfaces.NewUint64()
    err859 := argvalue2.Read(context.Background(), jsProt858)
    if err859 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg860 := flag.Arg(1)
    mbTrans861 := thrift.NewTMemoryBufferLen(len(arg860))
    defer mbTrans861.Close()
    _, err862 := mbTrans861.WriteString(arg860)
    if err862 != nil {
      Usage()
      return
    }
    factory863 := thrift.NewTJSONProtocolFactory()
    jsProt864 := factory863.GetProtocol(mbTrans861)
    argvalue0 := interfaces.NewUint64()
    err865 := argvalue0.Read(context.Background(), jsProt864)
    if err865 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg866 := flag.Arg(2)
    mbTrans867 := thrift.NewTMemoryBufferLen(len(arg866))
    defer mbTrans867.Close()
    _, err868 := mbTrans867.WriteString(arg866)
    if err868 != nil {
      Usage()
      return
    }
    factory869 := thrift.NewTJSONProtocolFactory()
    jsProt870 := factory869.GetProtocol(mbTrans867)
    argvalue1 := interfaces.NewUint64()
    err871 := argvalue1.Read(context.Background(), jsProt870)
    if err871 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg872 := flag.Arg(3)
    mbTrans873 := thrift.NewTMemoryBufferLen(len(arg872))
    defer mbTrans873.Close()
    _, err874 := mbTrans873.WriteString(arg872)
    if err874 != nil {
      Usage()
      return
    }
    factory875 := thrift.NewTJSONProtocolFactory()
    jsProt876 := factory875.GetProtocol(mbTrans873)
    argvalue2 := interfaces.NewUint64()
    err877 := argvalue2.Read(context.Background(), jsProt876)
    if err877 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg878 := flag.Arg(4)
    mbTrans879 := thrift.NewTMemoryBufferLen(len(arg878))
    defer mbTrans879.Close()
    _, err880 := mbTrans879.WriteString(arg878)
    if err880 != nil {
      Usage()
      return
    }
    factory881 := thrift.NewTJSONProtocolFactory()
    jsProt882 := factory881.GetProtocol(mbTrans879)
    argvalue3 := interfaces.NewUint64()
    err883 := argvalue3.Read(context.Background(), jsProt882)
    if err883 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg884 := flag.Arg(5)
    mbTrans885 := thrift.NewTMemoryBufferLen(len(arg884))
    defer mbTrans885.Close()
    _, err886 := mbTrans885.WriteString(arg884)
    if err886 != nil {
      Usage()
      return
    }
    factory887 := thrift.NewTJSONProtocolFactory()
    jsProt888 := factory887.GetProtocol(mbTrans885)
    argvalue4 := interfaces.NewUint64()
    err889 := argvalue4.Read(context.Background(), jsProt888)
    if err889 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err890 := (strconv.Atoi(flag.Arg(1)))
    if err890 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg891 := flag.Arg(2)
    mbTrans892 := thrift.NewTMemoryBufferLen(len(arg891))
    defer mbTrans892.Close()
    _, err893 := mbTrans892.WriteString(arg891)
    if err893 != nil {
      Usage()
      return
    }
    factory894 := thrift.NewTJSONProtocolFactory()
    jsProt895 := factory894.GetProtocol(mbTrans892)
    argvalue1 := interfaces.NewUint64()
    err896 := argvalue1.Read(context.Background(), jsProt895)
    if err896 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg897 := flag.Arg(3)
    mbTrans898 := thrift.NewTMemoryBufferLen(len(arg897))
    defer mbTrans898.Close()
    _, err899 := mbTrans898.WriteString(arg897)
    if err899 != nil {
      Usage()
      return
    }
    factory900 := thrift.NewTJSONProtocolFactory()
    jsProt901 := factory900.GetProtocol(mbTrans898)
    argvalue2 := interfaces.NewUint64()
    err902 := argvalue2.Read(context.Background(), jsProt901)
    if err902 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err903 := (strconv.Atoi(flag.Arg(1)))
    if err903 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err904 := (strconv.Atoi(flag.Arg(1)))
    if err904 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err905 := (strconv.Atoi(flag.Arg(1)))
    if err905 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg906 := flag.Arg(1)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil {
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    argvalue0 := interfaces.NewUint64()
    err911 := argvalue0.Read(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg912 := flag.Arg(2)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue1 := interfaces.NewUint64()
    err917 := argvalue1.Read(context.Background(), jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg918 := flag.Arg(3)
    mbTrans919 := thrift.NewTMemoryBufferLen(len(arg918))
    defer mbTrans919.Close()
    _, err920 := mbTrans919.WriteString(arg918)
    if err920 != nil {
      Usage()
      return
    }
    factory921 := thrift.NewTJSONProtocolFactory()
    jsProt922 := factory921.GetProtocol(mbTrans919)
    argvalue2 := interfaces.NewUint64()
    err923 := argvalue2.Read(context.Background(), jsProt922)
    if err923 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg924 := flag.Arg(4)
    mbTrans925 := thrift.NewTMemoryBufferLen(len(arg924))
    defer mbTrans925.Close()
    _, err926 := mbTrans925.WriteString(arg924)
    if err926 != nil {
      Usage()
      return
    }
    factory927 := thrift.NewTJSONProtocolFactory()
    jsProt928 := factory927.GetProtocol(mbTrans925)
    argvalue3 := interfaces.NewUint64()
    err929 := argvalue3.Read(context.Background(), jsProt928)
    if err929 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg930 := flag.Arg(1)
    mbTrans931 := thrift.NewTMemoryBufferLen(len(arg930))
    defer mbTrans931.Close()
    _, err932 := mbTrans931.WriteString(arg930)
    if err932 != nil {
      Usage()
      return
    }
    factory933 := thrift.NewTJSONProtocolFactory()
    jsProt934 := factory933.GetProtocol(mbTrans931)
    argvalue0 := interfaces.NewUint64()
    err935 := argvalue0.Read(context.Background(), jsProt934)
    if err935 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg936 := flag.Arg(2)
    mbTrans937 := thrift.NewTMemoryBufferLen(len(arg936))
    defer mbTrans937.Close()
    _, err938 := mbTrans937.WriteString(arg936)
    if err938 != nil {
      Usage()
      return
    }
    factory939 := thrift.NewTJSONProtocolFactory()
    jsProt940 := factory939.GetProtocol(mbTrans937)
    argvalue1 := interfaces.NewUint64()
    err941 := argvalue1.Read(context.Background(), jsProt940)
    if err941 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg942 := flag.Arg(3)
    mbTrans943 := thrift.NewTMemoryBufferLen(len(arg942))
    defer mbTrans943.Close()
    _, err944 := mbTrans943.WriteString(arg942)
    if err944 != nil {
      Usage()
      return
    }
    factory945 := thrift.NewTJSONProtocolFactory()
    jsProt946 := factory945.GetProtocol(mbTrans943)
    argvalue2 := interfaces.NewUint64()
    err947 := argvalue2.Read(context.Background(), jsProt946)
    if err947 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg948 := flag.Arg(4)
    mbTrans949 := thrift.NewTMemoryBufferLen(len(arg948))
    defer mbTrans949.Close()
    _, err950 := mbTrans949.WriteString(arg948)
    if err950 != nil {
      Usage()
      return
    }
    factory951 := thrift.NewTJSONProtocolFactory()
    jsProt952 := factory951.GetProtocol(mbTrans949)
    argvalue3 := interfaces.NewUint64()
    err953 := argvalue3.Read(context.Background(), jsProt952)
    if err953 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg954 := flag.Arg(1)
    mbTrans955 := thrift.NewTMemoryBufferLen(len(arg954))
    defer mbTrans955.Close()
    _, err956 := mbTrans955.WriteString(arg954)
    if err956 != nil {
      Usage()
      return
    }
    factory957 := thrift.NewTJSONProtocolFactory()
    jsProt958 := factory957.GetProtocol(mbTrans955)
    argvalue0 := interfaces.NewUint64()
    err959 := argvalue0.Read(context.Background(), jsProt958)
    if err959 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg960 := flag.Arg(2)
    mbTrans961 := thrift.NewTMemoryBufferLen(len(arg960))
    defer mbTrans961.Close()
    _, err962 := mbTrans961.WriteString(arg960)
    if err962 != nil {
      Usage()
      return
    }
    factory963 := thrift.NewTJSONProtocolFactory()
    jsProt964 := factory963.GetProtocol(mbTrans961)
    argvalue1 := interfaces.NewUint64()
    err965 := argvalue1.Read(context.Background(), jsProt964)
    if err965 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg966 := flag.Arg(3)
    mbTrans967 := thrift.NewTMemoryBufferLen(len(arg966))
    defer mbTrans967.Close()
    _, err968 := mbTrans967.WriteString(arg966)
    if err968 != nil {
      Usage()
      return
    }
    factory969 := thrift.NewTJSONProtocolFactory()
    jsProt970 := factory969.GetProtocol(mbTrans967)
    argvalue2 := interfaces.NewUint64()
    err971 := argvalue2.Read(context.Background(), jsProt970)
    if err971 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg972 := flag.Arg(4)
    mbTrans973 := thrift.NewTMemoryBufferLen(len(arg972))
    defer mbTrans973.Close()
    _, err974 := mbTrans973.WriteString(arg972)
    if err974 != nil {
      Usage()
      return
    }
    factory975 := thrift.NewTJSONProtocolFactory()
    jsProt976 := factory975.GetProtocol(mbTrans973)
    argvalue3 := interfaces.NewUint64()
    err977 := argvalue3.Read(context.Background(), jsProt976)
    if err977 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg978 := flag.Arg(5)
    mbTrans979 := thrift.NewTMemoryBufferLen(len(arg978))
    defer mbTrans979.Close()
    _, err980 := mbTrans979.WriteString(arg978)
    if err980 != nil {
      Usage()
      return
    }
    factory981 := thrift.NewTJSONProtocolFactory()
    jsProt982 := factory981.GetProtocol(mbTrans979)
    argvalue4 := interfaces.NewUint64()
    err983 := argvalue4.Read(context.Background(), jsProt982)
    if err983 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg984 := flag.Arg(1)
    mbTrans985 := thrift.NewTMemoryBufferLen(len(arg984))
    defer mbTrans985.Close()
    _, err986 := mbTrans985.WriteString(arg984)
    if err986 != nil {
      Usage()
      return
    }
    factory987 := thrift.NewTJSONProtocolFactory()
    jsProt988 := factory987.GetProtocol(mbTrans985)
    argvalue0 := interfaces.NewUint64()
    err989 := argvalue0.Read(context.Background(), jsProt988)
    if err989 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg990 := flag.Arg(2)
    mbTrans991 := thrift.NewTMemoryBufferLen(len(arg990))
    defer mbTrans991.Close()
    _, err992 := mbTrans991.WriteString(arg990)
    if err992 != nil {
      Usage()
      return
    }
    factory993 := thrift.NewTJSONProtocolFactory()
    jsProt994 := factory993.GetProtocol(mbTrans991)
    argvalue1 := interfaces.NewUint64()
    err995 := argvalue1.Read(context.Background(), jsProt994)
    if err995 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg996 := flag.Arg(3)
    mbTrans997 := thrift.NewTMemoryBufferLen(len(arg996))
    defer mbTrans997.Close()
    _, err998 := mbTrans997.WriteString(arg996)
    if err998 != nil {
      Usage()
      return
    }
    factory999 := thrift.NewTJSONProtocolFactory()
    jsProt1000 := factory999.GetProtocol(mbTrans997)
    argvalue2 := interfaces.NewUint64()
    err1001 := argvalue2.Read(context.Background(), jsProt1000)
    if err1001 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1002 := flag.Arg(4)
    mbTrans1003 := thrift.NewTMemoryBufferLen(len(arg1002))
    defer mbTrans1003.Close()
    _, err1004 := mbTrans1003.WriteString(arg1002)
    if err1004 != nil {
      Usage()
      return
    }
    factory1005 := thrift.NewTJSONProtocolFactory()
    jsProt1006 := factory1005.GetProtocol(mbTrans1003)
    argvalue3 := interfaces.NewUint64()
    err1007 := argvalue3.Read(context.Background(), jsProt1006)
    if err1007 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1008 := flag.Arg(5)
    mbTrans1009 := thrift.NewTMemoryBufferLen(len(arg1008))
    defer mbTrans1009.Close()
    _, err1010 := mbTrans1009.WriteString(arg1008)
    if err1010 != nil {
      Usage()
      return
    }
    factory1011 := thrift.NewTJSONProtocolFactory()
    jsProt1012 := factory1011.GetProtocol(mbTrans1009)
    argvalue4 := interfaces.NewUint64()
    err1013 := argvalue4.Read(context.Background(), jsProt1012)
    if err1013 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1014 := flag.Arg(1)
    mbTrans1015 := thrift.NewTMemoryBufferLen(len(arg1014))
    defer mbTrans1015.Close()
    _, err1016 := mbTrans1015.WriteString(arg1014)
    if err1016 != nil {
      Usage()
      return
    }
    factory1017 := thrift.NewTJSONProtocolFactory()
    jsProt1018 := factory1017.GetProtocol(mbTrans1015)
    argvalue0 := interfaces.NewUint64()
    err1019 := argvalue0.Read(context.Background(), jsProt1018)
    if err1019 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1020 := flag.Arg(2)
    mbTrans1021 := thrift.NewTMemoryBufferLen(len(arg1020))
    defer mbTrans1021.Close()
    _, err1022 := mbTrans1021.WriteString(arg1020)
    if err1022 != nil {
      Usage()
      return
    }
    factory1023 := thrift.NewTJSONProtocolFactory()
    jsProt1024 := factory1023.GetProtocol(mbTrans1021)
    argvalue1 := interfaces.NewUint64()
    err1025 := argvalue1.Read(context.Background(), jsProt1024)
    if err1025 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1026 := flag.Arg(3)
    mbTrans1027 := thrift.NewTMemoryBufferLen(len(arg1026))
    defer mbTrans1027.Close()
    _, err1028 := mbTrans1027.WriteString(arg1026)
    if err1028 != nil {
      Usage()
      return
    }
    factory1029 := thrift.NewTJSONProtocolFactory()
    jsProt1030 := factory1029.GetProtocol(mbTrans1027)
    argvalue2 := interfaces.NewUint64()
    err1031 := argvalue2.Read(context.Background(), jsProt1030)
    if err1031 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1032 := flag.Arg(1)
    mbTrans1033 := thrift.NewTMemoryBufferLen(len(arg1032))
    defer mbTrans1033.Close()
    _, err1034 := mbTrans1033.WriteString(arg1032)
    if err1034 != nil {
      Usage()
      return
    }
    factory1035 := thrift.NewTJSONProtocolFactory()
    jsProt1036 := factory1035.GetProtocol(mbTrans1033)
    argvalue0 := interfaces.NewUint64()
    err1037 := argvalue0.Read(context.Background(), jsProt1036)
    if err1037 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1038 := flag.Arg(2)
    mbTrans1039 := thrift.NewTMemoryBufferLen(len(arg1038))
    defer mbTrans1039.Close()
    _, err1040 := mbTrans1039.WriteString(arg1038)
    if err1040 != nil {
      Usage()
      return
    }
    factory1041 := thrift.NewTJSONProtocolFactory()
    jsProt1042 := factory1041.GetProtocol(mbTrans1039)
    argvalue1 := interfaces.NewUint64()
    err1043 := argvalue1.Read(context.Background(), jsProt1042)
    if err1043 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1044 := flag.Arg(3)
    mbTrans1045 := thrift.NewTMemoryBufferLen(len(arg1044))
    defer mbTrans1045.Close()
    _, err1046 := mbTrans1045.WriteString(arg1044)
    if err1046 != nil {
      Usage()
      return
    }
    factory1047 := thrift.NewTJSONProtocolFactory()
    jsProt1048 := factory1047.GetProtocol(mbTrans1045)
    argvalue2 := interfaces.NewUint64()
    err1049 := argvalue2.Read(context.Background(), jsProt1048)
    if err1049 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1050 := flag.Arg(4)
    mbTrans1051 := thrift.NewTMemoryBufferLen(len(arg1050))
    defer mbTrans1051.Close()
    _, err1052 := mbTrans1051.WriteString(arg1050)
    if err1052 != nil {
      Usage()
      return
    }
    factory1053 := thrift.NewTJSONProtocolFactory()
    jsProt1054 := factory1053.GetProtocol(mbTrans1051)
    argvalue3 := interfaces.NewUint64()
    err1055 := argvalue3.Read(context.Background(), jsProt1054)
    if err1055 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1057 := (strconv.Atoi(flag.Arg(1)))
    if err1057 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1058 := flag.Arg(2)
    mbTrans1059 := thrift.NewTMemoryBufferLen(len(arg1058))
    defer mbTrans1059.Close()
    _, err1060 := mbTrans1059.WriteString(arg1058)
    if err1060 != nil {
      Usage()
      return
    }
    factory1061 := thrift.NewTJSONProtocolFactory()
    jsProt1062 := factory1061.GetProtocol(mbTrans1059)
    argvalue1 := interfaces.NewUint64()
    err1063 := argvalue1.Read(context.Background(), jsProt1062)
    if err1063 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1065 := (strconv.Atoi(flag.Arg(1)))
    if err1065 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1066 := (strconv.Atoi(flag.Arg(1)))
    if err1066 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1067 := (strconv.Atoi(flag.Arg(1)))
    if err1067 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1068 := flag.Arg(1)
    mbTrans1069 := thrift.NewTMemoryBufferLen(len(arg1068))
    defer mbTrans1069.Close()
    _, err1070 := mbTrans1069.WriteString(arg1068)
    if err1070 != nil {
      Usage()
      return
    }
    factory1071 := thrift.NewTJSONProtocolFactory()
    jsProt1072 := factory1071.GetProtocol(mbTrans1069)
    argvalue0 := interfaces.NewUint64()
    err1073 := argvalue0.Read(context.Background(), jsProt1072)
    if err1073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1074 := flag.Arg(2)
    mbTrans1075 := thrift.NewTMemoryBufferLen(len(arg1074))
    defer mbTrans1075.Close()
    _, err1076 := mbTrans1075.WriteString(arg1074)
    if err1076 != nil {
      Usage()
      return
    }
    factory1077 := thrift.NewTJSONProtocolFactory()
    jsProt1078 := factory1077.GetProtocol(mbTrans1075)
    argvalue1 := interfaces.NewUint64()
    err1079 := argvalue1.Read(context.Background(), jsProt1078)
    if err1079 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1080 := flag.Arg(3)
    mbTrans1081 := thrift.NewTMemoryBufferLen(len(arg1080))
    defer mbTrans1081.Close()
    _, err1082 := mbTrans1081.WriteString(arg1080)
    if err1082 != nil {
      Usage()
      return
    }
    factory1083 := thrift.NewTJSONProtocolFactory()
    jsProt1084 := factory1083.GetProtocol(mbTrans1081)
    argvalue2 := interfaces.NewUint64()
    err1085 := argvalue2.Read(context.Background(), jsProt1084)
    if err1085 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1086 := flag.Arg(4)
    mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
    defer mbTrans1087.Close()
    _, err1088 := mbTrans1087.WriteString(arg1086)
    if err1088 != nil {
      Usage()
      return
    }
    factory1089 := thrift.NewTJSONProtocolFactory()
    jsProt1090 := factory1089.GetProtocol(mbTrans1087)
    argvalue3 := interfaces.NewUint64()
    err1091 := argvalue3.Read(context.Background(), jsProt1090)
    if err1091 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1092 := flag.Arg(1)
    mbTrans1093 := thrift.NewTMemoryBufferLen(len(arg1092))
    defer mbTrans1093.Close()
    _, err1094 := mbTrans1093.WriteString(arg1092)
    if err1094 != nil {
      Usage()
      return
    }
    factory1095 := thrift.NewTJSONProtocolFactory()
    jsProt1096 := factory1095.GetProtocol(mbTrans1093)
    argvalue0 := interfaces.NewUint64()
    err1097 := argvalue0.Read(context.Background(), jsProt1096)
    if err1097 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1098 := flag.Arg(2)
    mbTrans1099 := thrift.NewTMemoryBufferLen(len(arg1098))
    defer mbTrans1099.Close()
    _, err1100 := mbTrans1099.WriteString(arg1098)
    if err1100 != nil {
      Usage()
      return
    }
    factory1101 := thrift.NewTJSONProtocolFactory()
    jsProt1102 := factory1101.GetProtocol(mbTrans1099)
    argvalue1 := interfaces.NewUint64()
    err1103 := argvalue1.Read(context.Background(), jsProt1102)
    if err1103 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1104 := flag.Arg(3)
    mbTrans1105 := thrift.NewTMemoryBufferLen(len(arg1104))
    defer mbTrans1105.Close()
    _, err1106 := mbTrans1105.WriteString(arg1104)
    if err1106 != nil {
      Usage()
      return
    }
    factory1107 := thrift.NewTJSONProtocolFactory()
    jsProt1108 := factory1107.GetProtocol(mbTrans1105)
    argvalue2 := interfaces.NewUint64()
    err1109 := argvalue2.Read(context.Background(), jsProt1108)
    if err1109 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1111 := flag.Arg(1)
    mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
    defer mbTrans1112.Close()
    _, err1113 := mbTrans1112.WriteString(arg1111)
    if err1113 != nil {
      Usage()
      return
    }
    factory1114 := thrift.NewTJSONProtocolFactory()
    jsProt1115 := factory1114.GetProtocol(mbTrans1112)
    argvalue0 := interfaces.NewUint64()
    err1116 := argvalue0.Read(context.Background(), jsProt1115)
    if err1116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1117 := flag.Arg(2)
    mbTrans1118 := thrift.NewTMemoryBufferLen(len(arg1117))
    defer mbTrans1118.Close()
    _, err1119 := mbTrans1118.WriteString(arg1117)
    if err1119 != nil {
      Usage()
      return
    }
    factory1120 := thrift.NewTJSONProtocolFactory()
    jsProt1121 := factory1120.GetProtocol(mbTrans1118)
    argvalue1 := interfaces.NewUint64()
    err1122 := argvalue1.Read(context.Background(), jsProt1121)
    if err1122 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1123 := flag.Arg(3)
    mbTrans1124 := thrift.NewTMemoryBufferLen(len(arg1123))
    defer mbTrans1124.Close()
    _, err1125 := mbTrans1124.WriteString(arg1123)
    if err1125 != nil {
      Usage()
      return
    }
    factory1126 := thrift.NewTJSONProtocolFactory()
    jsProt1127 := factory1126.GetProtocol(mbTrans1124)
    argvalue2 := interfaces.NewUint64()
    err1128 := argvalue2.Read(context.Background(), jsProt1127)
    if err1128 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1130 := flag.Arg(5)
    mbTrans1131 := thrift.NewTMemoryBufferLen(len(arg1130))
    defer mbTrans1131.Close()
    _, err1132 := mbTrans1131.WriteString(arg1130)
    if err1132 != nil {
      Usage()
      return
    }
    factory1133 := thrift.NewTJSONProtocolFactory()
    jsProt1134 := factory1133.GetProtocol(mbTrans1131)
    argvalue4 := interfaces.NewUint64()
    err1135 := argvalue4.Read(context.Background(), jsProt1134)
    if err1135 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1136 := flag.Arg(1)
    mbTrans1137 := thrift.NewTMemoryBufferLen(len(arg1136))
    defer mbTrans1137.Close()
    _, err1138 := mbTrans1137.WriteString(arg1136)
    if err1138 != nil {
      Usage()
      return
    }
    factory1139 := thrift.NewTJSONProtocolFactory()
    jsProt1140 := factory1139.GetProtocol(mbTrans1137)
    argvalue0 := interfaces.NewUint64()
    err1141 := argvalue0.Read(context.Background(), jsProt1140)
    if err1141 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1142 := flag.Arg(2)
    mbTrans1143 := thrift.NewTMemoryBufferLen(len(arg1142))
    defer mbTrans1143.Close()
    _, err1144 := mbTrans1143.WriteString(arg1142)
    if err1144 != nil {
      Usage()
      return
    }
    factory1145 := thrift.NewTJSONProtocolFactory()
    jsProt1146 := factory1145.GetProtocol(mbTrans1143)
    argvalue1 := interfaces.NewUint64()
    err1147 := argvalue1.Read(context.Background(), jsProt1146)
    if err1147 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1148 := flag.Arg(3)
    mbTrans1149 := thrift.NewTMemoryBufferLen(len(arg1148))
    defer mbTrans1149.Close()
    _, err1150 := mbTrans1149.WriteString(arg1148)
    if err1150 != nil {
      Usage()
      return
    }
    factory1151 := thrift.NewTJSONProtocolFactory()
    jsProt1152 := factory1151.GetProtocol(mbTrans1149)
    argvalue2 := interfaces.NewUint64()
    err1153 := argvalue2.Read(context.Background(), jsProt1152)
    if err1153 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1155 := flag.Arg(5)
    mbTrans1156 := thrift.NewTMemoryBufferLen(len(arg1155))
    defer mbTrans1156.Close()
    _, err1157 := mbTrans1156.WriteString(arg1155)
    if err1157 != nil {
      Usage()
      return
    }
    factory1158 := thrift.NewTJSONProtocolFactory()
    jsProt1159 := factory1158.GetProtocol(mbTrans1156)
    argvalue4 := interfaces.NewUint64()
    err1160 := argvalue4.Read(context.Background(), jsProt1159)
    if err1160 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1161 := flag.Arg(1)
    mbTrans1162 := thrift.NewTMemoryBufferLen(len(arg1161))
    defer mbTrans1162.Close()
    _, err1163 := mbTrans1162.WriteString(arg1161)
    if err1163 != nil {
      Usage()
      return
    }
    factory1164 := thrift.NewTJSONProtocolFactory()
    jsProt1165 := factory1164.GetProtocol(mbTrans1162)
    argvalue0 := interfaces.NewUint64()
    err1166 := argvalue0.Read(context.Background(), jsProt1165)
    if err1166 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1167 := flag.Arg(2)
    mbTrans1168 := thrift.NewTMemoryBufferLen(len(arg1167))
    defer mbTrans1168.Close()
    _, err1169 := mbTrans1168.WriteString(arg1167)
    if err1169 != nil {
      Usage()
      return
    }
    factory1170 := thrift.NewTJSONProtocolFactory()
    jsProt1171 := factory1170.GetProtocol(mbTrans1168)
    argvalue1 := interfaces.NewUint64()
    err1172 := argvalue1.Read(context.Background(), jsProt1171)
    if err1172 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1173 := flag.Arg(3)
    mbTrans1174 := thrift.NewTMemoryBufferLen(len(arg1173))
    defer mbTrans1174.Close()
    _, err1175 := mbTrans1174.WriteString(arg1173)
    if err1175 != nil {
      Usage()
      return
    }
    factory1176 := thrift.NewTJSONProtocolFactory()
    jsProt1177 := factory1176.GetProtocol(mbTrans1174)
    argvalue2 := interfaces.NewUint64()
    err1178 := argvalue2.Read(context.Background(), jsProt1177)
    if err1178 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1179 := flag.Arg(1)
    mbTrans1180 := thrift.NewTMemoryBufferLen(len(arg1179))
    defer mbTrans1180.Close()
    _, err1181 := mbTrans1180.WriteString(arg1179)
    if err1181 != nil {
      Usage()
      return
    }
    factory1182 := thrift.NewTJSONProtocolFactory()
    jsProt1183 := factory1182.GetProtocol(mbTrans1180)
    argvalue0 := interfaces.NewUint64()
    err1184 := argvalue0.Read(context.Background(), jsProt1183)
    if err1184 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1185 := flag.Arg(2)
    mbTrans1186 := thrift.NewTMemoryBufferLen(len(arg1185))
    defer mbTrans1186.Close()
    _, err1187 := mbTrans1186.WriteString(arg1185)
    if err1187 != nil {
      Usage()
      return
    }
    factory1188 := thrift.NewTJSONProtocolFactory()
    jsProt1189 := factory1188.GetProtocol(mbTrans1186)
    argvalue1 := interfaces.NewUint64()
    err1190 := argvalue1.Read(context.Background(), jsProt1189)
    if err1190 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1191 := flag.Arg(3)
    mbTrans1192 := thrift.NewTMemoryBufferLen(len(arg1191))
    defer mbTrans1192.Close()
    _, err1193 := mbTrans1192.WriteString(arg1191)
    if err1193 != nil {
      Usage()
      return
    }
    factory1194 := thrift.NewTJSONProtocolFactory()
    jsProt1195 := factory1194.GetProtocol(mbTrans1192)
    argvalue2 := interfaces.NewUint64()
    err1196 := argvalue2.Read(context.Background(), jsProt1195)
    if err1196 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1197 := flag.Arg(4)
    mbTrans1198 := thrift.NewTMemoryBufferLen(len(arg1197))
    defer mbTrans1198.Close()
    _, err1199 := mbTrans1198.WriteString(arg1197)
    if err1199 != nil {
      Usage()
      return
    }
    factory1200 := thrift.NewTJSONProtocolFactory()
    jsProt1201 := factory1200.GetProtocol(mbTrans1198)
    argvalue3 := interfaces.NewUint64()
    err1202 := argvalue3.Read(context.Background(), jsProt1201)
    if err1202 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1204 := (strconv.Atoi(flag.Arg(1)))
    if err1204 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1205 := flag.Arg(2)
    mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
    defer mbTrans1206.Close()
    _, err1207 := mbTrans1206.WriteString(arg1205)
    if err1207 != nil {
      Usage()
      return
    }
    factory1208 := thrift.NewTJSONProtocolFactory()
    jsProt1209 := factory1208.GetProtocol(mbTrans1206)
    argvalue1 := interfaces.NewUint64()
    err1210 := argvalue1.Read(context.Background(), jsProt1209)
    if err1210 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1212 := (strconv.Atoi(flag.Arg(1)))
    if err1212 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1213 := (strconv.Atoi(flag.Arg(1)))
    if err1213 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1214 := (strconv.Atoi(flag.Arg(1)))
    if err1214 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1215 := flag.Arg(1)
    mbTrans1216 := thrift.NewTMemoryBufferLen(len(arg1215))
    defer mbTrans1216.Close()
    _, err1217 := mbTrans1216.WriteString(arg1215)
    if err1217 != nil {
      Usage()
      return
    }
    factory1218 := thrift.NewTJSONProtocolFactory()
    jsProt1219 := factory1218.GetProtocol(mbTrans1216)
    argvalue0 := interfaces.NewUint64()
    err1220 := argvalue0.Read(context.Background(), jsProt1219)
    if err1220 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1221 := flag.Arg(2)
    mbTrans1222 := thrift.NewTMemoryBufferLen(len(arg1221))
    defer mbTrans1222.Close()
    _, err1223 := mbTrans1222.WriteString(arg1221)
    if err1223 != nil {
      Usage()
      return
    }
    factory1224 := thrift.NewTJSONProtocolFactory()
    jsProt1225 := factory1224.GetProtocol(mbTrans1222)
    argvalue1 := interfaces.NewUint64()
    err1226 := argvalue1.Read(context.Background(), jsProt1225)
    if err1226 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1227 := flag.Arg(3)
    mbTrans1228 := thrift.NewTMemoryBufferLen(len(arg1227))
    defer mbTrans1228.Close()
    _, err1229 := mbTrans1228.WriteString(arg1227)
    if err1229 != nil {
      Usage()
      return
    }
    factory1230 := thrift.NewTJSONProtocolFactory()
    jsProt1231 := factory1230.GetProtocol(mbTrans1228)
    argvalue2 := interfaces.NewUint64()
    err1232 := argvalue2.Read(context.Background(), jsProt1231)
    if err1232 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1233 := flag.Arg(4)
    mbTrans1234 := thrift.NewTMemoryBufferLen(len(arg1233))
    defer mbTrans1234.Close()
    _, err1235 := mbTrans1234.WriteString(arg1233)
    if err1235 != nil {
      Usage()
      return
    }
    factory1236 := thrift.NewTJSONProtocolFactory()
    jsProt1237 := factory1236.GetProtocol(mbTrans1234)
    argvalue3 := interfaces.NewUint64()
    err1238 := argvalue3.Read(context.Background(), jsProt1237)
    if err1238 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1239 := flag.Arg(1)
    mbTrans1240 := thrift.NewTMemoryBufferLen(len(arg1239))
    defer mbTrans1240.Close()
    _, err1241 := mbTrans1240.WriteString(arg1239)
    if err1241 != nil {
      Usage()
      return
    }
    factory1242 := thrift.NewTJSONProtocolFactory()
    jsProt1243 := factory1242.GetProtocol(mbTrans1240)
    argvalue0 := interfaces.NewUint64()
    err1244 := argvalue0.Read(context.Background(), jsProt1243)
    if err1244 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1245 := flag.Arg(2)
    mbTrans1246 := thrift.NewTMemoryBufferLen(len(arg1245))
    defer mbTrans1246.Close()
    _, err1247 := mbTrans1246.WriteString(arg1245)
    if err1247 != nil {
      Usage()
      return
    }
    factory1248 := thrift.NewTJSONProtocolFactory()
    jsProt1249 := factory1248.GetProtocol(mbTrans1246)
    argvalue1 := interfaces.NewUint64()
    err1250 := argvalue1.Read(context.Background(), jsProt1249)
    if err1250 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1251 := flag.Arg(3)
    mbTrans1252 := thrift.NewTMemoryBufferLen(len(arg1251))
    defer mbTrans1252.Close()
    _, err1253 := mbTrans1252.WriteString(arg1251)
    if err1253 != nil {
      Usage()
      return
    }
    factory1254 := thrift.NewTJSONProtocolFactory()
    jsProt1255 := factory1254.GetProtocol(mbTrans1252)
    argvalue2 := interfaces.NewUint64()
    err1256 := argvalue2.Read(context.Background(), jsProt1255)
    if err1256 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1258 := flag.Arg(1)
    mbTrans1259 := thrift.NewTMemoryBufferLen(len(arg1258))
    defer mbTrans1259.Close()
    _, err1260 := mbTrans1259.WriteString(arg1258)
    if err1260 != nil {
      Usage()
      return
    }
    factory1261 := thrift.NewTJSONProtocolFactory()
    jsProt1262 := factory1261.GetProtocol(mbTrans1259)
    argvalue0 := interfaces.NewUint64()
    err1263 := argvalue0.Read(context.Background(), jsProt1262)
    if err1263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1264 := flag.Arg(2)
    mbTrans1265 := thrift.NewTMemoryBufferLen(len(arg1264))
    defer mbTrans1265.Close()
    _, err1266 := mbTrans1265.WriteString(arg1264)
    if err1266 != nil {
      Usage()
      return
    }
    factory1267 := thrift.NewTJSONProtocolFactory()
    jsProt1268 := factory1267.GetProtocol(mbTrans1265)
    argvalue1 := interfaces.NewUint64()
    err1269 := argvalue1.Read(context.Background(), jsProt1268)
    if err1269 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1270 := flag.Arg(3)
    mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
    defer mbTrans1271.Close()
    _, err1272 := mbTrans1271.WriteString(arg1270)
    if err1272 != nil {
      Usage()
      return
    }
    factory1273 := thrift.NewTJSONProtocolFactory()
    jsProt1274 := factory1273.GetProtocol(mbTrans1271)
    argvalue2 := interfaces.NewUint64()
    err1275 := argvalue2.Read(context.Background(), jsProt1274)
    if err1275 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1277 := flag.Arg(5)
    mbTrans1278 := thrift.NewTMemoryBufferLen(len(arg1277))
    defer mbTrans1278.Close()
    _, err1279 := mbTrans1278.WriteString(arg1277)
    if err1279 != nil {
      Usage()
      return
    }
    factory1280 := thrift.NewTJSONProtocolFactory()
    jsProt1281 := factory1280.GetProtocol(mbTrans1278)
    argvalue4 := interfaces.NewUint64()
    err1282 := argvalue4.Read(context.Background(), jsProt1281)
    if err1282 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1283 := flag.Arg(1)
    mbTrans1284 := thrift.NewTMemoryBufferLen(len(arg1283))
    defer mbTrans1284.Close()
    _, err1285 := mbTrans1284.WriteString(arg1283)
    if err1285 != nil {
      Usage()
      return
    }
    factory1286 := thrift.NewTJSONProtocolFactory()
    jsProt1287 := factory1286.GetProtocol(mbTrans1284)
    argvalue0 := interfaces.NewUint64()
    err1288 := argvalue0.Read(context.Background(), jsProt1287)
    if err1288 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1289 := flag.Arg(2)
    mbTrans1290 := thrift.NewTMemoryBufferLen(len(arg1289))
    defer mbTrans1290.Close()
    _, err1291 := mbTrans1290.WriteString(arg1289)
    if err1291 != nil {
      Usage()
      return
    }
    factory1292 := thrift.NewTJSONProtocolFactory()
    jsProt1293 := factory1292.GetProtocol(mbTrans1290)
    argvalue1 := interfaces.NewUint64()
    err1294 := argvalue1.Read(context.Background(), jsProt1293)
    if err1294 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1295 := flag.Arg(3)
    mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
    defer mbTrans1296.Close()
    _, err1297 := mbTrans1296.WriteString(arg1295)
    if err1297 != nil {
      Usage()
      return
    }
    factory1298 := thrift.NewTJSONProtocolFactory()
    jsProt1299 := factory1298.GetProtocol(mbTrans1296)
    argvalue2 := interfaces.NewUint64()
    err1300 := argvalue2.Read(context.Background(), jsProt1299)
    if err1300 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1302 := flag.Arg(5)
    mbTrans1303 := thrift.NewTMemoryBufferLen(len(arg1302))
    defer mbTrans1303.Close()
    _, err1304 := mbTrans1303.WriteString(arg1302)
    if err1304 != nil {
      Usage()
      return
    }
    factory1305 := thrift.NewTJSONProtocolFactory()
    jsProt1306 := factory1305.GetProtocol(mbTrans1303)
    argvalue4 := interfaces.NewUint64()
    err1307 := argvalue4.Read(context.Background(), jsProt1306)
    if err1307 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1308 := flag.Arg(1)
    mbTrans1309 := thrift.NewTMemoryBufferLen(len(arg1308))
    defer mbTrans1309.Close()
    _, err1310 := mbTrans1309.WriteString(arg1308)
    if err1310 != nil {
      Usage()
      return
    }
    factory1311 := thrift.NewTJSONProtocolFactory()
    jsProt1312 := factory1311.GetProtocol(mbTrans1309)
    argvalue0 := interfaces.NewUint64()
    err1313 := argvalue0.Read(context.Background(), jsProt1312)
    if err1313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1314 := flag.Arg(2)
    mbTrans1315 := thrift.NewTMemoryBufferLen(len(arg1314))
    defer mbTrans1315.Close()
    _, err1316 := mbTrans1315.WriteString(arg1314)
    if err1316 != nil {
      Usage()
      return
    }
    factory1317 := thrift.NewTJSONProtocolFactory()
    jsProt1318 := factory1317.GetProtocol(mbTrans1315)
    argvalue1 := interfaces.NewUint64()
    err1319 := argvalue1.Read(context.Background(), jsProt1318)
    if err1319 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1320 := flag.Arg(3)
    mbTrans1321 := thrift.NewTMemoryBufferLen(len(arg1320))
    defer mbTrans1321.Close()
    _, err1322 := mbTrans1321.WriteString(arg1320)
    if err1322 != nil {
      Usage()
      return
    }
    factory1323 := thrift.NewTJSONProtocolFactory()
    jsProt1324 := factory1323.GetProtocol(mbTrans1321)
    argvalue2 := interfaces.NewUint64()
    err1325 := argvalue2.Read(context.Background(), jsProt1324)
    if err1325 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1326 := flag.Arg(1)
    mbTrans1327 := thrift.NewTMemoryBufferLen(len(arg1326))
    defer mbTrans1327.Close()
    _, err1328 := mbTrans1327.WriteString(arg1326)
    if err1328 != nil {
      Usage()
      return
    }
    factory1329 := thrift.NewTJSONProtocolFactory()
    jsProt1330 := factory1329.GetProtocol(mbTrans1327)
    argvalue0 := interfaces.NewUint64()
    err1331 := argvalue0.Read(context.Background(), jsProt1330)
    if err1331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1332 := flag.Arg(2)
    mbTrans1333 := thrift.NewTMemoryBufferLen(len(arg1332))
    defer mbTrans1333.Close()
    _, err1334 := mbTrans1333.WriteString(arg1332)
    if err1334 != nil {
      Usage()
      return
    }
    factory1335 := thrift.NewTJSONProtocolFactory()
    jsProt1336 := factory1335.GetProtocol(mbTrans1333)
    argvalue1 := interfaces.NewUint64()
    err1337 := argvalue1.Read(context.Background(), jsProt1336)
    if err1337 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1338 := flag.Arg(3)
    mbTrans1339 := thrift.NewTMemoryBufferLen(len(arg1338))
    defer mbTrans1339.Close()
    _, err1340 := mbTrans1339.WriteString(arg1338)
    if err1340 != nil {
      Usage()
      return
    }
    factory1341 := thrift.NewTJSONProtocolFactory()
    jsProt1342 := factory1341.GetProtocol(mbTrans1339)
    argvalue2 := interfaces.NewUint64()
    err1343 := argvalue2.Read(context.Background(), jsProt1342)
    if err1343 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1344 := flag.Arg(4)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue3 := interfaces.NewUint64()
    err1349 := argvalue3.Read(context.Background(), jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1351 := (strconv.Atoi(flag.Arg(1)))
    if err1351 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1352 := flag.Arg(2)
    mbTrans1353 := thrift.NewTMemoryBufferLen(len(arg1352))
    defer mbTrans1353.Close()
    _, err1354 := mbTrans1353.WriteString(arg1352)
    if err1354 != nil {
      Usage()
      return
    }
    factory1355 := thrift.NewTJSONProtocolFactory()
    jsProt1356 := factory1355.GetProtocol(mbTrans1353)
    argvalue1 := interfaces.NewUint64()
    err1357 := argvalue1.Read(context.Background(), jsProt1356)
    if err1357 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1359 := (strconv.Atoi(flag.Arg(1)))
    if err1359 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1360 := (strconv.Atoi(flag.Arg(1)))
    if err1360 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1361 := (strconv.Atoi(flag.Arg(1)))
    if err1361 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1362 := flag.Arg(1)
    mbTrans1363 := thrift.NewTMemoryBufferLen(len(arg1362))
    defer mbTrans1363.Close()
    _, err1364 := mbTrans1363.WriteString(arg1362)
    if err1364 != nil {
      Usage()
      return
    }
    factory1365 := thrift.NewTJSONProtocolFactory()
    jsProt1366 := factory1365.GetProtocol(mbTrans1363)
    argvalue0 := interfaces.NewUint64()
    err1367 := argvalue0.Read(context.Background(), jsProt1366)
    if err1367 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1368 := flag.Arg(2)
    mbTrans1369 := thrift.NewTMemoryBufferLen(len(arg1368))
    defer mbTrans1369.Close()
    _, err1370 := mbTrans1369.WriteString(arg1368)
    if err1370 != nil {
      Usage()
      return
    }
    factory1371 := thrift.NewTJSONProtocolFactory()
    jsProt1372 := factory1371.GetProtocol(mbTrans1369)
    argvalue1 := interfaces.NewUint64()
    err1373 := argvalue1.Read(context.Background(), jsProt1372)
    if err1373 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1374 := flag.Arg(3)
    mbTrans1375 := thrift.NewTMemoryBufferLen(len(arg1374))
    defer mbTrans1375.Close()
    _, err1376 := mbTrans1375.WriteString(arg1374)
    if err1376 != nil {
      Usage()
      return
    }
    factory1377 := thrift.NewTJSONProtocolFactory()
    jsProt1378 := factory1377.GetProtocol(mbTrans1375)
    argvalue2 := interfaces.NewUint64()
    err1379 := argvalue2.Read(context.Background(), jsProt1378)
    if err1379 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1380 := flag.Arg(4)
    mbTrans1381 := thrift.NewTMemoryBufferLen(len(arg1380))
    defer mbTrans1381.Close()
    _, err1382 := mbTrans1381.WriteString(arg1380)
    if err1382 != nil {
      Usage()
      return
    }
    factory1383 := thrift.NewTJSONProtocolFactory()
    jsProt1384 := factory1383.GetProtocol(mbTrans1381)
    argvalue3 := interfaces.NewUint64()
    err1385 := argvalue3.Read(context.Background(), jsProt1384)
    if err1385 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1386 := flag.Arg(1)
    mbTrans1387 := thrift.NewTMemoryBufferLen(len(arg1386))
    defer mbTrans1387.Close()
    _, err1388 := mbTrans1387.WriteString(arg1386)
    if err1388 != nil {
      Usage()
      return
    }
    factory1389 := thrift.NewTJSONProtocolFactory()
    jsProt1390 := factory1389.GetProtocol(mbTrans1387)
    argvalue0 := interfaces.NewUint64()
    err1391 := argvalue0.Read(context.Background(), jsProt1390)
    if err1391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1392 := flag.Arg(2)
    mbTrans1393 := thrift.NewTMemoryBufferLen(len(arg1392))
    defer mbTrans1393.Close()
    _, err1394 := mbTrans1393.WriteString(arg1392)
    if err1394 != nil {
      Usage()
      return
    }
    factory1395 := thrift.NewTJSONProtocolFactory()
    jsProt1396 := factory1395.GetProtocol(mbTrans1393)
    argvalue1 := interfaces.NewUint64()
    err1397 := argvalue1.Read(context.Background(), jsProt1396)
    if err1397 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1398 := flag.Arg(3)
    mbTrans1399 := thrift.NewTMemoryBufferLen(len(arg1398))
    defer mbTrans1399.Close()
    _, err1400 := mbTrans1399.WriteString(arg1398)
    if err1400 != nil {
      Usage()
      return
    }
    factory1401 := thrift.NewTJSONProtocolFactory()
    jsProt1402 := factory1401.GetProtocol(mbTrans1399)
    argvalue2 := interfaces.NewUint64()
    err1403 := argvalue2.Read(context.Background(), jsProt1402)
    if err1403 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1405 := flag.Arg(1)
    mbTrans1406 := thrift.NewTMemoryBufferLen(len(arg1405))
    defer mbTrans1406.Close()
    _, err1407 := mbTrans1406.WriteString(arg1405)
    if err1407 != nil {
      Usage()
      return
    }
    factory1408 := thrift.NewTJSONProtocolFactory()
    jsProt1409 := factory1408.GetProtocol(mbTrans1406)
    argvalue0 := interfaces.NewUint64()
    err1410 := argvalue0.Read(context.Background(), jsProt1409)
    if err1410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1411 := flag.Arg(2)
    mbTrans1412 := thrift.NewTMemoryBufferLen(len(arg1411))
    defer mbTrans1412.Close()
    _, err1413 := mbTrans1412.WriteString(arg1411)
    if err1413 != nil {
      Usage()
      return
    }
    factory1414 := thrift.NewTJSONProtocolFactory()
    jsProt1415 := factory1414.GetProtocol(mbTrans1412)
    argvalue1 := interfaces.NewUint64()
    err1416 := argvalue1.Read(context.Background(), jsProt1415)
    if err1416 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1417 := flag.Arg(3)
    mbTrans1418 := thrift.NewTMemoryBufferLen(len(arg1417))
    defer mbTrans1418.Close()
    _, err1419 := mbTrans1418.WriteString(arg1417)
    if err1419 != nil {
      Usage()
      return
    }
    factory1420 := thrift.NewTJSONProtocolFactory()
    jsProt1421 := factory1420.GetProtocol(mbTrans1418)
    argvalue2 := interfaces.NewUint64()
    err1422 := argvalue2.Read(context.Background(), jsProt1421)
    if err1422 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1424 := flag.Arg(5)
    mbTrans1425 := thrift.NewTMemoryBufferLen(len(arg1424))
    defer mbTrans1425.Close()
    _, err1426 := mbTrans1425.WriteString(arg1424)
    if err1426 != nil {
      Usage()
      return
    }
    factory1427 := thrift.NewTJSONProtocolFactory()
    jsProt1428 := factory1427.GetProtocol(mbTrans1425)
    argvalue4 := interfaces.NewUint64()
    err1429 := argvalue4.Read(context.Background(), jsProt1428)
    if err1429 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1430 := flag.Arg(1)
    mbTrans1431 := thrift.NewTMemoryBufferLen(len(arg1430))
    defer mbTrans1431.Close()
    _, err1432 := mbTrans1431.WriteString(arg1430)
    if err1432 != nil {
      Usage()
      return
    }
    factory1433 := thrift.NewTJSONProtocolFactory()
    jsProt1434 := factory1433.GetProtocol(mbTrans1431)
    argvalue0 := interfaces.NewUint64()
    err1435 := argvalue0.Read(context.Background(), jsProt1434)
    if err1435 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1436 := flag.Arg(2)
    mbTrans1437 := thrift.NewTMemoryBufferLen(len(arg1436))
    defer mbTrans1437.Close()
    _, err1438 := mbTrans1437.WriteString(arg1436)
    if err1438 != nil {
      Usage()
      return
    }
    factory1439 := thrift.NewTJSONProtocolFactory()
    jsProt1440 := factory1439.GetProtocol(mbTrans1437)
    argvalue1 := interfaces.NewUint64()
    err1441 := argvalue1.Read(context.Background(), jsProt1440)
    if err1441 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1442 := flag.Arg(3)
    mbTrans1443 := thrift.NewTMemoryBufferLen(len(arg1442))
    defer mbTrans1443.Close()
    _, err1444 := mbTrans1443.WriteString(arg1442)
    if err1444 != nil {
      Usage()
      return
    }
    factory1445 := thrift.NewTJSONProtocolFactory()
    jsProt1446 := factory1445.GetProtocol(mbTrans1443)
    argvalue2 := interfaces.NewUint64()
    err1447 := argvalue2.Read(context.Background(), jsProt1446)
    if err1447 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1449 := flag.Arg(5)
    mbTrans1450 := thrift.NewTMemoryBufferLen(len(arg1449))
    defer mbTrans1450.Close()
    _, err1451 := mbTrans1450.WriteString(arg1449)
    if err1451 != nil {
      Usage()
      return
    }
    factory1452 := thrift.NewTJSONProtocolFactory()
    jsProt1453 := factory1452.GetProtocol(mbTrans1450)
    argvalue4 := interfaces.NewUint64()
    err1454 := argvalue4.Read(context.Background(), jsProt1453)
    if err1454 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1455 := flag.Arg(1)
    mbTrans1456 := thrift.NewTMemoryBufferLen(len(arg1455))
    defer mbTrans1456.Close()
    _, err1457 := mbTrans1456.WriteString(arg1455)
    if err1457 != nil {
      Usage()
      return
    }
    factory1458 := thrift.NewTJSONProtocolFactory()
    jsProt1459 := factory1458.GetProtocol(mbTrans1456)
    argvalue0 := interfaces.NewUint64()
    err1460 := argvalue0.Read(context.Background(), jsProt1459)
    if err1460 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1461 := flag.Arg(2)
    mbTrans1462 := thrift.NewTMemoryBufferLen(len(arg1461))
    defer mbTrans1462.Close()
    _, err1463 := mbTrans1462.WriteString(arg1461)
    if err1463 != nil {
      Usage()
      return
    }
    factory1464 := thrift.NewTJSONProtocolFactory()
    jsProt1465 := factory1464.GetProtocol(mbTrans1462)
    argvalue1 := interfaces.NewUint64()
    err1466 := argvalue1.Read(context.Background(), jsProt1465)
    if err1466 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1467 := flag.Arg(3)
    mbTrans1468 := thrift.NewTMemoryBufferLen(len(arg1467))
    defer mbTrans1468.Close()
    _, err1469 := mbTrans1468.WriteString(arg1467)
    if err1469 != nil {
      Usage()
      return
    }
    factory1470 := thrift.NewTJSONProtocolFactory()
    jsProt1471 := factory1470.GetProtocol(mbTrans1468)
    argvalue2 := interfaces.NewUint64()
    err1472 := argvalue2.Read(context.Background(), jsProt1471)
    if err1472 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1473 := flag.Arg(1)
    mbTrans1474 := thrift.NewTMemoryBufferLen(len(arg1473))
    defer mbTrans1474.Close()
    _, err1475 := mbTrans1474.WriteString(arg1473)
    if err1475 != nil {
      Usage()
      return
    }
    factory1476 := thrift.NewTJSONProtocolFactory()
    jsProt1477 := factory1476.GetProtocol(mbTrans1474)
    argvalue0 := interfaces.NewUint64()
    err1478 := argvalue0.Read(context.Background(), jsProt1477)
    if err1478 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1479 := flag.Arg(2)
    mbTrans1480 := thrift.NewTMemoryBufferLen(len(arg1479))
    defer mbTrans1480.Close()
    _, err1481 := mbTrans1480.WriteString(arg1479)
    if err1481 != nil {
      Usage()
      return
    }
    factory1482 := thrift.NewTJSONProtocolFactory()
    jsProt1483 := factory1482.GetProtocol(mbTrans1480)
    argvalue1 := interfaces.NewUint64()
    err1484 := argvalue1.Read(context.Background(), jsProt1483)
    if err1484 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1485 := flag.Arg(3)
    mbTrans1486 := thrift.NewTMemoryBufferLen(len(arg1485))
    defer mbTrans1486.Close()
    _, err1487 := mbTrans1486.WriteString(arg1485)
    if err1487 != nil {
      Usage()
      return
    }
    factory1488 := thrift.NewTJSONProtocolFactory()
    jsProt1489 := factory1488.GetProtocol(mbTrans1486)
    argvalue2 := interfaces.NewUint64()
    err1490 := argvalue2.Read(context.Background(), jsProt1489)
    if err1490 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1491 := flag.Arg(4)
    mbTrans1492 := thrift.NewTMemoryBufferLen(len(arg1491))
    defer mbTrans1492.Close()
    _, err1493 := mbTrans1492.WriteString(arg1491)
    if err1493 != nil {
      Usage()
      return
    }
    factory1494 := thrift.NewTJSONProtocolFactory()
    jsProt1495 := factory1494.GetProtocol(mbTrans1492)
    argvalue3 := interfaces.NewUint64()
    err1496 := argvalue3.Read(context.Background(), jsProt1495)
    if err1496 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1498 := (strconv.Atoi(flag.Arg(1)))
    if err1498 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1499 := flag.Arg(2)
    mbTrans1500 := thrift.NewTMemoryBufferLen(len(arg1499))
    defer mbTrans1500.Close()
    _, err1501 := mbTrans1500.WriteString(arg1499)
    if err1501 != nil {
      Usage()
      return
    }
    factory1502 := thrift.NewTJSONProtocolFactory()
    jsProt1503 := factory1502.GetProtocol(mbTrans1500)
    argvalue1 := interfaces.NewUint64()
    err1504 := argvalue1.Read(context.Background(), jsProt1503)
    if err1504 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1506 := (strconv.Atoi(flag.Arg(1)))
    if err1506 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1507 := (strconv.Atoi(flag.Arg(1)))
    if err1507 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1508 := (strconv.Atoi(flag.Arg(1)))
    if err1508 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1509 := flag.Arg(1)
    mbTrans1510 := thrift.NewTMemoryBufferLen(len(arg1509))
    defer mbTrans1510.Close()
    _, err1511 := mbTrans1510.WriteString(arg1509)
    if err1511 != nil {
      Usage()
      return
    }
    factory1512 := thrift.NewTJSONProtocolFactory()
    jsProt1513 := factory1512.GetProtocol(mbTrans1510)
    argvalue0 := interfaces.NewUint64()
    err1514 := argvalue0.Read(context.Background(), jsProt1513)
    if err1514 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1515 := flag.Arg(2)
    mbTrans1516 := thrift.NewTMemoryBufferLen(len(arg1515))
    defer mbTrans1516.Close()
    _, err1517 := mbTrans1516.WriteString(arg1515)
    if err1517 != nil {
      Usage()
      return
    }
    factory1518 := thrift.NewTJSONProtocolFactory()
    jsProt1519 := factory1518.GetProtocol(mbTrans1516)
    argvalue1 := interfaces.NewUint64()
    err1520 := argvalue1.Read(context.Background(), jsProt1519)
    if err1520 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1521 := flag.Arg(3)
    mbTrans1522 := thrift.NewTMemoryBufferLen(len(arg1521))
    defer mbTrans1522.Close()
    _, err1523 := mbTrans1522.WriteString(arg1521)
    if err1523 != nil {
      Usage()
      return
    }
    factory1524 := thrift.NewTJSONProtocolFactory()
    jsProt1525 := factory1524.GetProtocol(mbTrans1522)
    argvalue2 := interfaces.NewUint64()
    err1526 := argvalue2.Read(context.Background(), jsProt1525)
    if err1526 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1527 := flag.Arg(4)
    mbTrans1528 := thrift.NewTMemoryBufferLen(len(arg1527))
    defer mbTrans1528.Close()
    _, err1529 := mbTrans1528.WriteString(arg1527)
    if err1529 != nil {
      Usage()
      return
    }
    factory1530 := thrift.NewTJSONProtocolFactory()
    jsProt1531 := factory1530.GetProtocol(mbTrans1528)
    argvalue3 := interfaces.NewUint64()
    err1532 := argvalue3.Read(context.Background(), jsProt1531)
    if err1532 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1533 := flag.Arg(1)
    mbTrans1534 := thrift.NewTMemoryBufferLen(len(arg1533))
    defer mbTrans1534.Close()
    _, err1535 := mbTrans1534.WriteString(arg1533)
    if err1535 != nil {
      Usage()
      return
    }
    factory1536 := thrift.NewTJSONProtocolFactory()
    jsProt1537 := factory1536.GetProtocol(mbTrans1534)
    argvalue0 := interfaces.NewUint64()
    err1538 := argvalue0.Read(context.Background(), jsProt1537)
    if err1538 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1539 := flag.Arg(2)
    mbTrans1540 := thrift.NewTMemoryBufferLen(len(arg1539))
    defer mbTrans1540.Close()
    _, err1541 := mbTrans1540.WriteString(arg1539)
    if err1541 != nil {
      Usage()
      return
    }
    factory1542 := thrift.NewTJSONProtocolFactory()
    jsProt1543 := factory1542.GetProtocol(mbTrans1540)
    argvalue1 := interfaces.NewUint64()
    err1544 := argvalue1.Read(context.Background(), jsProt1543)
    if err1544 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1545 := flag.Arg(3)
    mbTrans1546 := thrift.NewTMemoryBufferLen(len(arg1545))
    defer mbTrans1546.Close()
    _, err1547 := mbTrans1546.WriteString(arg1545)
    if err1547 != nil {
      Usage()
      return
    }
    factory1548 := thrift.NewTJSONProtocolFactory()
    jsProt1549 := factory1548.GetProtocol(mbTrans1546)
    argvalue2 := interfaces.NewUint64()
    err1550 := argvalue2.Read(context.Background(), jsProt1549)
    if err1550 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1552 := flag.Arg(1)
    mbTrans1553 := thrift.NewTMemoryBufferLen(len(arg1552))
    defer mbTrans1553.Close()
    _, err1554 := mbTrans1553.WriteString(arg1552)
    if err1554 != nil {
      Usage()
      return
    }
    factory1555 := thrift.NewTJSONProtocolFactory()
    jsProt1556 := factory1555.GetProtocol(mbTrans1553)
    argvalue0 := interfaces.NewUint64()
    err1557 := argvalue0.Read(context.Background(), jsProt1556)
    if err1557 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1558 := flag.Arg(2)
    mbTrans1559 := thrift.NewTMemoryBufferLen(len(arg1558))
    defer mbTrans1559.Close()
    _, err1560 := mbTrans1559.WriteString(arg1558)
    if err1560 != nil {
      Usage()
      return
    }
    factory1561 := thrift.NewTJSONProtocolFactory()
    jsProt1562 := factory1561.GetProtocol(mbTrans1559)
    argvalue1 := interfaces.NewUint64()
    err1563 := argvalue1.Read(context.Background(), jsProt1562)
    if err1563 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1564 := flag.Arg(3)
    mbTrans1565 := thrift.NewTMemoryBufferLen(len(arg1564))
    defer mbTrans1565.Close()
    _, err1566 := mbTrans1565.WriteString(arg1564)
    if err1566 != nil {
      Usage()
      return
    }
    factory1567 := thrift.NewTJSONProtocolFactory()
    jsProt1568 := factory1567.GetProtocol(mbTrans1565)
    argvalue2 := interfaces.NewUint64()
    err1569 := argvalue2.Read(context.Background(), jsProt1568)
    if err1569 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1571 := flag.Arg(5)
    mbTrans1572 := thrift.NewTMemoryBufferLen(len(arg1571))
    defer mbTrans1572.Close()
    _, err1573 := mbTrans1572.WriteString(arg1571)
    if err1573 != nil {
      Usage()
      return
    }
    factory1574 := thrift.NewTJSONProtocolFactory()
    jsProt1575 := factory1574.GetProtocol(mbTrans1572)
    argvalue4 := interfaces.NewUint64()
    err1576 := argvalue4.Read(context.Background(), jsProt1575)
    if err1576 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1577 := flag.Arg(1)
    mbTrans1578 := thrift.NewTMemoryBufferLen(len(arg1577))
    defer mbTrans1578.Close()
    _, err1579 := mbTrans1578.WriteString(arg1577)
    if err1579 != nil {
      Usage()
      return
    }
    factory1580 := thrift.NewTJSONProtocolFactory()
    jsProt1581 := factory1580.GetProtocol(mbTrans1578)
    argvalue0 := interfaces.NewUint64()
    err1582 := argvalue0.Read(context.Background(), jsProt1581)
    if err1582 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1583 := flag.Arg(2)
    mbTrans1584 := thrift.NewTMemoryBufferLen(len(arg1583))
    defer mbTrans1584.Close()
    _, err1585 := mbTrans1584.WriteString(arg1583)
    if err1585 != nil {
      Usage()
      return
    }
    factory1586 := thrift.NewTJSONProtocolFactory()
    jsProt1587 := factory1586.GetProtocol(mbTrans1584)
    argvalue1 := interfaces.NewUint64()
    err1588 := argvalue1.Read(context.Background(), jsProt1587)
    if err1588 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1589 := flag.Arg(3)
    mbTrans1590 := thrift.NewTMemoryBufferLen(len(arg1589))
    defer mbTrans1590.Close()
    _, err1591 := mbTrans1590.WriteString(arg1589)
    if err1591 != nil {
      Usage()
      return
    }
    factory1592 := thrift.NewTJSONProtocolFactory()
    jsProt1593 := factory1592.GetProtocol(mbTrans1590)
    argvalue2 := interfaces.NewUint64()
    err1594 := argvalue2.Read(context.Background(), jsProt1593)
    if err1594 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1596 := flag.Arg(5)
    mbTrans1597 := thrift.NewTMemoryBufferLen(len(arg1596))
    defer mbTrans1597.Close()
    _, err1598 := mbTrans1597.WriteString(arg1596)
    if err1598 != nil {
      Usage()
      return
    }
    factory1599 := thrift.NewTJSONProtocolFactory()
    jsProt1600 := factory1599.GetProtocol(mbTrans1597)
    argvalue4 := interfaces.NewUint64()
    err1601 := argvalue4.Read(context.Background(), jsProt1600)
    if err1601 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1602 := flag.Arg(1)
    mbTrans1603 := thrift.NewTMemoryBufferLen(len(arg1602))
    defer mbTrans1603.Close()
    _, err1604 := mbTrans1603.WriteString(arg1602)
    if err1604 != nil {
      Usage()
      return
    }
    factory1605 := thrift.NewTJSONProtocolFactory()
    jsProt1606 := factory1605.GetProtocol(mbTrans1603)
    argvalue0 := interfaces.NewUint64()
    err1607 := argvalue0.Read(context.Background(), jsProt1606)
    if err1607 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1608 := flag.Arg(2)
    mbTrans1609 := thrift.NewTMemoryBufferLen(len(arg1608))
    defer mbTrans1609.Close()
    _, err1610 := mbTrans1609.WriteString(arg1608)
    if err1610 != nil {
      Usage()
      return
    }
    factory1611 := thrift.NewTJSONProtocolFactory()
    jsProt1612 := factory1611.GetProtocol(mbTrans1609)
    argvalue1 := interfaces.NewUint64()
    err1613 := argvalue1.Read(context.Background(), jsProt1612)
    if err1613 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1614 := flag.Arg(3)
    mbTrans1615 := thrift.NewTMemoryBufferLen(len(arg1614))
    defer mbTrans1615.Close()
    _, err1616 := mbTrans1615.WriteString(arg1614)
    if err1616 != nil {
      Usage()
      return
    }
    factory1617 := thrift.NewTJSONProtocolFactory()
    jsProt1618 := factory1617.GetProtocol(mbTrans1615)
    argvalue2 := interfaces.NewUint64()
    err1619 := argvalue2.Read(context.Background(), jsProt1618)
    if err1619 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
