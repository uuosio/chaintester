// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  string get_active_producers()")
  fmt.Fprintln(os.Stderr, "  GetResourceLimitsReturn get_resource_limits(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_resource_limits(Uint64 account, i64 ram_bytes, i64 net_weight, i64 cpu_weight)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers(string producer_data)")
  fmt.Fprintln(os.Stderr, "  i64 set_proposed_producers_ex(Uint64 producer_data_format, string producer_data)")
  fmt.Fprintln(os.Stderr, "  bool is_privileged(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void set_privileged(Uint64 account, bool is_priv)")
  fmt.Fprintln(os.Stderr, "  void set_blockchain_parameters_packed(string data)")
  fmt.Fprintln(os.Stderr, "  string get_blockchain_parameters_packed()")
  fmt.Fprintln(os.Stderr, "  void preactivate_feature(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  i32 check_transaction_authorization(string trx_data, string pubkeys_data, string perms_data)")
  fmt.Fprintln(os.Stderr, "  i32 check_permission_authorization(Uint64 account, Uint64 permission, string pubkeys_data, string perms_data, Uint64 delay_us)")
  fmt.Fprintln(os.Stderr, "  i64 get_permission_last_used(Uint64 account, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  i64 get_account_creation_time(Uint64 account)")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "get_active_producers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveProducers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveProducers(context.Background()))
    fmt.Print("\n")
    break
  case "get_resource_limits":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourceLimits requires 1 args")
      flag.Usage()
    }
    arg567 := flag.Arg(1)
    mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
    defer mbTrans568.Close()
    _, err569 := mbTrans568.WriteString(arg567)
    if err569 != nil {
      Usage()
      return
    }
    factory570 := thrift.NewTJSONProtocolFactory()
    jsProt571 := factory570.GetProtocol(mbTrans568)
    argvalue0 := interfaces.NewUint64()
    err572 := argvalue0.Read(context.Background(), jsProt571)
    if err572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourceLimits(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_resource_limits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceLimits requires 4 args")
      flag.Usage()
    }
    arg573 := flag.Arg(1)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue0 := interfaces.NewUint64()
    err578 := argvalue0.Read(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err579 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err579 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err580 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err580 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err581 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err581 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SetResourceLimits(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "set_proposed_producers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetProposedProducers requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetProposedProducers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_proposed_producers_ex":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetProposedProducersEx requires 2 args")
      flag.Usage()
    }
    arg583 := flag.Arg(1)
    mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
    defer mbTrans584.Close()
    _, err585 := mbTrans584.WriteString(arg583)
    if err585 != nil {
      Usage()
      return
    }
    factory586 := thrift.NewTJSONProtocolFactory()
    jsProt587 := factory586.GetProtocol(mbTrans584)
    argvalue0 := interfaces.NewUint64()
    err588 := argvalue0.Read(context.Background(), jsProt587)
    if err588 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.SetProposedProducersEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_privileged":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsPrivileged requires 1 args")
      flag.Usage()
    }
    arg590 := flag.Arg(1)
    mbTrans591 := thrift.NewTMemoryBufferLen(len(arg590))
    defer mbTrans591.Close()
    _, err592 := mbTrans591.WriteString(arg590)
    if err592 != nil {
      Usage()
      return
    }
    factory593 := thrift.NewTJSONProtocolFactory()
    jsProt594 := factory593.GetProtocol(mbTrans591)
    argvalue0 := interfaces.NewUint64()
    err595 := argvalue0.Read(context.Background(), jsProt594)
    if err595 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsPrivileged(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_privileged":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPrivileged requires 2 args")
      flag.Usage()
    }
    arg596 := flag.Arg(1)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue0 := interfaces.NewUint64()
    err601 := argvalue0.Read(context.Background(), jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetPrivileged(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "set_blockchain_parameters_packed":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetBlockchainParametersPacked requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SetBlockchainParametersPacked(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_blockchain_parameters_packed":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockchainParametersPacked requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockchainParametersPacked(context.Background()))
    fmt.Print("\n")
    break
  case "preactivate_feature":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreactivateFeature requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PreactivateFeature(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_transaction_authorization":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckTransactionAuthorization requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.CheckTransactionAuthorization(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "check_permission_authorization":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CheckPermissionAuthorization requires 5 args")
      flag.Usage()
    }
    arg608 := flag.Arg(1)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil {
      Usage()
      return
    }
    factory611 := thrift.NewTJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    argvalue0 := interfaces.NewUint64()
    err613 := argvalue0.Read(context.Background(), jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg614 := flag.Arg(2)
    mbTrans615 := thrift.NewTMemoryBufferLen(len(arg614))
    defer mbTrans615.Close()
    _, err616 := mbTrans615.WriteString(arg614)
    if err616 != nil {
      Usage()
      return
    }
    factory617 := thrift.NewTJSONProtocolFactory()
    jsProt618 := factory617.GetProtocol(mbTrans615)
    argvalue1 := interfaces.NewUint64()
    err619 := argvalue1.Read(context.Background(), jsProt618)
    if err619 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg622 := flag.Arg(5)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue4 := interfaces.NewUint64()
    err627 := argvalue4.Read(context.Background(), jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.CheckPermissionAuthorization(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_permission_last_used":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPermissionLastUsed requires 2 args")
      flag.Usage()
    }
    arg628 := flag.Arg(1)
    mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewTJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue0 := interfaces.NewUint64()
    err633 := argvalue0.Read(context.Background(), jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg634 := flag.Arg(2)
    mbTrans635 := thrift.NewTMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil {
      Usage()
      return
    }
    factory637 := thrift.NewTJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    argvalue1 := interfaces.NewUint64()
    err639 := argvalue1.Read(context.Background(), jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetPermissionLastUsed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_account_creation_time":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAccountCreationTime requires 1 args")
      flag.Usage()
    }
    arg640 := flag.Arg(1)
    mbTrans641 := thrift.NewTMemoryBufferLen(len(arg640))
    defer mbTrans641.Close()
    _, err642 := mbTrans641.WriteString(arg640)
    if err642 != nil {
      Usage()
      return
    }
    factory643 := thrift.NewTJSONProtocolFactory()
    jsProt644 := factory643.GetProtocol(mbTrans641)
    argvalue0 := interfaces.NewUint64()
    err645 := argvalue0.Read(context.Background(), jsProt644)
    if err645 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAccountCreationTime(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err648 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err648 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg649 := flag.Arg(1)
    mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
    defer mbTrans650.Close()
    _, err651 := mbTrans650.WriteString(arg649)
    if err651 != nil {
      Usage()
      return
    }
    factory652 := thrift.NewTJSONProtocolFactory()
    jsProt653 := factory652.GetProtocol(mbTrans650)
    argvalue0 := interfaces.NewUint64()
    err654 := argvalue0.Read(context.Background(), jsProt653)
    if err654 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg660 := flag.Arg(1)
    mbTrans661 := thrift.NewTMemoryBufferLen(len(arg660))
    defer mbTrans661.Close()
    _, err662 := mbTrans661.WriteString(arg660)
    if err662 != nil {
      Usage()
      return
    }
    factory663 := thrift.NewTJSONProtocolFactory()
    jsProt664 := factory663.GetProtocol(mbTrans661)
    argvalue0 := interfaces.NewUint64()
    err665 := argvalue0.Read(context.Background(), jsProt664)
    if err665 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg667 := flag.Arg(1)
    mbTrans668 := thrift.NewTMemoryBufferLen(len(arg667))
    defer mbTrans668.Close()
    _, err669 := mbTrans668.WriteString(arg667)
    if err669 != nil {
      Usage()
      return
    }
    factory670 := thrift.NewTJSONProtocolFactory()
    jsProt671 := factory670.GetProtocol(mbTrans668)
    argvalue0 := interfaces.NewUint64()
    err672 := argvalue0.Read(context.Background(), jsProt671)
    if err672 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg673 := flag.Arg(1)
    mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
    defer mbTrans674.Close()
    _, err675 := mbTrans674.WriteString(arg673)
    if err675 != nil {
      Usage()
      return
    }
    factory676 := thrift.NewTJSONProtocolFactory()
    jsProt677 := factory676.GetProtocol(mbTrans674)
    argvalue0 := interfaces.NewUint64()
    err678 := argvalue0.Read(context.Background(), jsProt677)
    if err678 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg679 := flag.Arg(1)
    mbTrans680 := thrift.NewTMemoryBufferLen(len(arg679))
    defer mbTrans680.Close()
    _, err681 := mbTrans680.WriteString(arg679)
    if err681 != nil {
      Usage()
      return
    }
    factory682 := thrift.NewTJSONProtocolFactory()
    jsProt683 := factory682.GetProtocol(mbTrans680)
    argvalue0 := interfaces.NewUint64()
    err684 := argvalue0.Read(context.Background(), jsProt683)
    if err684 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg685 := flag.Arg(1)
    mbTrans686 := thrift.NewTMemoryBufferLen(len(arg685))
    defer mbTrans686.Close()
    _, err687 := mbTrans686.WriteString(arg685)
    if err687 != nil {
      Usage()
      return
    }
    factory688 := thrift.NewTJSONProtocolFactory()
    jsProt689 := factory688.GetProtocol(mbTrans686)
    argvalue0 := interfaces.NewUint64()
    err690 := argvalue0.Read(context.Background(), jsProt689)
    if err690 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg691 := flag.Arg(2)
    mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
    defer mbTrans692.Close()
    _, err693 := mbTrans692.WriteString(arg691)
    if err693 != nil {
      Usage()
      return
    }
    factory694 := thrift.NewTJSONProtocolFactory()
    jsProt695 := factory694.GetProtocol(mbTrans692)
    argvalue1 := interfaces.NewUint64()
    err696 := argvalue1.Read(context.Background(), jsProt695)
    if err696 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg697 := flag.Arg(1)
    mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
    defer mbTrans698.Close()
    _, err699 := mbTrans698.WriteString(arg697)
    if err699 != nil {
      Usage()
      return
    }
    factory700 := thrift.NewTJSONProtocolFactory()
    jsProt701 := factory700.GetProtocol(mbTrans698)
    argvalue0 := interfaces.NewUint64()
    err702 := argvalue0.Read(context.Background(), jsProt701)
    if err702 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg710 := flag.Arg(2)
    mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil {
      Usage()
      return
    }
    factory713 := thrift.NewTJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    argvalue1 := interfaces.NewUint64()
    err715 := argvalue1.Read(context.Background(), jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err716 := (strconv.Atoi(flag.Arg(1)))
    if err716 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg736 := flag.Arg(2)
    mbTrans737 := thrift.NewTMemoryBufferLen(len(arg736))
    defer mbTrans737.Close()
    _, err738 := mbTrans737.WriteString(arg736)
    if err738 != nil {
      Usage()
      return
    }
    factory739 := thrift.NewTJSONProtocolFactory()
    jsProt740 := factory739.GetProtocol(mbTrans737)
    argvalue1 := interfaces.NewUint64()
    err741 := argvalue1.Read(context.Background(), jsProt740)
    if err741 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err743 := (strconv.Atoi(flag.Arg(4)))
    if err743 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err745 := (strconv.Atoi(flag.Arg(1)))
    if err745 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err746 := (strconv.Atoi(flag.Arg(2)))
    if err746 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err747 := (strconv.Atoi(flag.Arg(1)))
    if err747 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg748 := flag.Arg(1)
    mbTrans749 := thrift.NewTMemoryBufferLen(len(arg748))
    defer mbTrans749.Close()
    _, err750 := mbTrans749.WriteString(arg748)
    if err750 != nil {
      Usage()
      return
    }
    factory751 := thrift.NewTJSONProtocolFactory()
    jsProt752 := factory751.GetProtocol(mbTrans749)
    argvalue0 := interfaces.NewUint64()
    err753 := argvalue0.Read(context.Background(), jsProt752)
    if err753 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg754 := flag.Arg(2)
    mbTrans755 := thrift.NewTMemoryBufferLen(len(arg754))
    defer mbTrans755.Close()
    _, err756 := mbTrans755.WriteString(arg754)
    if err756 != nil {
      Usage()
      return
    }
    factory757 := thrift.NewTJSONProtocolFactory()
    jsProt758 := factory757.GetProtocol(mbTrans755)
    argvalue1 := interfaces.NewUint64()
    err759 := argvalue1.Read(context.Background(), jsProt758)
    if err759 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg760 := flag.Arg(3)
    mbTrans761 := thrift.NewTMemoryBufferLen(len(arg760))
    defer mbTrans761.Close()
    _, err762 := mbTrans761.WriteString(arg760)
    if err762 != nil {
      Usage()
      return
    }
    factory763 := thrift.NewTJSONProtocolFactory()
    jsProt764 := factory763.GetProtocol(mbTrans761)
    argvalue2 := interfaces.NewUint64()
    err765 := argvalue2.Read(context.Background(), jsProt764)
    if err765 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg766 := flag.Arg(4)
    mbTrans767 := thrift.NewTMemoryBufferLen(len(arg766))
    defer mbTrans767.Close()
    _, err768 := mbTrans767.WriteString(arg766)
    if err768 != nil {
      Usage()
      return
    }
    factory769 := thrift.NewTJSONProtocolFactory()
    jsProt770 := factory769.GetProtocol(mbTrans767)
    argvalue3 := interfaces.NewUint64()
    err771 := argvalue3.Read(context.Background(), jsProt770)
    if err771 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err773 := (strconv.Atoi(flag.Arg(1)))
    if err773 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg774 := flag.Arg(2)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil {
      Usage()
      return
    }
    factory777 := thrift.NewTJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    argvalue1 := interfaces.NewUint64()
    err779 := argvalue1.Read(context.Background(), jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err781 := (strconv.Atoi(flag.Arg(1)))
    if err781 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err782 := (strconv.Atoi(flag.Arg(1)))
    if err782 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err783 := (strconv.Atoi(flag.Arg(1)))
    if err783 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err784 := (strconv.Atoi(flag.Arg(1)))
    if err784 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg785 := flag.Arg(1)
    mbTrans786 := thrift.NewTMemoryBufferLen(len(arg785))
    defer mbTrans786.Close()
    _, err787 := mbTrans786.WriteString(arg785)
    if err787 != nil {
      Usage()
      return
    }
    factory788 := thrift.NewTJSONProtocolFactory()
    jsProt789 := factory788.GetProtocol(mbTrans786)
    argvalue0 := interfaces.NewUint64()
    err790 := argvalue0.Read(context.Background(), jsProt789)
    if err790 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg791 := flag.Arg(2)
    mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewTJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue1 := interfaces.NewUint64()
    err796 := argvalue1.Read(context.Background(), jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg797 := flag.Arg(3)
    mbTrans798 := thrift.NewTMemoryBufferLen(len(arg797))
    defer mbTrans798.Close()
    _, err799 := mbTrans798.WriteString(arg797)
    if err799 != nil {
      Usage()
      return
    }
    factory800 := thrift.NewTJSONProtocolFactory()
    jsProt801 := factory800.GetProtocol(mbTrans798)
    argvalue2 := interfaces.NewUint64()
    err802 := argvalue2.Read(context.Background(), jsProt801)
    if err802 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg803 := flag.Arg(4)
    mbTrans804 := thrift.NewTMemoryBufferLen(len(arg803))
    defer mbTrans804.Close()
    _, err805 := mbTrans804.WriteString(arg803)
    if err805 != nil {
      Usage()
      return
    }
    factory806 := thrift.NewTJSONProtocolFactory()
    jsProt807 := factory806.GetProtocol(mbTrans804)
    argvalue3 := interfaces.NewUint64()
    err808 := argvalue3.Read(context.Background(), jsProt807)
    if err808 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg809 := flag.Arg(1)
    mbTrans810 := thrift.NewTMemoryBufferLen(len(arg809))
    defer mbTrans810.Close()
    _, err811 := mbTrans810.WriteString(arg809)
    if err811 != nil {
      Usage()
      return
    }
    factory812 := thrift.NewTJSONProtocolFactory()
    jsProt813 := factory812.GetProtocol(mbTrans810)
    argvalue0 := interfaces.NewUint64()
    err814 := argvalue0.Read(context.Background(), jsProt813)
    if err814 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg815 := flag.Arg(2)
    mbTrans816 := thrift.NewTMemoryBufferLen(len(arg815))
    defer mbTrans816.Close()
    _, err817 := mbTrans816.WriteString(arg815)
    if err817 != nil {
      Usage()
      return
    }
    factory818 := thrift.NewTJSONProtocolFactory()
    jsProt819 := factory818.GetProtocol(mbTrans816)
    argvalue1 := interfaces.NewUint64()
    err820 := argvalue1.Read(context.Background(), jsProt819)
    if err820 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg821 := flag.Arg(3)
    mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewTJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue2 := interfaces.NewUint64()
    err826 := argvalue2.Read(context.Background(), jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg827 := flag.Arg(4)
    mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
    defer mbTrans828.Close()
    _, err829 := mbTrans828.WriteString(arg827)
    if err829 != nil {
      Usage()
      return
    }
    factory830 := thrift.NewTJSONProtocolFactory()
    jsProt831 := factory830.GetProtocol(mbTrans828)
    argvalue3 := interfaces.NewUint64()
    err832 := argvalue3.Read(context.Background(), jsProt831)
    if err832 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg833 := flag.Arg(1)
    mbTrans834 := thrift.NewTMemoryBufferLen(len(arg833))
    defer mbTrans834.Close()
    _, err835 := mbTrans834.WriteString(arg833)
    if err835 != nil {
      Usage()
      return
    }
    factory836 := thrift.NewTJSONProtocolFactory()
    jsProt837 := factory836.GetProtocol(mbTrans834)
    argvalue0 := interfaces.NewUint64()
    err838 := argvalue0.Read(context.Background(), jsProt837)
    if err838 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg839 := flag.Arg(2)
    mbTrans840 := thrift.NewTMemoryBufferLen(len(arg839))
    defer mbTrans840.Close()
    _, err841 := mbTrans840.WriteString(arg839)
    if err841 != nil {
      Usage()
      return
    }
    factory842 := thrift.NewTJSONProtocolFactory()
    jsProt843 := factory842.GetProtocol(mbTrans840)
    argvalue1 := interfaces.NewUint64()
    err844 := argvalue1.Read(context.Background(), jsProt843)
    if err844 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg845 := flag.Arg(3)
    mbTrans846 := thrift.NewTMemoryBufferLen(len(arg845))
    defer mbTrans846.Close()
    _, err847 := mbTrans846.WriteString(arg845)
    if err847 != nil {
      Usage()
      return
    }
    factory848 := thrift.NewTJSONProtocolFactory()
    jsProt849 := factory848.GetProtocol(mbTrans846)
    argvalue2 := interfaces.NewUint64()
    err850 := argvalue2.Read(context.Background(), jsProt849)
    if err850 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg851 := flag.Arg(4)
    mbTrans852 := thrift.NewTMemoryBufferLen(len(arg851))
    defer mbTrans852.Close()
    _, err853 := mbTrans852.WriteString(arg851)
    if err853 != nil {
      Usage()
      return
    }
    factory854 := thrift.NewTJSONProtocolFactory()
    jsProt855 := factory854.GetProtocol(mbTrans852)
    argvalue3 := interfaces.NewUint64()
    err856 := argvalue3.Read(context.Background(), jsProt855)
    if err856 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg857 := flag.Arg(1)
    mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil {
      Usage()
      return
    }
    factory860 := thrift.NewTJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    argvalue0 := interfaces.NewUint64()
    err862 := argvalue0.Read(context.Background(), jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg863 := flag.Arg(2)
    mbTrans864 := thrift.NewTMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewTJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue1 := interfaces.NewUint64()
    err868 := argvalue1.Read(context.Background(), jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg869 := flag.Arg(3)
    mbTrans870 := thrift.NewTMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewTJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue2 := interfaces.NewUint64()
    err874 := argvalue2.Read(context.Background(), jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg875 := flag.Arg(1)
    mbTrans876 := thrift.NewTMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewTJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue0 := interfaces.NewUint64()
    err880 := argvalue0.Read(context.Background(), jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg881 := flag.Arg(2)
    mbTrans882 := thrift.NewTMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewTJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue1 := interfaces.NewUint64()
    err886 := argvalue1.Read(context.Background(), jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg887 := flag.Arg(3)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue2 := interfaces.NewUint64()
    err892 := argvalue2.Read(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg893 := flag.Arg(4)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue3 := interfaces.NewUint64()
    err898 := argvalue3.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg899 := flag.Arg(5)
    mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
    defer mbTrans900.Close()
    _, err901 := mbTrans900.WriteString(arg899)
    if err901 != nil {
      Usage()
      return
    }
    factory902 := thrift.NewTJSONProtocolFactory()
    jsProt903 := factory902.GetProtocol(mbTrans900)
    argvalue4 := interfaces.NewUint64()
    err904 := argvalue4.Read(context.Background(), jsProt903)
    if err904 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err905 := (strconv.Atoi(flag.Arg(1)))
    if err905 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg906 := flag.Arg(2)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil {
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    argvalue1 := interfaces.NewUint64()
    err911 := argvalue1.Read(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg912 := flag.Arg(3)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue2 := interfaces.NewUint64()
    err917 := argvalue2.Read(context.Background(), jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err918 := (strconv.Atoi(flag.Arg(1)))
    if err918 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err919 := (strconv.Atoi(flag.Arg(1)))
    if err919 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err920 := (strconv.Atoi(flag.Arg(1)))
    if err920 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg921 := flag.Arg(1)
    mbTrans922 := thrift.NewTMemoryBufferLen(len(arg921))
    defer mbTrans922.Close()
    _, err923 := mbTrans922.WriteString(arg921)
    if err923 != nil {
      Usage()
      return
    }
    factory924 := thrift.NewTJSONProtocolFactory()
    jsProt925 := factory924.GetProtocol(mbTrans922)
    argvalue0 := interfaces.NewUint64()
    err926 := argvalue0.Read(context.Background(), jsProt925)
    if err926 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg927 := flag.Arg(2)
    mbTrans928 := thrift.NewTMemoryBufferLen(len(arg927))
    defer mbTrans928.Close()
    _, err929 := mbTrans928.WriteString(arg927)
    if err929 != nil {
      Usage()
      return
    }
    factory930 := thrift.NewTJSONProtocolFactory()
    jsProt931 := factory930.GetProtocol(mbTrans928)
    argvalue1 := interfaces.NewUint64()
    err932 := argvalue1.Read(context.Background(), jsProt931)
    if err932 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg933 := flag.Arg(3)
    mbTrans934 := thrift.NewTMemoryBufferLen(len(arg933))
    defer mbTrans934.Close()
    _, err935 := mbTrans934.WriteString(arg933)
    if err935 != nil {
      Usage()
      return
    }
    factory936 := thrift.NewTJSONProtocolFactory()
    jsProt937 := factory936.GetProtocol(mbTrans934)
    argvalue2 := interfaces.NewUint64()
    err938 := argvalue2.Read(context.Background(), jsProt937)
    if err938 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg939 := flag.Arg(4)
    mbTrans940 := thrift.NewTMemoryBufferLen(len(arg939))
    defer mbTrans940.Close()
    _, err941 := mbTrans940.WriteString(arg939)
    if err941 != nil {
      Usage()
      return
    }
    factory942 := thrift.NewTJSONProtocolFactory()
    jsProt943 := factory942.GetProtocol(mbTrans940)
    argvalue3 := interfaces.NewUint64()
    err944 := argvalue3.Read(context.Background(), jsProt943)
    if err944 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg945 := flag.Arg(1)
    mbTrans946 := thrift.NewTMemoryBufferLen(len(arg945))
    defer mbTrans946.Close()
    _, err947 := mbTrans946.WriteString(arg945)
    if err947 != nil {
      Usage()
      return
    }
    factory948 := thrift.NewTJSONProtocolFactory()
    jsProt949 := factory948.GetProtocol(mbTrans946)
    argvalue0 := interfaces.NewUint64()
    err950 := argvalue0.Read(context.Background(), jsProt949)
    if err950 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg951 := flag.Arg(2)
    mbTrans952 := thrift.NewTMemoryBufferLen(len(arg951))
    defer mbTrans952.Close()
    _, err953 := mbTrans952.WriteString(arg951)
    if err953 != nil {
      Usage()
      return
    }
    factory954 := thrift.NewTJSONProtocolFactory()
    jsProt955 := factory954.GetProtocol(mbTrans952)
    argvalue1 := interfaces.NewUint64()
    err956 := argvalue1.Read(context.Background(), jsProt955)
    if err956 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg957 := flag.Arg(3)
    mbTrans958 := thrift.NewTMemoryBufferLen(len(arg957))
    defer mbTrans958.Close()
    _, err959 := mbTrans958.WriteString(arg957)
    if err959 != nil {
      Usage()
      return
    }
    factory960 := thrift.NewTJSONProtocolFactory()
    jsProt961 := factory960.GetProtocol(mbTrans958)
    argvalue2 := interfaces.NewUint64()
    err962 := argvalue2.Read(context.Background(), jsProt961)
    if err962 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg963 := flag.Arg(4)
    mbTrans964 := thrift.NewTMemoryBufferLen(len(arg963))
    defer mbTrans964.Close()
    _, err965 := mbTrans964.WriteString(arg963)
    if err965 != nil {
      Usage()
      return
    }
    factory966 := thrift.NewTJSONProtocolFactory()
    jsProt967 := factory966.GetProtocol(mbTrans964)
    argvalue3 := interfaces.NewUint64()
    err968 := argvalue3.Read(context.Background(), jsProt967)
    if err968 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg969 := flag.Arg(1)
    mbTrans970 := thrift.NewTMemoryBufferLen(len(arg969))
    defer mbTrans970.Close()
    _, err971 := mbTrans970.WriteString(arg969)
    if err971 != nil {
      Usage()
      return
    }
    factory972 := thrift.NewTJSONProtocolFactory()
    jsProt973 := factory972.GetProtocol(mbTrans970)
    argvalue0 := interfaces.NewUint64()
    err974 := argvalue0.Read(context.Background(), jsProt973)
    if err974 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg975 := flag.Arg(2)
    mbTrans976 := thrift.NewTMemoryBufferLen(len(arg975))
    defer mbTrans976.Close()
    _, err977 := mbTrans976.WriteString(arg975)
    if err977 != nil {
      Usage()
      return
    }
    factory978 := thrift.NewTJSONProtocolFactory()
    jsProt979 := factory978.GetProtocol(mbTrans976)
    argvalue1 := interfaces.NewUint64()
    err980 := argvalue1.Read(context.Background(), jsProt979)
    if err980 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg981 := flag.Arg(3)
    mbTrans982 := thrift.NewTMemoryBufferLen(len(arg981))
    defer mbTrans982.Close()
    _, err983 := mbTrans982.WriteString(arg981)
    if err983 != nil {
      Usage()
      return
    }
    factory984 := thrift.NewTJSONProtocolFactory()
    jsProt985 := factory984.GetProtocol(mbTrans982)
    argvalue2 := interfaces.NewUint64()
    err986 := argvalue2.Read(context.Background(), jsProt985)
    if err986 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg987 := flag.Arg(4)
    mbTrans988 := thrift.NewTMemoryBufferLen(len(arg987))
    defer mbTrans988.Close()
    _, err989 := mbTrans988.WriteString(arg987)
    if err989 != nil {
      Usage()
      return
    }
    factory990 := thrift.NewTJSONProtocolFactory()
    jsProt991 := factory990.GetProtocol(mbTrans988)
    argvalue3 := interfaces.NewUint64()
    err992 := argvalue3.Read(context.Background(), jsProt991)
    if err992 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg993 := flag.Arg(5)
    mbTrans994 := thrift.NewTMemoryBufferLen(len(arg993))
    defer mbTrans994.Close()
    _, err995 := mbTrans994.WriteString(arg993)
    if err995 != nil {
      Usage()
      return
    }
    factory996 := thrift.NewTJSONProtocolFactory()
    jsProt997 := factory996.GetProtocol(mbTrans994)
    argvalue4 := interfaces.NewUint64()
    err998 := argvalue4.Read(context.Background(), jsProt997)
    if err998 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg999 := flag.Arg(1)
    mbTrans1000 := thrift.NewTMemoryBufferLen(len(arg999))
    defer mbTrans1000.Close()
    _, err1001 := mbTrans1000.WriteString(arg999)
    if err1001 != nil {
      Usage()
      return
    }
    factory1002 := thrift.NewTJSONProtocolFactory()
    jsProt1003 := factory1002.GetProtocol(mbTrans1000)
    argvalue0 := interfaces.NewUint64()
    err1004 := argvalue0.Read(context.Background(), jsProt1003)
    if err1004 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1005 := flag.Arg(2)
    mbTrans1006 := thrift.NewTMemoryBufferLen(len(arg1005))
    defer mbTrans1006.Close()
    _, err1007 := mbTrans1006.WriteString(arg1005)
    if err1007 != nil {
      Usage()
      return
    }
    factory1008 := thrift.NewTJSONProtocolFactory()
    jsProt1009 := factory1008.GetProtocol(mbTrans1006)
    argvalue1 := interfaces.NewUint64()
    err1010 := argvalue1.Read(context.Background(), jsProt1009)
    if err1010 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1011 := flag.Arg(3)
    mbTrans1012 := thrift.NewTMemoryBufferLen(len(arg1011))
    defer mbTrans1012.Close()
    _, err1013 := mbTrans1012.WriteString(arg1011)
    if err1013 != nil {
      Usage()
      return
    }
    factory1014 := thrift.NewTJSONProtocolFactory()
    jsProt1015 := factory1014.GetProtocol(mbTrans1012)
    argvalue2 := interfaces.NewUint64()
    err1016 := argvalue2.Read(context.Background(), jsProt1015)
    if err1016 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1017 := flag.Arg(4)
    mbTrans1018 := thrift.NewTMemoryBufferLen(len(arg1017))
    defer mbTrans1018.Close()
    _, err1019 := mbTrans1018.WriteString(arg1017)
    if err1019 != nil {
      Usage()
      return
    }
    factory1020 := thrift.NewTJSONProtocolFactory()
    jsProt1021 := factory1020.GetProtocol(mbTrans1018)
    argvalue3 := interfaces.NewUint64()
    err1022 := argvalue3.Read(context.Background(), jsProt1021)
    if err1022 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg1023 := flag.Arg(5)
    mbTrans1024 := thrift.NewTMemoryBufferLen(len(arg1023))
    defer mbTrans1024.Close()
    _, err1025 := mbTrans1024.WriteString(arg1023)
    if err1025 != nil {
      Usage()
      return
    }
    factory1026 := thrift.NewTJSONProtocolFactory()
    jsProt1027 := factory1026.GetProtocol(mbTrans1024)
    argvalue4 := interfaces.NewUint64()
    err1028 := argvalue4.Read(context.Background(), jsProt1027)
    if err1028 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg1029 := flag.Arg(1)
    mbTrans1030 := thrift.NewTMemoryBufferLen(len(arg1029))
    defer mbTrans1030.Close()
    _, err1031 := mbTrans1030.WriteString(arg1029)
    if err1031 != nil {
      Usage()
      return
    }
    factory1032 := thrift.NewTJSONProtocolFactory()
    jsProt1033 := factory1032.GetProtocol(mbTrans1030)
    argvalue0 := interfaces.NewUint64()
    err1034 := argvalue0.Read(context.Background(), jsProt1033)
    if err1034 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1035 := flag.Arg(2)
    mbTrans1036 := thrift.NewTMemoryBufferLen(len(arg1035))
    defer mbTrans1036.Close()
    _, err1037 := mbTrans1036.WriteString(arg1035)
    if err1037 != nil {
      Usage()
      return
    }
    factory1038 := thrift.NewTJSONProtocolFactory()
    jsProt1039 := factory1038.GetProtocol(mbTrans1036)
    argvalue1 := interfaces.NewUint64()
    err1040 := argvalue1.Read(context.Background(), jsProt1039)
    if err1040 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1041 := flag.Arg(3)
    mbTrans1042 := thrift.NewTMemoryBufferLen(len(arg1041))
    defer mbTrans1042.Close()
    _, err1043 := mbTrans1042.WriteString(arg1041)
    if err1043 != nil {
      Usage()
      return
    }
    factory1044 := thrift.NewTJSONProtocolFactory()
    jsProt1045 := factory1044.GetProtocol(mbTrans1042)
    argvalue2 := interfaces.NewUint64()
    err1046 := argvalue2.Read(context.Background(), jsProt1045)
    if err1046 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg1047 := flag.Arg(1)
    mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
    defer mbTrans1048.Close()
    _, err1049 := mbTrans1048.WriteString(arg1047)
    if err1049 != nil {
      Usage()
      return
    }
    factory1050 := thrift.NewTJSONProtocolFactory()
    jsProt1051 := factory1050.GetProtocol(mbTrans1048)
    argvalue0 := interfaces.NewUint64()
    err1052 := argvalue0.Read(context.Background(), jsProt1051)
    if err1052 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1053 := flag.Arg(2)
    mbTrans1054 := thrift.NewTMemoryBufferLen(len(arg1053))
    defer mbTrans1054.Close()
    _, err1055 := mbTrans1054.WriteString(arg1053)
    if err1055 != nil {
      Usage()
      return
    }
    factory1056 := thrift.NewTJSONProtocolFactory()
    jsProt1057 := factory1056.GetProtocol(mbTrans1054)
    argvalue1 := interfaces.NewUint64()
    err1058 := argvalue1.Read(context.Background(), jsProt1057)
    if err1058 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1059 := flag.Arg(3)
    mbTrans1060 := thrift.NewTMemoryBufferLen(len(arg1059))
    defer mbTrans1060.Close()
    _, err1061 := mbTrans1060.WriteString(arg1059)
    if err1061 != nil {
      Usage()
      return
    }
    factory1062 := thrift.NewTJSONProtocolFactory()
    jsProt1063 := factory1062.GetProtocol(mbTrans1060)
    argvalue2 := interfaces.NewUint64()
    err1064 := argvalue2.Read(context.Background(), jsProt1063)
    if err1064 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1065 := flag.Arg(4)
    mbTrans1066 := thrift.NewTMemoryBufferLen(len(arg1065))
    defer mbTrans1066.Close()
    _, err1067 := mbTrans1066.WriteString(arg1065)
    if err1067 != nil {
      Usage()
      return
    }
    factory1068 := thrift.NewTJSONProtocolFactory()
    jsProt1069 := factory1068.GetProtocol(mbTrans1066)
    argvalue3 := interfaces.NewUint64()
    err1070 := argvalue3.Read(context.Background(), jsProt1069)
    if err1070 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1072 := (strconv.Atoi(flag.Arg(1)))
    if err1072 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1073 := flag.Arg(2)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue1 := interfaces.NewUint64()
    err1078 := argvalue1.Read(context.Background(), jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1080 := (strconv.Atoi(flag.Arg(1)))
    if err1080 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1081 := (strconv.Atoi(flag.Arg(1)))
    if err1081 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1082 := (strconv.Atoi(flag.Arg(1)))
    if err1082 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1083 := flag.Arg(1)
    mbTrans1084 := thrift.NewTMemoryBufferLen(len(arg1083))
    defer mbTrans1084.Close()
    _, err1085 := mbTrans1084.WriteString(arg1083)
    if err1085 != nil {
      Usage()
      return
    }
    factory1086 := thrift.NewTJSONProtocolFactory()
    jsProt1087 := factory1086.GetProtocol(mbTrans1084)
    argvalue0 := interfaces.NewUint64()
    err1088 := argvalue0.Read(context.Background(), jsProt1087)
    if err1088 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1089 := flag.Arg(2)
    mbTrans1090 := thrift.NewTMemoryBufferLen(len(arg1089))
    defer mbTrans1090.Close()
    _, err1091 := mbTrans1090.WriteString(arg1089)
    if err1091 != nil {
      Usage()
      return
    }
    factory1092 := thrift.NewTJSONProtocolFactory()
    jsProt1093 := factory1092.GetProtocol(mbTrans1090)
    argvalue1 := interfaces.NewUint64()
    err1094 := argvalue1.Read(context.Background(), jsProt1093)
    if err1094 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1095 := flag.Arg(3)
    mbTrans1096 := thrift.NewTMemoryBufferLen(len(arg1095))
    defer mbTrans1096.Close()
    _, err1097 := mbTrans1096.WriteString(arg1095)
    if err1097 != nil {
      Usage()
      return
    }
    factory1098 := thrift.NewTJSONProtocolFactory()
    jsProt1099 := factory1098.GetProtocol(mbTrans1096)
    argvalue2 := interfaces.NewUint64()
    err1100 := argvalue2.Read(context.Background(), jsProt1099)
    if err1100 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1101 := flag.Arg(4)
    mbTrans1102 := thrift.NewTMemoryBufferLen(len(arg1101))
    defer mbTrans1102.Close()
    _, err1103 := mbTrans1102.WriteString(arg1101)
    if err1103 != nil {
      Usage()
      return
    }
    factory1104 := thrift.NewTJSONProtocolFactory()
    jsProt1105 := factory1104.GetProtocol(mbTrans1102)
    argvalue3 := interfaces.NewUint64()
    err1106 := argvalue3.Read(context.Background(), jsProt1105)
    if err1106 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1107 := flag.Arg(1)
    mbTrans1108 := thrift.NewTMemoryBufferLen(len(arg1107))
    defer mbTrans1108.Close()
    _, err1109 := mbTrans1108.WriteString(arg1107)
    if err1109 != nil {
      Usage()
      return
    }
    factory1110 := thrift.NewTJSONProtocolFactory()
    jsProt1111 := factory1110.GetProtocol(mbTrans1108)
    argvalue0 := interfaces.NewUint64()
    err1112 := argvalue0.Read(context.Background(), jsProt1111)
    if err1112 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1113 := flag.Arg(2)
    mbTrans1114 := thrift.NewTMemoryBufferLen(len(arg1113))
    defer mbTrans1114.Close()
    _, err1115 := mbTrans1114.WriteString(arg1113)
    if err1115 != nil {
      Usage()
      return
    }
    factory1116 := thrift.NewTJSONProtocolFactory()
    jsProt1117 := factory1116.GetProtocol(mbTrans1114)
    argvalue1 := interfaces.NewUint64()
    err1118 := argvalue1.Read(context.Background(), jsProt1117)
    if err1118 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1119 := flag.Arg(3)
    mbTrans1120 := thrift.NewTMemoryBufferLen(len(arg1119))
    defer mbTrans1120.Close()
    _, err1121 := mbTrans1120.WriteString(arg1119)
    if err1121 != nil {
      Usage()
      return
    }
    factory1122 := thrift.NewTJSONProtocolFactory()
    jsProt1123 := factory1122.GetProtocol(mbTrans1120)
    argvalue2 := interfaces.NewUint64()
    err1124 := argvalue2.Read(context.Background(), jsProt1123)
    if err1124 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1126 := flag.Arg(1)
    mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
    defer mbTrans1127.Close()
    _, err1128 := mbTrans1127.WriteString(arg1126)
    if err1128 != nil {
      Usage()
      return
    }
    factory1129 := thrift.NewTJSONProtocolFactory()
    jsProt1130 := factory1129.GetProtocol(mbTrans1127)
    argvalue0 := interfaces.NewUint64()
    err1131 := argvalue0.Read(context.Background(), jsProt1130)
    if err1131 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1132 := flag.Arg(2)
    mbTrans1133 := thrift.NewTMemoryBufferLen(len(arg1132))
    defer mbTrans1133.Close()
    _, err1134 := mbTrans1133.WriteString(arg1132)
    if err1134 != nil {
      Usage()
      return
    }
    factory1135 := thrift.NewTJSONProtocolFactory()
    jsProt1136 := factory1135.GetProtocol(mbTrans1133)
    argvalue1 := interfaces.NewUint64()
    err1137 := argvalue1.Read(context.Background(), jsProt1136)
    if err1137 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1138 := flag.Arg(3)
    mbTrans1139 := thrift.NewTMemoryBufferLen(len(arg1138))
    defer mbTrans1139.Close()
    _, err1140 := mbTrans1139.WriteString(arg1138)
    if err1140 != nil {
      Usage()
      return
    }
    factory1141 := thrift.NewTJSONProtocolFactory()
    jsProt1142 := factory1141.GetProtocol(mbTrans1139)
    argvalue2 := interfaces.NewUint64()
    err1143 := argvalue2.Read(context.Background(), jsProt1142)
    if err1143 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1145 := flag.Arg(5)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue4 := interfaces.NewUint64()
    err1150 := argvalue4.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg1151 := flag.Arg(1)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue0 := interfaces.NewUint64()
    err1156 := argvalue0.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1157 := flag.Arg(2)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue1 := interfaces.NewUint64()
    err1162 := argvalue1.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1163 := flag.Arg(3)
    mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
    defer mbTrans1164.Close()
    _, err1165 := mbTrans1164.WriteString(arg1163)
    if err1165 != nil {
      Usage()
      return
    }
    factory1166 := thrift.NewTJSONProtocolFactory()
    jsProt1167 := factory1166.GetProtocol(mbTrans1164)
    argvalue2 := interfaces.NewUint64()
    err1168 := argvalue2.Read(context.Background(), jsProt1167)
    if err1168 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1170 := flag.Arg(5)
    mbTrans1171 := thrift.NewTMemoryBufferLen(len(arg1170))
    defer mbTrans1171.Close()
    _, err1172 := mbTrans1171.WriteString(arg1170)
    if err1172 != nil {
      Usage()
      return
    }
    factory1173 := thrift.NewTJSONProtocolFactory()
    jsProt1174 := factory1173.GetProtocol(mbTrans1171)
    argvalue4 := interfaces.NewUint64()
    err1175 := argvalue4.Read(context.Background(), jsProt1174)
    if err1175 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg1176 := flag.Arg(1)
    mbTrans1177 := thrift.NewTMemoryBufferLen(len(arg1176))
    defer mbTrans1177.Close()
    _, err1178 := mbTrans1177.WriteString(arg1176)
    if err1178 != nil {
      Usage()
      return
    }
    factory1179 := thrift.NewTJSONProtocolFactory()
    jsProt1180 := factory1179.GetProtocol(mbTrans1177)
    argvalue0 := interfaces.NewUint64()
    err1181 := argvalue0.Read(context.Background(), jsProt1180)
    if err1181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1182 := flag.Arg(2)
    mbTrans1183 := thrift.NewTMemoryBufferLen(len(arg1182))
    defer mbTrans1183.Close()
    _, err1184 := mbTrans1183.WriteString(arg1182)
    if err1184 != nil {
      Usage()
      return
    }
    factory1185 := thrift.NewTJSONProtocolFactory()
    jsProt1186 := factory1185.GetProtocol(mbTrans1183)
    argvalue1 := interfaces.NewUint64()
    err1187 := argvalue1.Read(context.Background(), jsProt1186)
    if err1187 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1188 := flag.Arg(3)
    mbTrans1189 := thrift.NewTMemoryBufferLen(len(arg1188))
    defer mbTrans1189.Close()
    _, err1190 := mbTrans1189.WriteString(arg1188)
    if err1190 != nil {
      Usage()
      return
    }
    factory1191 := thrift.NewTJSONProtocolFactory()
    jsProt1192 := factory1191.GetProtocol(mbTrans1189)
    argvalue2 := interfaces.NewUint64()
    err1193 := argvalue2.Read(context.Background(), jsProt1192)
    if err1193 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1194 := flag.Arg(1)
    mbTrans1195 := thrift.NewTMemoryBufferLen(len(arg1194))
    defer mbTrans1195.Close()
    _, err1196 := mbTrans1195.WriteString(arg1194)
    if err1196 != nil {
      Usage()
      return
    }
    factory1197 := thrift.NewTJSONProtocolFactory()
    jsProt1198 := factory1197.GetProtocol(mbTrans1195)
    argvalue0 := interfaces.NewUint64()
    err1199 := argvalue0.Read(context.Background(), jsProt1198)
    if err1199 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1200 := flag.Arg(2)
    mbTrans1201 := thrift.NewTMemoryBufferLen(len(arg1200))
    defer mbTrans1201.Close()
    _, err1202 := mbTrans1201.WriteString(arg1200)
    if err1202 != nil {
      Usage()
      return
    }
    factory1203 := thrift.NewTJSONProtocolFactory()
    jsProt1204 := factory1203.GetProtocol(mbTrans1201)
    argvalue1 := interfaces.NewUint64()
    err1205 := argvalue1.Read(context.Background(), jsProt1204)
    if err1205 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1206 := flag.Arg(3)
    mbTrans1207 := thrift.NewTMemoryBufferLen(len(arg1206))
    defer mbTrans1207.Close()
    _, err1208 := mbTrans1207.WriteString(arg1206)
    if err1208 != nil {
      Usage()
      return
    }
    factory1209 := thrift.NewTJSONProtocolFactory()
    jsProt1210 := factory1209.GetProtocol(mbTrans1207)
    argvalue2 := interfaces.NewUint64()
    err1211 := argvalue2.Read(context.Background(), jsProt1210)
    if err1211 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1212 := flag.Arg(4)
    mbTrans1213 := thrift.NewTMemoryBufferLen(len(arg1212))
    defer mbTrans1213.Close()
    _, err1214 := mbTrans1213.WriteString(arg1212)
    if err1214 != nil {
      Usage()
      return
    }
    factory1215 := thrift.NewTJSONProtocolFactory()
    jsProt1216 := factory1215.GetProtocol(mbTrans1213)
    argvalue3 := interfaces.NewUint64()
    err1217 := argvalue3.Read(context.Background(), jsProt1216)
    if err1217 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1219 := (strconv.Atoi(flag.Arg(1)))
    if err1219 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1220 := flag.Arg(2)
    mbTrans1221 := thrift.NewTMemoryBufferLen(len(arg1220))
    defer mbTrans1221.Close()
    _, err1222 := mbTrans1221.WriteString(arg1220)
    if err1222 != nil {
      Usage()
      return
    }
    factory1223 := thrift.NewTJSONProtocolFactory()
    jsProt1224 := factory1223.GetProtocol(mbTrans1221)
    argvalue1 := interfaces.NewUint64()
    err1225 := argvalue1.Read(context.Background(), jsProt1224)
    if err1225 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1227 := (strconv.Atoi(flag.Arg(1)))
    if err1227 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1228 := (strconv.Atoi(flag.Arg(1)))
    if err1228 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1229 := (strconv.Atoi(flag.Arg(1)))
    if err1229 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1230 := flag.Arg(1)
    mbTrans1231 := thrift.NewTMemoryBufferLen(len(arg1230))
    defer mbTrans1231.Close()
    _, err1232 := mbTrans1231.WriteString(arg1230)
    if err1232 != nil {
      Usage()
      return
    }
    factory1233 := thrift.NewTJSONProtocolFactory()
    jsProt1234 := factory1233.GetProtocol(mbTrans1231)
    argvalue0 := interfaces.NewUint64()
    err1235 := argvalue0.Read(context.Background(), jsProt1234)
    if err1235 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1236 := flag.Arg(2)
    mbTrans1237 := thrift.NewTMemoryBufferLen(len(arg1236))
    defer mbTrans1237.Close()
    _, err1238 := mbTrans1237.WriteString(arg1236)
    if err1238 != nil {
      Usage()
      return
    }
    factory1239 := thrift.NewTJSONProtocolFactory()
    jsProt1240 := factory1239.GetProtocol(mbTrans1237)
    argvalue1 := interfaces.NewUint64()
    err1241 := argvalue1.Read(context.Background(), jsProt1240)
    if err1241 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1242 := flag.Arg(3)
    mbTrans1243 := thrift.NewTMemoryBufferLen(len(arg1242))
    defer mbTrans1243.Close()
    _, err1244 := mbTrans1243.WriteString(arg1242)
    if err1244 != nil {
      Usage()
      return
    }
    factory1245 := thrift.NewTJSONProtocolFactory()
    jsProt1246 := factory1245.GetProtocol(mbTrans1243)
    argvalue2 := interfaces.NewUint64()
    err1247 := argvalue2.Read(context.Background(), jsProt1246)
    if err1247 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1248 := flag.Arg(4)
    mbTrans1249 := thrift.NewTMemoryBufferLen(len(arg1248))
    defer mbTrans1249.Close()
    _, err1250 := mbTrans1249.WriteString(arg1248)
    if err1250 != nil {
      Usage()
      return
    }
    factory1251 := thrift.NewTJSONProtocolFactory()
    jsProt1252 := factory1251.GetProtocol(mbTrans1249)
    argvalue3 := interfaces.NewUint64()
    err1253 := argvalue3.Read(context.Background(), jsProt1252)
    if err1253 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1254 := flag.Arg(1)
    mbTrans1255 := thrift.NewTMemoryBufferLen(len(arg1254))
    defer mbTrans1255.Close()
    _, err1256 := mbTrans1255.WriteString(arg1254)
    if err1256 != nil {
      Usage()
      return
    }
    factory1257 := thrift.NewTJSONProtocolFactory()
    jsProt1258 := factory1257.GetProtocol(mbTrans1255)
    argvalue0 := interfaces.NewUint64()
    err1259 := argvalue0.Read(context.Background(), jsProt1258)
    if err1259 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1260 := flag.Arg(2)
    mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
    defer mbTrans1261.Close()
    _, err1262 := mbTrans1261.WriteString(arg1260)
    if err1262 != nil {
      Usage()
      return
    }
    factory1263 := thrift.NewTJSONProtocolFactory()
    jsProt1264 := factory1263.GetProtocol(mbTrans1261)
    argvalue1 := interfaces.NewUint64()
    err1265 := argvalue1.Read(context.Background(), jsProt1264)
    if err1265 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1266 := flag.Arg(3)
    mbTrans1267 := thrift.NewTMemoryBufferLen(len(arg1266))
    defer mbTrans1267.Close()
    _, err1268 := mbTrans1267.WriteString(arg1266)
    if err1268 != nil {
      Usage()
      return
    }
    factory1269 := thrift.NewTJSONProtocolFactory()
    jsProt1270 := factory1269.GetProtocol(mbTrans1267)
    argvalue2 := interfaces.NewUint64()
    err1271 := argvalue2.Read(context.Background(), jsProt1270)
    if err1271 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1273 := flag.Arg(1)
    mbTrans1274 := thrift.NewTMemoryBufferLen(len(arg1273))
    defer mbTrans1274.Close()
    _, err1275 := mbTrans1274.WriteString(arg1273)
    if err1275 != nil {
      Usage()
      return
    }
    factory1276 := thrift.NewTJSONProtocolFactory()
    jsProt1277 := factory1276.GetProtocol(mbTrans1274)
    argvalue0 := interfaces.NewUint64()
    err1278 := argvalue0.Read(context.Background(), jsProt1277)
    if err1278 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1279 := flag.Arg(2)
    mbTrans1280 := thrift.NewTMemoryBufferLen(len(arg1279))
    defer mbTrans1280.Close()
    _, err1281 := mbTrans1280.WriteString(arg1279)
    if err1281 != nil {
      Usage()
      return
    }
    factory1282 := thrift.NewTJSONProtocolFactory()
    jsProt1283 := factory1282.GetProtocol(mbTrans1280)
    argvalue1 := interfaces.NewUint64()
    err1284 := argvalue1.Read(context.Background(), jsProt1283)
    if err1284 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1285 := flag.Arg(3)
    mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
    defer mbTrans1286.Close()
    _, err1287 := mbTrans1286.WriteString(arg1285)
    if err1287 != nil {
      Usage()
      return
    }
    factory1288 := thrift.NewTJSONProtocolFactory()
    jsProt1289 := factory1288.GetProtocol(mbTrans1286)
    argvalue2 := interfaces.NewUint64()
    err1290 := argvalue2.Read(context.Background(), jsProt1289)
    if err1290 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1292 := flag.Arg(5)
    mbTrans1293 := thrift.NewTMemoryBufferLen(len(arg1292))
    defer mbTrans1293.Close()
    _, err1294 := mbTrans1293.WriteString(arg1292)
    if err1294 != nil {
      Usage()
      return
    }
    factory1295 := thrift.NewTJSONProtocolFactory()
    jsProt1296 := factory1295.GetProtocol(mbTrans1293)
    argvalue4 := interfaces.NewUint64()
    err1297 := argvalue4.Read(context.Background(), jsProt1296)
    if err1297 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1298 := flag.Arg(1)
    mbTrans1299 := thrift.NewTMemoryBufferLen(len(arg1298))
    defer mbTrans1299.Close()
    _, err1300 := mbTrans1299.WriteString(arg1298)
    if err1300 != nil {
      Usage()
      return
    }
    factory1301 := thrift.NewTJSONProtocolFactory()
    jsProt1302 := factory1301.GetProtocol(mbTrans1299)
    argvalue0 := interfaces.NewUint64()
    err1303 := argvalue0.Read(context.Background(), jsProt1302)
    if err1303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1304 := flag.Arg(2)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue1 := interfaces.NewUint64()
    err1309 := argvalue1.Read(context.Background(), jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1310 := flag.Arg(3)
    mbTrans1311 := thrift.NewTMemoryBufferLen(len(arg1310))
    defer mbTrans1311.Close()
    _, err1312 := mbTrans1311.WriteString(arg1310)
    if err1312 != nil {
      Usage()
      return
    }
    factory1313 := thrift.NewTJSONProtocolFactory()
    jsProt1314 := factory1313.GetProtocol(mbTrans1311)
    argvalue2 := interfaces.NewUint64()
    err1315 := argvalue2.Read(context.Background(), jsProt1314)
    if err1315 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1317 := flag.Arg(5)
    mbTrans1318 := thrift.NewTMemoryBufferLen(len(arg1317))
    defer mbTrans1318.Close()
    _, err1319 := mbTrans1318.WriteString(arg1317)
    if err1319 != nil {
      Usage()
      return
    }
    factory1320 := thrift.NewTJSONProtocolFactory()
    jsProt1321 := factory1320.GetProtocol(mbTrans1318)
    argvalue4 := interfaces.NewUint64()
    err1322 := argvalue4.Read(context.Background(), jsProt1321)
    if err1322 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1323 := flag.Arg(1)
    mbTrans1324 := thrift.NewTMemoryBufferLen(len(arg1323))
    defer mbTrans1324.Close()
    _, err1325 := mbTrans1324.WriteString(arg1323)
    if err1325 != nil {
      Usage()
      return
    }
    factory1326 := thrift.NewTJSONProtocolFactory()
    jsProt1327 := factory1326.GetProtocol(mbTrans1324)
    argvalue0 := interfaces.NewUint64()
    err1328 := argvalue0.Read(context.Background(), jsProt1327)
    if err1328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1329 := flag.Arg(2)
    mbTrans1330 := thrift.NewTMemoryBufferLen(len(arg1329))
    defer mbTrans1330.Close()
    _, err1331 := mbTrans1330.WriteString(arg1329)
    if err1331 != nil {
      Usage()
      return
    }
    factory1332 := thrift.NewTJSONProtocolFactory()
    jsProt1333 := factory1332.GetProtocol(mbTrans1330)
    argvalue1 := interfaces.NewUint64()
    err1334 := argvalue1.Read(context.Background(), jsProt1333)
    if err1334 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1335 := flag.Arg(3)
    mbTrans1336 := thrift.NewTMemoryBufferLen(len(arg1335))
    defer mbTrans1336.Close()
    _, err1337 := mbTrans1336.WriteString(arg1335)
    if err1337 != nil {
      Usage()
      return
    }
    factory1338 := thrift.NewTJSONProtocolFactory()
    jsProt1339 := factory1338.GetProtocol(mbTrans1336)
    argvalue2 := interfaces.NewUint64()
    err1340 := argvalue2.Read(context.Background(), jsProt1339)
    if err1340 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1341 := flag.Arg(1)
    mbTrans1342 := thrift.NewTMemoryBufferLen(len(arg1341))
    defer mbTrans1342.Close()
    _, err1343 := mbTrans1342.WriteString(arg1341)
    if err1343 != nil {
      Usage()
      return
    }
    factory1344 := thrift.NewTJSONProtocolFactory()
    jsProt1345 := factory1344.GetProtocol(mbTrans1342)
    argvalue0 := interfaces.NewUint64()
    err1346 := argvalue0.Read(context.Background(), jsProt1345)
    if err1346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1347 := flag.Arg(2)
    mbTrans1348 := thrift.NewTMemoryBufferLen(len(arg1347))
    defer mbTrans1348.Close()
    _, err1349 := mbTrans1348.WriteString(arg1347)
    if err1349 != nil {
      Usage()
      return
    }
    factory1350 := thrift.NewTJSONProtocolFactory()
    jsProt1351 := factory1350.GetProtocol(mbTrans1348)
    argvalue1 := interfaces.NewUint64()
    err1352 := argvalue1.Read(context.Background(), jsProt1351)
    if err1352 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1353 := flag.Arg(3)
    mbTrans1354 := thrift.NewTMemoryBufferLen(len(arg1353))
    defer mbTrans1354.Close()
    _, err1355 := mbTrans1354.WriteString(arg1353)
    if err1355 != nil {
      Usage()
      return
    }
    factory1356 := thrift.NewTJSONProtocolFactory()
    jsProt1357 := factory1356.GetProtocol(mbTrans1354)
    argvalue2 := interfaces.NewUint64()
    err1358 := argvalue2.Read(context.Background(), jsProt1357)
    if err1358 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1359 := flag.Arg(4)
    mbTrans1360 := thrift.NewTMemoryBufferLen(len(arg1359))
    defer mbTrans1360.Close()
    _, err1361 := mbTrans1360.WriteString(arg1359)
    if err1361 != nil {
      Usage()
      return
    }
    factory1362 := thrift.NewTJSONProtocolFactory()
    jsProt1363 := factory1362.GetProtocol(mbTrans1360)
    argvalue3 := interfaces.NewUint64()
    err1364 := argvalue3.Read(context.Background(), jsProt1363)
    if err1364 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1366 := (strconv.Atoi(flag.Arg(1)))
    if err1366 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1367 := flag.Arg(2)
    mbTrans1368 := thrift.NewTMemoryBufferLen(len(arg1367))
    defer mbTrans1368.Close()
    _, err1369 := mbTrans1368.WriteString(arg1367)
    if err1369 != nil {
      Usage()
      return
    }
    factory1370 := thrift.NewTJSONProtocolFactory()
    jsProt1371 := factory1370.GetProtocol(mbTrans1368)
    argvalue1 := interfaces.NewUint64()
    err1372 := argvalue1.Read(context.Background(), jsProt1371)
    if err1372 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1374 := (strconv.Atoi(flag.Arg(1)))
    if err1374 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1375 := (strconv.Atoi(flag.Arg(1)))
    if err1375 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1376 := (strconv.Atoi(flag.Arg(1)))
    if err1376 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1377 := flag.Arg(1)
    mbTrans1378 := thrift.NewTMemoryBufferLen(len(arg1377))
    defer mbTrans1378.Close()
    _, err1379 := mbTrans1378.WriteString(arg1377)
    if err1379 != nil {
      Usage()
      return
    }
    factory1380 := thrift.NewTJSONProtocolFactory()
    jsProt1381 := factory1380.GetProtocol(mbTrans1378)
    argvalue0 := interfaces.NewUint64()
    err1382 := argvalue0.Read(context.Background(), jsProt1381)
    if err1382 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1383 := flag.Arg(2)
    mbTrans1384 := thrift.NewTMemoryBufferLen(len(arg1383))
    defer mbTrans1384.Close()
    _, err1385 := mbTrans1384.WriteString(arg1383)
    if err1385 != nil {
      Usage()
      return
    }
    factory1386 := thrift.NewTJSONProtocolFactory()
    jsProt1387 := factory1386.GetProtocol(mbTrans1384)
    argvalue1 := interfaces.NewUint64()
    err1388 := argvalue1.Read(context.Background(), jsProt1387)
    if err1388 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1389 := flag.Arg(3)
    mbTrans1390 := thrift.NewTMemoryBufferLen(len(arg1389))
    defer mbTrans1390.Close()
    _, err1391 := mbTrans1390.WriteString(arg1389)
    if err1391 != nil {
      Usage()
      return
    }
    factory1392 := thrift.NewTJSONProtocolFactory()
    jsProt1393 := factory1392.GetProtocol(mbTrans1390)
    argvalue2 := interfaces.NewUint64()
    err1394 := argvalue2.Read(context.Background(), jsProt1393)
    if err1394 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1395 := flag.Arg(4)
    mbTrans1396 := thrift.NewTMemoryBufferLen(len(arg1395))
    defer mbTrans1396.Close()
    _, err1397 := mbTrans1396.WriteString(arg1395)
    if err1397 != nil {
      Usage()
      return
    }
    factory1398 := thrift.NewTJSONProtocolFactory()
    jsProt1399 := factory1398.GetProtocol(mbTrans1396)
    argvalue3 := interfaces.NewUint64()
    err1400 := argvalue3.Read(context.Background(), jsProt1399)
    if err1400 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1401 := flag.Arg(1)
    mbTrans1402 := thrift.NewTMemoryBufferLen(len(arg1401))
    defer mbTrans1402.Close()
    _, err1403 := mbTrans1402.WriteString(arg1401)
    if err1403 != nil {
      Usage()
      return
    }
    factory1404 := thrift.NewTJSONProtocolFactory()
    jsProt1405 := factory1404.GetProtocol(mbTrans1402)
    argvalue0 := interfaces.NewUint64()
    err1406 := argvalue0.Read(context.Background(), jsProt1405)
    if err1406 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1407 := flag.Arg(2)
    mbTrans1408 := thrift.NewTMemoryBufferLen(len(arg1407))
    defer mbTrans1408.Close()
    _, err1409 := mbTrans1408.WriteString(arg1407)
    if err1409 != nil {
      Usage()
      return
    }
    factory1410 := thrift.NewTJSONProtocolFactory()
    jsProt1411 := factory1410.GetProtocol(mbTrans1408)
    argvalue1 := interfaces.NewUint64()
    err1412 := argvalue1.Read(context.Background(), jsProt1411)
    if err1412 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1413 := flag.Arg(3)
    mbTrans1414 := thrift.NewTMemoryBufferLen(len(arg1413))
    defer mbTrans1414.Close()
    _, err1415 := mbTrans1414.WriteString(arg1413)
    if err1415 != nil {
      Usage()
      return
    }
    factory1416 := thrift.NewTJSONProtocolFactory()
    jsProt1417 := factory1416.GetProtocol(mbTrans1414)
    argvalue2 := interfaces.NewUint64()
    err1418 := argvalue2.Read(context.Background(), jsProt1417)
    if err1418 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1420 := flag.Arg(1)
    mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
    defer mbTrans1421.Close()
    _, err1422 := mbTrans1421.WriteString(arg1420)
    if err1422 != nil {
      Usage()
      return
    }
    factory1423 := thrift.NewTJSONProtocolFactory()
    jsProt1424 := factory1423.GetProtocol(mbTrans1421)
    argvalue0 := interfaces.NewUint64()
    err1425 := argvalue0.Read(context.Background(), jsProt1424)
    if err1425 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1426 := flag.Arg(2)
    mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
    defer mbTrans1427.Close()
    _, err1428 := mbTrans1427.WriteString(arg1426)
    if err1428 != nil {
      Usage()
      return
    }
    factory1429 := thrift.NewTJSONProtocolFactory()
    jsProt1430 := factory1429.GetProtocol(mbTrans1427)
    argvalue1 := interfaces.NewUint64()
    err1431 := argvalue1.Read(context.Background(), jsProt1430)
    if err1431 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1432 := flag.Arg(3)
    mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
    defer mbTrans1433.Close()
    _, err1434 := mbTrans1433.WriteString(arg1432)
    if err1434 != nil {
      Usage()
      return
    }
    factory1435 := thrift.NewTJSONProtocolFactory()
    jsProt1436 := factory1435.GetProtocol(mbTrans1433)
    argvalue2 := interfaces.NewUint64()
    err1437 := argvalue2.Read(context.Background(), jsProt1436)
    if err1437 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1439 := flag.Arg(5)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil {
      Usage()
      return
    }
    factory1442 := thrift.NewTJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    argvalue4 := interfaces.NewUint64()
    err1444 := argvalue4.Read(context.Background(), jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1445 := flag.Arg(1)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil {
      Usage()
      return
    }
    factory1448 := thrift.NewTJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    argvalue0 := interfaces.NewUint64()
    err1450 := argvalue0.Read(context.Background(), jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1451 := flag.Arg(2)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil {
      Usage()
      return
    }
    factory1454 := thrift.NewTJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    argvalue1 := interfaces.NewUint64()
    err1456 := argvalue1.Read(context.Background(), jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1457 := flag.Arg(3)
    mbTrans1458 := thrift.NewTMemoryBufferLen(len(arg1457))
    defer mbTrans1458.Close()
    _, err1459 := mbTrans1458.WriteString(arg1457)
    if err1459 != nil {
      Usage()
      return
    }
    factory1460 := thrift.NewTJSONProtocolFactory()
    jsProt1461 := factory1460.GetProtocol(mbTrans1458)
    argvalue2 := interfaces.NewUint64()
    err1462 := argvalue2.Read(context.Background(), jsProt1461)
    if err1462 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1464 := flag.Arg(5)
    mbTrans1465 := thrift.NewTMemoryBufferLen(len(arg1464))
    defer mbTrans1465.Close()
    _, err1466 := mbTrans1465.WriteString(arg1464)
    if err1466 != nil {
      Usage()
      return
    }
    factory1467 := thrift.NewTJSONProtocolFactory()
    jsProt1468 := factory1467.GetProtocol(mbTrans1465)
    argvalue4 := interfaces.NewUint64()
    err1469 := argvalue4.Read(context.Background(), jsProt1468)
    if err1469 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1470 := flag.Arg(1)
    mbTrans1471 := thrift.NewTMemoryBufferLen(len(arg1470))
    defer mbTrans1471.Close()
    _, err1472 := mbTrans1471.WriteString(arg1470)
    if err1472 != nil {
      Usage()
      return
    }
    factory1473 := thrift.NewTJSONProtocolFactory()
    jsProt1474 := factory1473.GetProtocol(mbTrans1471)
    argvalue0 := interfaces.NewUint64()
    err1475 := argvalue0.Read(context.Background(), jsProt1474)
    if err1475 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1476 := flag.Arg(2)
    mbTrans1477 := thrift.NewTMemoryBufferLen(len(arg1476))
    defer mbTrans1477.Close()
    _, err1478 := mbTrans1477.WriteString(arg1476)
    if err1478 != nil {
      Usage()
      return
    }
    factory1479 := thrift.NewTJSONProtocolFactory()
    jsProt1480 := factory1479.GetProtocol(mbTrans1477)
    argvalue1 := interfaces.NewUint64()
    err1481 := argvalue1.Read(context.Background(), jsProt1480)
    if err1481 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1482 := flag.Arg(3)
    mbTrans1483 := thrift.NewTMemoryBufferLen(len(arg1482))
    defer mbTrans1483.Close()
    _, err1484 := mbTrans1483.WriteString(arg1482)
    if err1484 != nil {
      Usage()
      return
    }
    factory1485 := thrift.NewTJSONProtocolFactory()
    jsProt1486 := factory1485.GetProtocol(mbTrans1483)
    argvalue2 := interfaces.NewUint64()
    err1487 := argvalue2.Read(context.Background(), jsProt1486)
    if err1487 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1488 := flag.Arg(1)
    mbTrans1489 := thrift.NewTMemoryBufferLen(len(arg1488))
    defer mbTrans1489.Close()
    _, err1490 := mbTrans1489.WriteString(arg1488)
    if err1490 != nil {
      Usage()
      return
    }
    factory1491 := thrift.NewTJSONProtocolFactory()
    jsProt1492 := factory1491.GetProtocol(mbTrans1489)
    argvalue0 := interfaces.NewUint64()
    err1493 := argvalue0.Read(context.Background(), jsProt1492)
    if err1493 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1494 := flag.Arg(2)
    mbTrans1495 := thrift.NewTMemoryBufferLen(len(arg1494))
    defer mbTrans1495.Close()
    _, err1496 := mbTrans1495.WriteString(arg1494)
    if err1496 != nil {
      Usage()
      return
    }
    factory1497 := thrift.NewTJSONProtocolFactory()
    jsProt1498 := factory1497.GetProtocol(mbTrans1495)
    argvalue1 := interfaces.NewUint64()
    err1499 := argvalue1.Read(context.Background(), jsProt1498)
    if err1499 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1500 := flag.Arg(3)
    mbTrans1501 := thrift.NewTMemoryBufferLen(len(arg1500))
    defer mbTrans1501.Close()
    _, err1502 := mbTrans1501.WriteString(arg1500)
    if err1502 != nil {
      Usage()
      return
    }
    factory1503 := thrift.NewTJSONProtocolFactory()
    jsProt1504 := factory1503.GetProtocol(mbTrans1501)
    argvalue2 := interfaces.NewUint64()
    err1505 := argvalue2.Read(context.Background(), jsProt1504)
    if err1505 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1506 := flag.Arg(4)
    mbTrans1507 := thrift.NewTMemoryBufferLen(len(arg1506))
    defer mbTrans1507.Close()
    _, err1508 := mbTrans1507.WriteString(arg1506)
    if err1508 != nil {
      Usage()
      return
    }
    factory1509 := thrift.NewTJSONProtocolFactory()
    jsProt1510 := factory1509.GetProtocol(mbTrans1507)
    argvalue3 := interfaces.NewUint64()
    err1511 := argvalue3.Read(context.Background(), jsProt1510)
    if err1511 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1513 := (strconv.Atoi(flag.Arg(1)))
    if err1513 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1514 := flag.Arg(2)
    mbTrans1515 := thrift.NewTMemoryBufferLen(len(arg1514))
    defer mbTrans1515.Close()
    _, err1516 := mbTrans1515.WriteString(arg1514)
    if err1516 != nil {
      Usage()
      return
    }
    factory1517 := thrift.NewTJSONProtocolFactory()
    jsProt1518 := factory1517.GetProtocol(mbTrans1515)
    argvalue1 := interfaces.NewUint64()
    err1519 := argvalue1.Read(context.Background(), jsProt1518)
    if err1519 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1521 := (strconv.Atoi(flag.Arg(1)))
    if err1521 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1522 := (strconv.Atoi(flag.Arg(1)))
    if err1522 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1523 := (strconv.Atoi(flag.Arg(1)))
    if err1523 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1524 := flag.Arg(1)
    mbTrans1525 := thrift.NewTMemoryBufferLen(len(arg1524))
    defer mbTrans1525.Close()
    _, err1526 := mbTrans1525.WriteString(arg1524)
    if err1526 != nil {
      Usage()
      return
    }
    factory1527 := thrift.NewTJSONProtocolFactory()
    jsProt1528 := factory1527.GetProtocol(mbTrans1525)
    argvalue0 := interfaces.NewUint64()
    err1529 := argvalue0.Read(context.Background(), jsProt1528)
    if err1529 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1530 := flag.Arg(2)
    mbTrans1531 := thrift.NewTMemoryBufferLen(len(arg1530))
    defer mbTrans1531.Close()
    _, err1532 := mbTrans1531.WriteString(arg1530)
    if err1532 != nil {
      Usage()
      return
    }
    factory1533 := thrift.NewTJSONProtocolFactory()
    jsProt1534 := factory1533.GetProtocol(mbTrans1531)
    argvalue1 := interfaces.NewUint64()
    err1535 := argvalue1.Read(context.Background(), jsProt1534)
    if err1535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1536 := flag.Arg(3)
    mbTrans1537 := thrift.NewTMemoryBufferLen(len(arg1536))
    defer mbTrans1537.Close()
    _, err1538 := mbTrans1537.WriteString(arg1536)
    if err1538 != nil {
      Usage()
      return
    }
    factory1539 := thrift.NewTJSONProtocolFactory()
    jsProt1540 := factory1539.GetProtocol(mbTrans1537)
    argvalue2 := interfaces.NewUint64()
    err1541 := argvalue2.Read(context.Background(), jsProt1540)
    if err1541 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1542 := flag.Arg(4)
    mbTrans1543 := thrift.NewTMemoryBufferLen(len(arg1542))
    defer mbTrans1543.Close()
    _, err1544 := mbTrans1543.WriteString(arg1542)
    if err1544 != nil {
      Usage()
      return
    }
    factory1545 := thrift.NewTJSONProtocolFactory()
    jsProt1546 := factory1545.GetProtocol(mbTrans1543)
    argvalue3 := interfaces.NewUint64()
    err1547 := argvalue3.Read(context.Background(), jsProt1546)
    if err1547 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1548 := flag.Arg(1)
    mbTrans1549 := thrift.NewTMemoryBufferLen(len(arg1548))
    defer mbTrans1549.Close()
    _, err1550 := mbTrans1549.WriteString(arg1548)
    if err1550 != nil {
      Usage()
      return
    }
    factory1551 := thrift.NewTJSONProtocolFactory()
    jsProt1552 := factory1551.GetProtocol(mbTrans1549)
    argvalue0 := interfaces.NewUint64()
    err1553 := argvalue0.Read(context.Background(), jsProt1552)
    if err1553 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1554 := flag.Arg(2)
    mbTrans1555 := thrift.NewTMemoryBufferLen(len(arg1554))
    defer mbTrans1555.Close()
    _, err1556 := mbTrans1555.WriteString(arg1554)
    if err1556 != nil {
      Usage()
      return
    }
    factory1557 := thrift.NewTJSONProtocolFactory()
    jsProt1558 := factory1557.GetProtocol(mbTrans1555)
    argvalue1 := interfaces.NewUint64()
    err1559 := argvalue1.Read(context.Background(), jsProt1558)
    if err1559 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1560 := flag.Arg(3)
    mbTrans1561 := thrift.NewTMemoryBufferLen(len(arg1560))
    defer mbTrans1561.Close()
    _, err1562 := mbTrans1561.WriteString(arg1560)
    if err1562 != nil {
      Usage()
      return
    }
    factory1563 := thrift.NewTJSONProtocolFactory()
    jsProt1564 := factory1563.GetProtocol(mbTrans1561)
    argvalue2 := interfaces.NewUint64()
    err1565 := argvalue2.Read(context.Background(), jsProt1564)
    if err1565 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1567 := flag.Arg(1)
    mbTrans1568 := thrift.NewTMemoryBufferLen(len(arg1567))
    defer mbTrans1568.Close()
    _, err1569 := mbTrans1568.WriteString(arg1567)
    if err1569 != nil {
      Usage()
      return
    }
    factory1570 := thrift.NewTJSONProtocolFactory()
    jsProt1571 := factory1570.GetProtocol(mbTrans1568)
    argvalue0 := interfaces.NewUint64()
    err1572 := argvalue0.Read(context.Background(), jsProt1571)
    if err1572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1573 := flag.Arg(2)
    mbTrans1574 := thrift.NewTMemoryBufferLen(len(arg1573))
    defer mbTrans1574.Close()
    _, err1575 := mbTrans1574.WriteString(arg1573)
    if err1575 != nil {
      Usage()
      return
    }
    factory1576 := thrift.NewTJSONProtocolFactory()
    jsProt1577 := factory1576.GetProtocol(mbTrans1574)
    argvalue1 := interfaces.NewUint64()
    err1578 := argvalue1.Read(context.Background(), jsProt1577)
    if err1578 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1579 := flag.Arg(3)
    mbTrans1580 := thrift.NewTMemoryBufferLen(len(arg1579))
    defer mbTrans1580.Close()
    _, err1581 := mbTrans1580.WriteString(arg1579)
    if err1581 != nil {
      Usage()
      return
    }
    factory1582 := thrift.NewTJSONProtocolFactory()
    jsProt1583 := factory1582.GetProtocol(mbTrans1580)
    argvalue2 := interfaces.NewUint64()
    err1584 := argvalue2.Read(context.Background(), jsProt1583)
    if err1584 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1586 := flag.Arg(5)
    mbTrans1587 := thrift.NewTMemoryBufferLen(len(arg1586))
    defer mbTrans1587.Close()
    _, err1588 := mbTrans1587.WriteString(arg1586)
    if err1588 != nil {
      Usage()
      return
    }
    factory1589 := thrift.NewTJSONProtocolFactory()
    jsProt1590 := factory1589.GetProtocol(mbTrans1587)
    argvalue4 := interfaces.NewUint64()
    err1591 := argvalue4.Read(context.Background(), jsProt1590)
    if err1591 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1592 := flag.Arg(1)
    mbTrans1593 := thrift.NewTMemoryBufferLen(len(arg1592))
    defer mbTrans1593.Close()
    _, err1594 := mbTrans1593.WriteString(arg1592)
    if err1594 != nil {
      Usage()
      return
    }
    factory1595 := thrift.NewTJSONProtocolFactory()
    jsProt1596 := factory1595.GetProtocol(mbTrans1593)
    argvalue0 := interfaces.NewUint64()
    err1597 := argvalue0.Read(context.Background(), jsProt1596)
    if err1597 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1598 := flag.Arg(2)
    mbTrans1599 := thrift.NewTMemoryBufferLen(len(arg1598))
    defer mbTrans1599.Close()
    _, err1600 := mbTrans1599.WriteString(arg1598)
    if err1600 != nil {
      Usage()
      return
    }
    factory1601 := thrift.NewTJSONProtocolFactory()
    jsProt1602 := factory1601.GetProtocol(mbTrans1599)
    argvalue1 := interfaces.NewUint64()
    err1603 := argvalue1.Read(context.Background(), jsProt1602)
    if err1603 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1604 := flag.Arg(3)
    mbTrans1605 := thrift.NewTMemoryBufferLen(len(arg1604))
    defer mbTrans1605.Close()
    _, err1606 := mbTrans1605.WriteString(arg1604)
    if err1606 != nil {
      Usage()
      return
    }
    factory1607 := thrift.NewTJSONProtocolFactory()
    jsProt1608 := factory1607.GetProtocol(mbTrans1605)
    argvalue2 := interfaces.NewUint64()
    err1609 := argvalue2.Read(context.Background(), jsProt1608)
    if err1609 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1611 := flag.Arg(5)
    mbTrans1612 := thrift.NewTMemoryBufferLen(len(arg1611))
    defer mbTrans1612.Close()
    _, err1613 := mbTrans1612.WriteString(arg1611)
    if err1613 != nil {
      Usage()
      return
    }
    factory1614 := thrift.NewTJSONProtocolFactory()
    jsProt1615 := factory1614.GetProtocol(mbTrans1612)
    argvalue4 := interfaces.NewUint64()
    err1616 := argvalue4.Read(context.Background(), jsProt1615)
    if err1616 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1617 := flag.Arg(1)
    mbTrans1618 := thrift.NewTMemoryBufferLen(len(arg1617))
    defer mbTrans1618.Close()
    _, err1619 := mbTrans1618.WriteString(arg1617)
    if err1619 != nil {
      Usage()
      return
    }
    factory1620 := thrift.NewTJSONProtocolFactory()
    jsProt1621 := factory1620.GetProtocol(mbTrans1618)
    argvalue0 := interfaces.NewUint64()
    err1622 := argvalue0.Read(context.Background(), jsProt1621)
    if err1622 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1623 := flag.Arg(2)
    mbTrans1624 := thrift.NewTMemoryBufferLen(len(arg1623))
    defer mbTrans1624.Close()
    _, err1625 := mbTrans1624.WriteString(arg1623)
    if err1625 != nil {
      Usage()
      return
    }
    factory1626 := thrift.NewTJSONProtocolFactory()
    jsProt1627 := factory1626.GetProtocol(mbTrans1624)
    argvalue1 := interfaces.NewUint64()
    err1628 := argvalue1.Read(context.Background(), jsProt1627)
    if err1628 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1629 := flag.Arg(3)
    mbTrans1630 := thrift.NewTMemoryBufferLen(len(arg1629))
    defer mbTrans1630.Close()
    _, err1631 := mbTrans1630.WriteString(arg1629)
    if err1631 != nil {
      Usage()
      return
    }
    factory1632 := thrift.NewTJSONProtocolFactory()
    jsProt1633 := factory1632.GetProtocol(mbTrans1630)
    argvalue2 := interfaces.NewUint64()
    err1634 := argvalue2.Read(context.Background(), jsProt1633)
    if err1634 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
