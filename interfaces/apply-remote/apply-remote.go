// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"interfaces"
)

var _ = interfaces.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 end_apply()")
  fmt.Fprintln(os.Stderr, "  void prints(string cstr)")
  fmt.Fprintln(os.Stderr, "  void prints_l(string cstr)")
  fmt.Fprintln(os.Stderr, "  void printi(i64 n)")
  fmt.Fprintln(os.Stderr, "  void printui(Uint64 n)")
  fmt.Fprintln(os.Stderr, "  void printi128(string value)")
  fmt.Fprintln(os.Stderr, "  void printui128(string value)")
  fmt.Fprintln(os.Stderr, "  void printsf(string value)")
  fmt.Fprintln(os.Stderr, "  void printdf(string value)")
  fmt.Fprintln(os.Stderr, "  void printqf(string value)")
  fmt.Fprintln(os.Stderr, "  void printn(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void printhex(string data)")
  fmt.Fprintln(os.Stderr, "  i32 action_data_size()")
  fmt.Fprintln(os.Stderr, "  string read_action_data()")
  fmt.Fprintln(os.Stderr, "  void require_recipient(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  bool has_auth(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void require_auth2(Uint64 name, Uint64 permission)")
  fmt.Fprintln(os.Stderr, "  bool is_account(Uint64 name)")
  fmt.Fprintln(os.Stderr, "  void send_inline(string serialized_action)")
  fmt.Fprintln(os.Stderr, "  void send_context_free_inline(string serialized_data)")
  fmt.Fprintln(os.Stderr, "  Uint64 publication_time()")
  fmt.Fprintln(os.Stderr, "  Uint64 current_receiver()")
  fmt.Fprintln(os.Stderr, "  void eosio_assert(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_message(bool test, string msg)")
  fmt.Fprintln(os.Stderr, "  void eosio_assert_code(bool test, Uint64 code)")
  fmt.Fprintln(os.Stderr, "  void eosio_exit(i32 code)")
  fmt.Fprintln(os.Stderr, "  Uint64 current_time()")
  fmt.Fprintln(os.Stderr, "  bool is_feature_activated(string feature_digest)")
  fmt.Fprintln(os.Stderr, "  Uint64 get_sender()")
  fmt.Fprintln(os.Stderr, "  void assert_sha256(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha1(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_sha512(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  void assert_ripemd160(string data, string hash)")
  fmt.Fprintln(os.Stderr, "  string sha256(string data)")
  fmt.Fprintln(os.Stderr, "  string sha1(string data)")
  fmt.Fprintln(os.Stderr, "  string sha512(string data)")
  fmt.Fprintln(os.Stderr, "  string ripemd160(string data)")
  fmt.Fprintln(os.Stderr, "  string recover_key(string digest, string sig)")
  fmt.Fprintln(os.Stderr, "  void assert_recover_key(string digest, string sig, string pub)")
  fmt.Fprintln(os.Stderr, "  void send_deferred(string sender_id, Uint64 payer, string serialized_transaction, i32 replace_existing)")
  fmt.Fprintln(os.Stderr, "  i32 cancel_deferred(string sender_id)")
  fmt.Fprintln(os.Stderr, "  string read_transaction()")
  fmt.Fprintln(os.Stderr, "  i32 transaction_size()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_num()")
  fmt.Fprintln(os.Stderr, "  i32 tapos_block_prefix()")
  fmt.Fprintln(os.Stderr, "  i64 expiration()")
  fmt.Fprintln(os.Stderr, "  string get_action(i32 _type, i32 index)")
  fmt.Fprintln(os.Stderr, "  string get_context_free_data(i32 index)")
  fmt.Fprintln(os.Stderr, "  i32 db_store_i64(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_update_i64(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_remove_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  string db_get_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_next_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_previous_i64(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  i32 db_find_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_lowerbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_upperbound_i64(Uint64 code, Uint64 scope, Uint64 table, Uint64 id)")
  fmt.Fprintln(os.Stderr, "  i32 db_end_i64(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_update(i32 iterator, Uint64 payer, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx64_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx64_previous(i32 iteratory)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx64_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx64_find_secondary(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_lowerbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx64_upperbound(Uint64 code, Uint64 scope, Uint64 table, Uint64 secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx64_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx128_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx128_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx128_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx128_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx128_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx128_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_update(i32 iterator, Uint64 payer, string data)")
  fmt.Fprintln(os.Stderr, "  void db_idx256_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx256_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx256_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx256_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string data)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx256_upperbound(Uint64 code, Uint64 scope, Uint64 table, string data, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx256_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_store(Uint64 scope, Uint64 table, Uint64 payer, Uint64 id, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_update(i32 iterator, Uint64 payer, string secondary)")
  fmt.Fprintln(os.Stderr, "  void db_idx_long_double_remove(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_next(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  NextPreviousReturn db_idx_long_double_previous(i32 iterator)")
  fmt.Fprintln(os.Stderr, "  FindPrimaryReturn db_idx_long_double_find_primary(Uint64 code, Uint64 scope, Uint64 table, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  FindSecondaryReturn db_idx_long_double_find_secondary(Uint64 code, Uint64 scope, Uint64 table, string secondary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_lowerbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  LowerBoundUpperBoundReturn db_idx_long_double_upperbound(Uint64 code, Uint64 scope, Uint64 table, string secondary, Uint64 primary)")
  fmt.Fprintln(os.Stderr, "  i32 db_idx_long_double_end(Uint64 code, Uint64 scope, Uint64 table)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := interfaces.NewApplyClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "end_apply":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "EndApply requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.EndApply(context.Background()))
    fmt.Print("\n")
    break
  case "prints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Prints requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Prints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prints_l":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrintsL requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.PrintsL(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi requires 1 args")
      flag.Usage()
    }
    argvalue0, err468 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err468 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printi(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui requires 1 args")
      flag.Usage()
    }
    arg469 := flag.Arg(1)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil {
      Usage()
      return
    }
    factory472 := thrift.NewTJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    argvalue0 := interfaces.NewUint64()
    err474 := argvalue0.Read(context.Background(), jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printui(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printi128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printi128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printi128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printui128":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printui128 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printui128(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printsf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printsf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printsf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printdf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printdf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printdf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printqf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printqf requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printqf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printn requires 1 args")
      flag.Usage()
    }
    arg480 := flag.Arg(1)
    mbTrans481 := thrift.NewTMemoryBufferLen(len(arg480))
    defer mbTrans481.Close()
    _, err482 := mbTrans481.WriteString(arg480)
    if err482 != nil {
      Usage()
      return
    }
    factory483 := thrift.NewTJSONProtocolFactory()
    jsProt484 := factory483.GetProtocol(mbTrans481)
    argvalue0 := interfaces.NewUint64()
    err485 := argvalue0.Read(context.Background(), jsProt484)
    if err485 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Printn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "printhex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Printhex requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Printhex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "action_data_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActionDataSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActionDataSize(context.Background()))
    fmt.Print("\n")
    break
  case "read_action_data":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadActionData requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadActionData(context.Background()))
    fmt.Print("\n")
    break
  case "require_recipient":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireRecipient requires 1 args")
      flag.Usage()
    }
    arg487 := flag.Arg(1)
    mbTrans488 := thrift.NewTMemoryBufferLen(len(arg487))
    defer mbTrans488.Close()
    _, err489 := mbTrans488.WriteString(arg487)
    if err489 != nil {
      Usage()
      return
    }
    factory490 := thrift.NewTJSONProtocolFactory()
    jsProt491 := factory490.GetProtocol(mbTrans488)
    argvalue0 := interfaces.NewUint64()
    err492 := argvalue0.Read(context.Background(), jsProt491)
    if err492 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireRecipient(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequireAuth requires 1 args")
      flag.Usage()
    }
    arg493 := flag.Arg(1)
    mbTrans494 := thrift.NewTMemoryBufferLen(len(arg493))
    defer mbTrans494.Close()
    _, err495 := mbTrans494.WriteString(arg493)
    if err495 != nil {
      Usage()
      return
    }
    factory496 := thrift.NewTJSONProtocolFactory()
    jsProt497 := factory496.GetProtocol(mbTrans494)
    argvalue0 := interfaces.NewUint64()
    err498 := argvalue0.Read(context.Background(), jsProt497)
    if err498 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequireAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "has_auth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HasAuth requires 1 args")
      flag.Usage()
    }
    arg499 := flag.Arg(1)
    mbTrans500 := thrift.NewTMemoryBufferLen(len(arg499))
    defer mbTrans500.Close()
    _, err501 := mbTrans500.WriteString(arg499)
    if err501 != nil {
      Usage()
      return
    }
    factory502 := thrift.NewTJSONProtocolFactory()
    jsProt503 := factory502.GetProtocol(mbTrans500)
    argvalue0 := interfaces.NewUint64()
    err504 := argvalue0.Read(context.Background(), jsProt503)
    if err504 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HasAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "require_auth2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequireAuth2 requires 2 args")
      flag.Usage()
    }
    arg505 := flag.Arg(1)
    mbTrans506 := thrift.NewTMemoryBufferLen(len(arg505))
    defer mbTrans506.Close()
    _, err507 := mbTrans506.WriteString(arg505)
    if err507 != nil {
      Usage()
      return
    }
    factory508 := thrift.NewTJSONProtocolFactory()
    jsProt509 := factory508.GetProtocol(mbTrans506)
    argvalue0 := interfaces.NewUint64()
    err510 := argvalue0.Read(context.Background(), jsProt509)
    if err510 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg511 := flag.Arg(2)
    mbTrans512 := thrift.NewTMemoryBufferLen(len(arg511))
    defer mbTrans512.Close()
    _, err513 := mbTrans512.WriteString(arg511)
    if err513 != nil {
      Usage()
      return
    }
    factory514 := thrift.NewTJSONProtocolFactory()
    jsProt515 := factory514.GetProtocol(mbTrans512)
    argvalue1 := interfaces.NewUint64()
    err516 := argvalue1.Read(context.Background(), jsProt515)
    if err516 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RequireAuth2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "is_account":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsAccount requires 1 args")
      flag.Usage()
    }
    arg517 := flag.Arg(1)
    mbTrans518 := thrift.NewTMemoryBufferLen(len(arg517))
    defer mbTrans518.Close()
    _, err519 := mbTrans518.WriteString(arg517)
    if err519 != nil {
      Usage()
      return
    }
    factory520 := thrift.NewTJSONProtocolFactory()
    jsProt521 := factory520.GetProtocol(mbTrans518)
    argvalue0 := interfaces.NewUint64()
    err522 := argvalue0.Read(context.Background(), jsProt521)
    if err522 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsAccount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "send_context_free_inline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendContextFreeInline requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.SendContextFreeInline(context.Background(), value0))
    fmt.Print("\n")
    break
  case "publication_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PublicationTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PublicationTime(context.Background()))
    fmt.Print("\n")
    break
  case "current_receiver":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentReceiver requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentReceiver(context.Background()))
    fmt.Print("\n")
    break
  case "eosio_assert":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssert requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssert(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_message":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.EosioAssertMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_assert_code":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EosioAssertCode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    arg530 := flag.Arg(2)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue1 := interfaces.NewUint64()
    err535 := argvalue1.Read(context.Background(), jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EosioAssertCode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "eosio_exit":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EosioExit requires 1 args")
      flag.Usage()
    }
    tmp0, err536 := (strconv.Atoi(flag.Arg(1)))
    if err536 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.EosioExit(context.Background(), value0))
    fmt.Print("\n")
    break
  case "current_time":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CurrentTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CurrentTime(context.Background()))
    fmt.Print("\n")
    break
  case "is_feature_activated":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsFeatureActivated requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.IsFeatureActivated(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_sender":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSender requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSender(context.Background()))
    fmt.Print("\n")
    break
  case "assert_sha256":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha256 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha256(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha1":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha1 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha1(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_sha512":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertSha512 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertSha512(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_ripemd160":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssertRipemd160 requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.AssertRipemd160(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sha256":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha256 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha256(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha1 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sha512":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Sha512 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Sha512(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ripemd160":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Ripemd160 requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.Ripemd160(context.Background(), value0))
    fmt.Print("\n")
    break
  case "recover_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RecoverKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.RecoverKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "assert_recover_key":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AssertRecoverKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.AssertRecoverKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "send_deferred":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendDeferred requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg556 := flag.Arg(2)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewTJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue1 := interfaces.NewUint64()
    err561 := argvalue1.Read(context.Background(), jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    tmp3, err563 := (strconv.Atoi(flag.Arg(4)))
    if err563 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendDeferred(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cancel_deferred":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDeferred requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.CancelDeferred(context.Background(), value0))
    fmt.Print("\n")
    break
  case "read_transaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReadTransaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReadTransaction(context.Background()))
    fmt.Print("\n")
    break
  case "transaction_size":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TransactionSize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TransactionSize(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_num":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockNum requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockNum(context.Background()))
    fmt.Print("\n")
    break
  case "tapos_block_prefix":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TaposBlockPrefix requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TaposBlockPrefix(context.Background()))
    fmt.Print("\n")
    break
  case "expiration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Expiration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Expiration(context.Background()))
    fmt.Print("\n")
    break
  case "get_action":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAction requires 2 args")
      flag.Usage()
    }
    tmp0, err565 := (strconv.Atoi(flag.Arg(1)))
    if err565 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err566 := (strconv.Atoi(flag.Arg(2)))
    if err566 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_context_free_data":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContextFreeData requires 1 args")
      flag.Usage()
    }
    tmp0, err567 := (strconv.Atoi(flag.Arg(1)))
    if err567 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetContextFreeData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_store_i64":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbStoreI64 requires 5 args")
      flag.Usage()
    }
    arg568 := flag.Arg(1)
    mbTrans569 := thrift.NewTMemoryBufferLen(len(arg568))
    defer mbTrans569.Close()
    _, err570 := mbTrans569.WriteString(arg568)
    if err570 != nil {
      Usage()
      return
    }
    factory571 := thrift.NewTJSONProtocolFactory()
    jsProt572 := factory571.GetProtocol(mbTrans569)
    argvalue0 := interfaces.NewUint64()
    err573 := argvalue0.Read(context.Background(), jsProt572)
    if err573 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg574 := flag.Arg(2)
    mbTrans575 := thrift.NewTMemoryBufferLen(len(arg574))
    defer mbTrans575.Close()
    _, err576 := mbTrans575.WriteString(arg574)
    if err576 != nil {
      Usage()
      return
    }
    factory577 := thrift.NewTJSONProtocolFactory()
    jsProt578 := factory577.GetProtocol(mbTrans575)
    argvalue1 := interfaces.NewUint64()
    err579 := argvalue1.Read(context.Background(), jsProt578)
    if err579 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg580 := flag.Arg(3)
    mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil {
      Usage()
      return
    }
    factory583 := thrift.NewTJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    argvalue2 := interfaces.NewUint64()
    err585 := argvalue2.Read(context.Background(), jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg586 := flag.Arg(4)
    mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewTJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue3 := interfaces.NewUint64()
    err591 := argvalue3.Read(context.Background(), jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbStoreI64(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_update_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbUpdateI64 requires 3 args")
      flag.Usage()
    }
    tmp0, err593 := (strconv.Atoi(flag.Arg(1)))
    if err593 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg594 := flag.Arg(2)
    mbTrans595 := thrift.NewTMemoryBufferLen(len(arg594))
    defer mbTrans595.Close()
    _, err596 := mbTrans595.WriteString(arg594)
    if err596 != nil {
      Usage()
      return
    }
    factory597 := thrift.NewTJSONProtocolFactory()
    jsProt598 := factory597.GetProtocol(mbTrans595)
    argvalue1 := interfaces.NewUint64()
    err599 := argvalue1.Read(context.Background(), jsProt598)
    if err599 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbUpdateI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_remove_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbRemoveI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err601 := (strconv.Atoi(flag.Arg(1)))
    if err601 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbRemoveI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_get_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbGetI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err602 := (strconv.Atoi(flag.Arg(1)))
    if err602 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbGetI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_next_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbNextI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err603 := (strconv.Atoi(flag.Arg(1)))
    if err603 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbNextI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_previous_i64":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbPreviousI64 requires 1 args")
      flag.Usage()
    }
    tmp0, err604 := (strconv.Atoi(flag.Arg(1)))
    if err604 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbPreviousI64(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_find_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbFindI64 requires 4 args")
      flag.Usage()
    }
    arg605 := flag.Arg(1)
    mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewTJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue0 := interfaces.NewUint64()
    err610 := argvalue0.Read(context.Background(), jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg611 := flag.Arg(2)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue1 := interfaces.NewUint64()
    err616 := argvalue1.Read(context.Background(), jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg617 := flag.Arg(3)
    mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil {
      Usage()
      return
    }
    factory620 := thrift.NewTJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    argvalue2 := interfaces.NewUint64()
    err622 := argvalue2.Read(context.Background(), jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg623 := flag.Arg(4)
    mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewTJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue3 := interfaces.NewUint64()
    err628 := argvalue3.Read(context.Background(), jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbFindI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_lowerbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbLowerboundI64 requires 4 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewTJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := interfaces.NewUint64()
    err634 := argvalue0.Read(context.Background(), jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg635 := flag.Arg(2)
    mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
    defer mbTrans636.Close()
    _, err637 := mbTrans636.WriteString(arg635)
    if err637 != nil {
      Usage()
      return
    }
    factory638 := thrift.NewTJSONProtocolFactory()
    jsProt639 := factory638.GetProtocol(mbTrans636)
    argvalue1 := interfaces.NewUint64()
    err640 := argvalue1.Read(context.Background(), jsProt639)
    if err640 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg641 := flag.Arg(3)
    mbTrans642 := thrift.NewTMemoryBufferLen(len(arg641))
    defer mbTrans642.Close()
    _, err643 := mbTrans642.WriteString(arg641)
    if err643 != nil {
      Usage()
      return
    }
    factory644 := thrift.NewTJSONProtocolFactory()
    jsProt645 := factory644.GetProtocol(mbTrans642)
    argvalue2 := interfaces.NewUint64()
    err646 := argvalue2.Read(context.Background(), jsProt645)
    if err646 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg647 := flag.Arg(4)
    mbTrans648 := thrift.NewTMemoryBufferLen(len(arg647))
    defer mbTrans648.Close()
    _, err649 := mbTrans648.WriteString(arg647)
    if err649 != nil {
      Usage()
      return
    }
    factory650 := thrift.NewTJSONProtocolFactory()
    jsProt651 := factory650.GetProtocol(mbTrans648)
    argvalue3 := interfaces.NewUint64()
    err652 := argvalue3.Read(context.Background(), jsProt651)
    if err652 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbLowerboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_upperbound_i64":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbUpperboundI64 requires 4 args")
      flag.Usage()
    }
    arg653 := flag.Arg(1)
    mbTrans654 := thrift.NewTMemoryBufferLen(len(arg653))
    defer mbTrans654.Close()
    _, err655 := mbTrans654.WriteString(arg653)
    if err655 != nil {
      Usage()
      return
    }
    factory656 := thrift.NewTJSONProtocolFactory()
    jsProt657 := factory656.GetProtocol(mbTrans654)
    argvalue0 := interfaces.NewUint64()
    err658 := argvalue0.Read(context.Background(), jsProt657)
    if err658 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg659 := flag.Arg(2)
    mbTrans660 := thrift.NewTMemoryBufferLen(len(arg659))
    defer mbTrans660.Close()
    _, err661 := mbTrans660.WriteString(arg659)
    if err661 != nil {
      Usage()
      return
    }
    factory662 := thrift.NewTJSONProtocolFactory()
    jsProt663 := factory662.GetProtocol(mbTrans660)
    argvalue1 := interfaces.NewUint64()
    err664 := argvalue1.Read(context.Background(), jsProt663)
    if err664 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg665 := flag.Arg(3)
    mbTrans666 := thrift.NewTMemoryBufferLen(len(arg665))
    defer mbTrans666.Close()
    _, err667 := mbTrans666.WriteString(arg665)
    if err667 != nil {
      Usage()
      return
    }
    factory668 := thrift.NewTJSONProtocolFactory()
    jsProt669 := factory668.GetProtocol(mbTrans666)
    argvalue2 := interfaces.NewUint64()
    err670 := argvalue2.Read(context.Background(), jsProt669)
    if err670 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg671 := flag.Arg(4)
    mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
    defer mbTrans672.Close()
    _, err673 := mbTrans672.WriteString(arg671)
    if err673 != nil {
      Usage()
      return
    }
    factory674 := thrift.NewTJSONProtocolFactory()
    jsProt675 := factory674.GetProtocol(mbTrans672)
    argvalue3 := interfaces.NewUint64()
    err676 := argvalue3.Read(context.Background(), jsProt675)
    if err676 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbUpperboundI64(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_end_i64":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbEndI64 requires 3 args")
      flag.Usage()
    }
    arg677 := flag.Arg(1)
    mbTrans678 := thrift.NewTMemoryBufferLen(len(arg677))
    defer mbTrans678.Close()
    _, err679 := mbTrans678.WriteString(arg677)
    if err679 != nil {
      Usage()
      return
    }
    factory680 := thrift.NewTJSONProtocolFactory()
    jsProt681 := factory680.GetProtocol(mbTrans678)
    argvalue0 := interfaces.NewUint64()
    err682 := argvalue0.Read(context.Background(), jsProt681)
    if err682 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg683 := flag.Arg(2)
    mbTrans684 := thrift.NewTMemoryBufferLen(len(arg683))
    defer mbTrans684.Close()
    _, err685 := mbTrans684.WriteString(arg683)
    if err685 != nil {
      Usage()
      return
    }
    factory686 := thrift.NewTJSONProtocolFactory()
    jsProt687 := factory686.GetProtocol(mbTrans684)
    argvalue1 := interfaces.NewUint64()
    err688 := argvalue1.Read(context.Background(), jsProt687)
    if err688 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg689 := flag.Arg(3)
    mbTrans690 := thrift.NewTMemoryBufferLen(len(arg689))
    defer mbTrans690.Close()
    _, err691 := mbTrans690.WriteString(arg689)
    if err691 != nil {
      Usage()
      return
    }
    factory692 := thrift.NewTJSONProtocolFactory()
    jsProt693 := factory692.GetProtocol(mbTrans690)
    argvalue2 := interfaces.NewUint64()
    err694 := argvalue2.Read(context.Background(), jsProt693)
    if err694 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbEndI64(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Store requires 5 args")
      flag.Usage()
    }
    arg695 := flag.Arg(1)
    mbTrans696 := thrift.NewTMemoryBufferLen(len(arg695))
    defer mbTrans696.Close()
    _, err697 := mbTrans696.WriteString(arg695)
    if err697 != nil {
      Usage()
      return
    }
    factory698 := thrift.NewTJSONProtocolFactory()
    jsProt699 := factory698.GetProtocol(mbTrans696)
    argvalue0 := interfaces.NewUint64()
    err700 := argvalue0.Read(context.Background(), jsProt699)
    if err700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg701 := flag.Arg(2)
    mbTrans702 := thrift.NewTMemoryBufferLen(len(arg701))
    defer mbTrans702.Close()
    _, err703 := mbTrans702.WriteString(arg701)
    if err703 != nil {
      Usage()
      return
    }
    factory704 := thrift.NewTJSONProtocolFactory()
    jsProt705 := factory704.GetProtocol(mbTrans702)
    argvalue1 := interfaces.NewUint64()
    err706 := argvalue1.Read(context.Background(), jsProt705)
    if err706 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg707 := flag.Arg(3)
    mbTrans708 := thrift.NewTMemoryBufferLen(len(arg707))
    defer mbTrans708.Close()
    _, err709 := mbTrans708.WriteString(arg707)
    if err709 != nil {
      Usage()
      return
    }
    factory710 := thrift.NewTJSONProtocolFactory()
    jsProt711 := factory710.GetProtocol(mbTrans708)
    argvalue2 := interfaces.NewUint64()
    err712 := argvalue2.Read(context.Background(), jsProt711)
    if err712 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg713 := flag.Arg(4)
    mbTrans714 := thrift.NewTMemoryBufferLen(len(arg713))
    defer mbTrans714.Close()
    _, err715 := mbTrans714.WriteString(arg713)
    if err715 != nil {
      Usage()
      return
    }
    factory716 := thrift.NewTJSONProtocolFactory()
    jsProt717 := factory716.GetProtocol(mbTrans714)
    argvalue3 := interfaces.NewUint64()
    err718 := argvalue3.Read(context.Background(), jsProt717)
    if err718 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg719 := flag.Arg(5)
    mbTrans720 := thrift.NewTMemoryBufferLen(len(arg719))
    defer mbTrans720.Close()
    _, err721 := mbTrans720.WriteString(arg719)
    if err721 != nil {
      Usage()
      return
    }
    factory722 := thrift.NewTJSONProtocolFactory()
    jsProt723 := factory722.GetProtocol(mbTrans720)
    argvalue4 := interfaces.NewUint64()
    err724 := argvalue4.Read(context.Background(), jsProt723)
    if err724 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64Update requires 3 args")
      flag.Usage()
    }
    tmp0, err725 := (strconv.Atoi(flag.Arg(1)))
    if err725 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg726 := flag.Arg(2)
    mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
    defer mbTrans727.Close()
    _, err728 := mbTrans727.WriteString(arg726)
    if err728 != nil {
      Usage()
      return
    }
    factory729 := thrift.NewTJSONProtocolFactory()
    jsProt730 := factory729.GetProtocol(mbTrans727)
    argvalue1 := interfaces.NewUint64()
    err731 := argvalue1.Read(context.Background(), jsProt730)
    if err731 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg732 := flag.Arg(3)
    mbTrans733 := thrift.NewTMemoryBufferLen(len(arg732))
    defer mbTrans733.Close()
    _, err734 := mbTrans733.WriteString(arg732)
    if err734 != nil {
      Usage()
      return
    }
    factory735 := thrift.NewTJSONProtocolFactory()
    jsProt736 := factory735.GetProtocol(mbTrans733)
    argvalue2 := interfaces.NewUint64()
    err737 := argvalue2.Read(context.Background(), jsProt736)
    if err737 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx64_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err738 := (strconv.Atoi(flag.Arg(1)))
    if err738 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Next requires 1 args")
      flag.Usage()
    }
    tmp0, err739 := (strconv.Atoi(flag.Arg(1)))
    if err739 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx64Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err740 := (strconv.Atoi(flag.Arg(1)))
    if err740 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx64Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx64_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindPrimary requires 4 args")
      flag.Usage()
    }
    arg741 := flag.Arg(1)
    mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
    defer mbTrans742.Close()
    _, err743 := mbTrans742.WriteString(arg741)
    if err743 != nil {
      Usage()
      return
    }
    factory744 := thrift.NewTJSONProtocolFactory()
    jsProt745 := factory744.GetProtocol(mbTrans742)
    argvalue0 := interfaces.NewUint64()
    err746 := argvalue0.Read(context.Background(), jsProt745)
    if err746 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg747 := flag.Arg(2)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue1 := interfaces.NewUint64()
    err752 := argvalue1.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg753 := flag.Arg(3)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil {
      Usage()
      return
    }
    factory756 := thrift.NewTJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    argvalue2 := interfaces.NewUint64()
    err758 := argvalue2.Read(context.Background(), jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg759 := flag.Arg(4)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil {
      Usage()
      return
    }
    factory762 := thrift.NewTJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    argvalue3 := interfaces.NewUint64()
    err764 := argvalue3.Read(context.Background(), jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx64FindSecondary requires 4 args")
      flag.Usage()
    }
    arg765 := flag.Arg(1)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil {
      Usage()
      return
    }
    factory768 := thrift.NewTJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    argvalue0 := interfaces.NewUint64()
    err770 := argvalue0.Read(context.Background(), jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg771 := flag.Arg(2)
    mbTrans772 := thrift.NewTMemoryBufferLen(len(arg771))
    defer mbTrans772.Close()
    _, err773 := mbTrans772.WriteString(arg771)
    if err773 != nil {
      Usage()
      return
    }
    factory774 := thrift.NewTJSONProtocolFactory()
    jsProt775 := factory774.GetProtocol(mbTrans772)
    argvalue1 := interfaces.NewUint64()
    err776 := argvalue1.Read(context.Background(), jsProt775)
    if err776 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg777 := flag.Arg(3)
    mbTrans778 := thrift.NewTMemoryBufferLen(len(arg777))
    defer mbTrans778.Close()
    _, err779 := mbTrans778.WriteString(arg777)
    if err779 != nil {
      Usage()
      return
    }
    factory780 := thrift.NewTJSONProtocolFactory()
    jsProt781 := factory780.GetProtocol(mbTrans778)
    argvalue2 := interfaces.NewUint64()
    err782 := argvalue2.Read(context.Background(), jsProt781)
    if err782 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg783 := flag.Arg(4)
    mbTrans784 := thrift.NewTMemoryBufferLen(len(arg783))
    defer mbTrans784.Close()
    _, err785 := mbTrans784.WriteString(arg783)
    if err785 != nil {
      Usage()
      return
    }
    factory786 := thrift.NewTJSONProtocolFactory()
    jsProt787 := factory786.GetProtocol(mbTrans784)
    argvalue3 := interfaces.NewUint64()
    err788 := argvalue3.Read(context.Background(), jsProt787)
    if err788 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx64FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx64_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Lowerbound requires 5 args")
      flag.Usage()
    }
    arg789 := flag.Arg(1)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil {
      Usage()
      return
    }
    factory792 := thrift.NewTJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    argvalue0 := interfaces.NewUint64()
    err794 := argvalue0.Read(context.Background(), jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg795 := flag.Arg(2)
    mbTrans796 := thrift.NewTMemoryBufferLen(len(arg795))
    defer mbTrans796.Close()
    _, err797 := mbTrans796.WriteString(arg795)
    if err797 != nil {
      Usage()
      return
    }
    factory798 := thrift.NewTJSONProtocolFactory()
    jsProt799 := factory798.GetProtocol(mbTrans796)
    argvalue1 := interfaces.NewUint64()
    err800 := argvalue1.Read(context.Background(), jsProt799)
    if err800 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg801 := flag.Arg(3)
    mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
    defer mbTrans802.Close()
    _, err803 := mbTrans802.WriteString(arg801)
    if err803 != nil {
      Usage()
      return
    }
    factory804 := thrift.NewTJSONProtocolFactory()
    jsProt805 := factory804.GetProtocol(mbTrans802)
    argvalue2 := interfaces.NewUint64()
    err806 := argvalue2.Read(context.Background(), jsProt805)
    if err806 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg807 := flag.Arg(4)
    mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
    defer mbTrans808.Close()
    _, err809 := mbTrans808.WriteString(arg807)
    if err809 != nil {
      Usage()
      return
    }
    factory810 := thrift.NewTJSONProtocolFactory()
    jsProt811 := factory810.GetProtocol(mbTrans808)
    argvalue3 := interfaces.NewUint64()
    err812 := argvalue3.Read(context.Background(), jsProt811)
    if err812 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg813 := flag.Arg(5)
    mbTrans814 := thrift.NewTMemoryBufferLen(len(arg813))
    defer mbTrans814.Close()
    _, err815 := mbTrans814.WriteString(arg813)
    if err815 != nil {
      Usage()
      return
    }
    factory816 := thrift.NewTJSONProtocolFactory()
    jsProt817 := factory816.GetProtocol(mbTrans814)
    argvalue4 := interfaces.NewUint64()
    err818 := argvalue4.Read(context.Background(), jsProt817)
    if err818 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx64Upperbound requires 5 args")
      flag.Usage()
    }
    arg819 := flag.Arg(1)
    mbTrans820 := thrift.NewTMemoryBufferLen(len(arg819))
    defer mbTrans820.Close()
    _, err821 := mbTrans820.WriteString(arg819)
    if err821 != nil {
      Usage()
      return
    }
    factory822 := thrift.NewTJSONProtocolFactory()
    jsProt823 := factory822.GetProtocol(mbTrans820)
    argvalue0 := interfaces.NewUint64()
    err824 := argvalue0.Read(context.Background(), jsProt823)
    if err824 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg825 := flag.Arg(2)
    mbTrans826 := thrift.NewTMemoryBufferLen(len(arg825))
    defer mbTrans826.Close()
    _, err827 := mbTrans826.WriteString(arg825)
    if err827 != nil {
      Usage()
      return
    }
    factory828 := thrift.NewTJSONProtocolFactory()
    jsProt829 := factory828.GetProtocol(mbTrans826)
    argvalue1 := interfaces.NewUint64()
    err830 := argvalue1.Read(context.Background(), jsProt829)
    if err830 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg831 := flag.Arg(3)
    mbTrans832 := thrift.NewTMemoryBufferLen(len(arg831))
    defer mbTrans832.Close()
    _, err833 := mbTrans832.WriteString(arg831)
    if err833 != nil {
      Usage()
      return
    }
    factory834 := thrift.NewTJSONProtocolFactory()
    jsProt835 := factory834.GetProtocol(mbTrans832)
    argvalue2 := interfaces.NewUint64()
    err836 := argvalue2.Read(context.Background(), jsProt835)
    if err836 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg837 := flag.Arg(4)
    mbTrans838 := thrift.NewTMemoryBufferLen(len(arg837))
    defer mbTrans838.Close()
    _, err839 := mbTrans838.WriteString(arg837)
    if err839 != nil {
      Usage()
      return
    }
    factory840 := thrift.NewTJSONProtocolFactory()
    jsProt841 := factory840.GetProtocol(mbTrans838)
    argvalue3 := interfaces.NewUint64()
    err842 := argvalue3.Read(context.Background(), jsProt841)
    if err842 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg843 := flag.Arg(5)
    mbTrans844 := thrift.NewTMemoryBufferLen(len(arg843))
    defer mbTrans844.Close()
    _, err845 := mbTrans844.WriteString(arg843)
    if err845 != nil {
      Usage()
      return
    }
    factory846 := thrift.NewTJSONProtocolFactory()
    jsProt847 := factory846.GetProtocol(mbTrans844)
    argvalue4 := interfaces.NewUint64()
    err848 := argvalue4.Read(context.Background(), jsProt847)
    if err848 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx64Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx64_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx64End requires 3 args")
      flag.Usage()
    }
    arg849 := flag.Arg(1)
    mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
    defer mbTrans850.Close()
    _, err851 := mbTrans850.WriteString(arg849)
    if err851 != nil {
      Usage()
      return
    }
    factory852 := thrift.NewTJSONProtocolFactory()
    jsProt853 := factory852.GetProtocol(mbTrans850)
    argvalue0 := interfaces.NewUint64()
    err854 := argvalue0.Read(context.Background(), jsProt853)
    if err854 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg855 := flag.Arg(2)
    mbTrans856 := thrift.NewTMemoryBufferLen(len(arg855))
    defer mbTrans856.Close()
    _, err857 := mbTrans856.WriteString(arg855)
    if err857 != nil {
      Usage()
      return
    }
    factory858 := thrift.NewTJSONProtocolFactory()
    jsProt859 := factory858.GetProtocol(mbTrans856)
    argvalue1 := interfaces.NewUint64()
    err860 := argvalue1.Read(context.Background(), jsProt859)
    if err860 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg861 := flag.Arg(3)
    mbTrans862 := thrift.NewTMemoryBufferLen(len(arg861))
    defer mbTrans862.Close()
    _, err863 := mbTrans862.WriteString(arg861)
    if err863 != nil {
      Usage()
      return
    }
    factory864 := thrift.NewTJSONProtocolFactory()
    jsProt865 := factory864.GetProtocol(mbTrans862)
    argvalue2 := interfaces.NewUint64()
    err866 := argvalue2.Read(context.Background(), jsProt865)
    if err866 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx64End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Store requires 5 args")
      flag.Usage()
    }
    arg867 := flag.Arg(1)
    mbTrans868 := thrift.NewTMemoryBufferLen(len(arg867))
    defer mbTrans868.Close()
    _, err869 := mbTrans868.WriteString(arg867)
    if err869 != nil {
      Usage()
      return
    }
    factory870 := thrift.NewTJSONProtocolFactory()
    jsProt871 := factory870.GetProtocol(mbTrans868)
    argvalue0 := interfaces.NewUint64()
    err872 := argvalue0.Read(context.Background(), jsProt871)
    if err872 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg873 := flag.Arg(2)
    mbTrans874 := thrift.NewTMemoryBufferLen(len(arg873))
    defer mbTrans874.Close()
    _, err875 := mbTrans874.WriteString(arg873)
    if err875 != nil {
      Usage()
      return
    }
    factory876 := thrift.NewTJSONProtocolFactory()
    jsProt877 := factory876.GetProtocol(mbTrans874)
    argvalue1 := interfaces.NewUint64()
    err878 := argvalue1.Read(context.Background(), jsProt877)
    if err878 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg879 := flag.Arg(3)
    mbTrans880 := thrift.NewTMemoryBufferLen(len(arg879))
    defer mbTrans880.Close()
    _, err881 := mbTrans880.WriteString(arg879)
    if err881 != nil {
      Usage()
      return
    }
    factory882 := thrift.NewTJSONProtocolFactory()
    jsProt883 := factory882.GetProtocol(mbTrans880)
    argvalue2 := interfaces.NewUint64()
    err884 := argvalue2.Read(context.Background(), jsProt883)
    if err884 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg885 := flag.Arg(4)
    mbTrans886 := thrift.NewTMemoryBufferLen(len(arg885))
    defer mbTrans886.Close()
    _, err887 := mbTrans886.WriteString(arg885)
    if err887 != nil {
      Usage()
      return
    }
    factory888 := thrift.NewTJSONProtocolFactory()
    jsProt889 := factory888.GetProtocol(mbTrans886)
    argvalue3 := interfaces.NewUint64()
    err890 := argvalue3.Read(context.Background(), jsProt889)
    if err890 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx128Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128Update requires 3 args")
      flag.Usage()
    }
    tmp0, err892 := (strconv.Atoi(flag.Arg(1)))
    if err892 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg893 := flag.Arg(2)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue1 := interfaces.NewUint64()
    err898 := argvalue1.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx128Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx128_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err900 := (strconv.Atoi(flag.Arg(1)))
    if err900 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Next requires 1 args")
      flag.Usage()
    }
    tmp0, err901 := (strconv.Atoi(flag.Arg(1)))
    if err901 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx128Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err902 := (strconv.Atoi(flag.Arg(1)))
    if err902 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx128Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx128_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindPrimary requires 4 args")
      flag.Usage()
    }
    arg903 := flag.Arg(1)
    mbTrans904 := thrift.NewTMemoryBufferLen(len(arg903))
    defer mbTrans904.Close()
    _, err905 := mbTrans904.WriteString(arg903)
    if err905 != nil {
      Usage()
      return
    }
    factory906 := thrift.NewTJSONProtocolFactory()
    jsProt907 := factory906.GetProtocol(mbTrans904)
    argvalue0 := interfaces.NewUint64()
    err908 := argvalue0.Read(context.Background(), jsProt907)
    if err908 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg909 := flag.Arg(2)
    mbTrans910 := thrift.NewTMemoryBufferLen(len(arg909))
    defer mbTrans910.Close()
    _, err911 := mbTrans910.WriteString(arg909)
    if err911 != nil {
      Usage()
      return
    }
    factory912 := thrift.NewTJSONProtocolFactory()
    jsProt913 := factory912.GetProtocol(mbTrans910)
    argvalue1 := interfaces.NewUint64()
    err914 := argvalue1.Read(context.Background(), jsProt913)
    if err914 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg915 := flag.Arg(3)
    mbTrans916 := thrift.NewTMemoryBufferLen(len(arg915))
    defer mbTrans916.Close()
    _, err917 := mbTrans916.WriteString(arg915)
    if err917 != nil {
      Usage()
      return
    }
    factory918 := thrift.NewTJSONProtocolFactory()
    jsProt919 := factory918.GetProtocol(mbTrans916)
    argvalue2 := interfaces.NewUint64()
    err920 := argvalue2.Read(context.Background(), jsProt919)
    if err920 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg921 := flag.Arg(4)
    mbTrans922 := thrift.NewTMemoryBufferLen(len(arg921))
    defer mbTrans922.Close()
    _, err923 := mbTrans922.WriteString(arg921)
    if err923 != nil {
      Usage()
      return
    }
    factory924 := thrift.NewTJSONProtocolFactory()
    jsProt925 := factory924.GetProtocol(mbTrans922)
    argvalue3 := interfaces.NewUint64()
    err926 := argvalue3.Read(context.Background(), jsProt925)
    if err926 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx128FindSecondary requires 4 args")
      flag.Usage()
    }
    arg927 := flag.Arg(1)
    mbTrans928 := thrift.NewTMemoryBufferLen(len(arg927))
    defer mbTrans928.Close()
    _, err929 := mbTrans928.WriteString(arg927)
    if err929 != nil {
      Usage()
      return
    }
    factory930 := thrift.NewTJSONProtocolFactory()
    jsProt931 := factory930.GetProtocol(mbTrans928)
    argvalue0 := interfaces.NewUint64()
    err932 := argvalue0.Read(context.Background(), jsProt931)
    if err932 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg933 := flag.Arg(2)
    mbTrans934 := thrift.NewTMemoryBufferLen(len(arg933))
    defer mbTrans934.Close()
    _, err935 := mbTrans934.WriteString(arg933)
    if err935 != nil {
      Usage()
      return
    }
    factory936 := thrift.NewTJSONProtocolFactory()
    jsProt937 := factory936.GetProtocol(mbTrans934)
    argvalue1 := interfaces.NewUint64()
    err938 := argvalue1.Read(context.Background(), jsProt937)
    if err938 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg939 := flag.Arg(3)
    mbTrans940 := thrift.NewTMemoryBufferLen(len(arg939))
    defer mbTrans940.Close()
    _, err941 := mbTrans940.WriteString(arg939)
    if err941 != nil {
      Usage()
      return
    }
    factory942 := thrift.NewTJSONProtocolFactory()
    jsProt943 := factory942.GetProtocol(mbTrans940)
    argvalue2 := interfaces.NewUint64()
    err944 := argvalue2.Read(context.Background(), jsProt943)
    if err944 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx128FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx128_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Lowerbound requires 5 args")
      flag.Usage()
    }
    arg946 := flag.Arg(1)
    mbTrans947 := thrift.NewTMemoryBufferLen(len(arg946))
    defer mbTrans947.Close()
    _, err948 := mbTrans947.WriteString(arg946)
    if err948 != nil {
      Usage()
      return
    }
    factory949 := thrift.NewTJSONProtocolFactory()
    jsProt950 := factory949.GetProtocol(mbTrans947)
    argvalue0 := interfaces.NewUint64()
    err951 := argvalue0.Read(context.Background(), jsProt950)
    if err951 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg952 := flag.Arg(2)
    mbTrans953 := thrift.NewTMemoryBufferLen(len(arg952))
    defer mbTrans953.Close()
    _, err954 := mbTrans953.WriteString(arg952)
    if err954 != nil {
      Usage()
      return
    }
    factory955 := thrift.NewTJSONProtocolFactory()
    jsProt956 := factory955.GetProtocol(mbTrans953)
    argvalue1 := interfaces.NewUint64()
    err957 := argvalue1.Read(context.Background(), jsProt956)
    if err957 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg958 := flag.Arg(3)
    mbTrans959 := thrift.NewTMemoryBufferLen(len(arg958))
    defer mbTrans959.Close()
    _, err960 := mbTrans959.WriteString(arg958)
    if err960 != nil {
      Usage()
      return
    }
    factory961 := thrift.NewTJSONProtocolFactory()
    jsProt962 := factory961.GetProtocol(mbTrans959)
    argvalue2 := interfaces.NewUint64()
    err963 := argvalue2.Read(context.Background(), jsProt962)
    if err963 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg965 := flag.Arg(5)
    mbTrans966 := thrift.NewTMemoryBufferLen(len(arg965))
    defer mbTrans966.Close()
    _, err967 := mbTrans966.WriteString(arg965)
    if err967 != nil {
      Usage()
      return
    }
    factory968 := thrift.NewTJSONProtocolFactory()
    jsProt969 := factory968.GetProtocol(mbTrans966)
    argvalue4 := interfaces.NewUint64()
    err970 := argvalue4.Read(context.Background(), jsProt969)
    if err970 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx128Upperbound requires 5 args")
      flag.Usage()
    }
    arg971 := flag.Arg(1)
    mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
    defer mbTrans972.Close()
    _, err973 := mbTrans972.WriteString(arg971)
    if err973 != nil {
      Usage()
      return
    }
    factory974 := thrift.NewTJSONProtocolFactory()
    jsProt975 := factory974.GetProtocol(mbTrans972)
    argvalue0 := interfaces.NewUint64()
    err976 := argvalue0.Read(context.Background(), jsProt975)
    if err976 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg977 := flag.Arg(2)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue1 := interfaces.NewUint64()
    err982 := argvalue1.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg983 := flag.Arg(3)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue2 := interfaces.NewUint64()
    err988 := argvalue2.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg990 := flag.Arg(5)
    mbTrans991 := thrift.NewTMemoryBufferLen(len(arg990))
    defer mbTrans991.Close()
    _, err992 := mbTrans991.WriteString(arg990)
    if err992 != nil {
      Usage()
      return
    }
    factory993 := thrift.NewTJSONProtocolFactory()
    jsProt994 := factory993.GetProtocol(mbTrans991)
    argvalue4 := interfaces.NewUint64()
    err995 := argvalue4.Read(context.Background(), jsProt994)
    if err995 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx128Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx128_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx128End requires 3 args")
      flag.Usage()
    }
    arg996 := flag.Arg(1)
    mbTrans997 := thrift.NewTMemoryBufferLen(len(arg996))
    defer mbTrans997.Close()
    _, err998 := mbTrans997.WriteString(arg996)
    if err998 != nil {
      Usage()
      return
    }
    factory999 := thrift.NewTJSONProtocolFactory()
    jsProt1000 := factory999.GetProtocol(mbTrans997)
    argvalue0 := interfaces.NewUint64()
    err1001 := argvalue0.Read(context.Background(), jsProt1000)
    if err1001 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1002 := flag.Arg(2)
    mbTrans1003 := thrift.NewTMemoryBufferLen(len(arg1002))
    defer mbTrans1003.Close()
    _, err1004 := mbTrans1003.WriteString(arg1002)
    if err1004 != nil {
      Usage()
      return
    }
    factory1005 := thrift.NewTJSONProtocolFactory()
    jsProt1006 := factory1005.GetProtocol(mbTrans1003)
    argvalue1 := interfaces.NewUint64()
    err1007 := argvalue1.Read(context.Background(), jsProt1006)
    if err1007 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1008 := flag.Arg(3)
    mbTrans1009 := thrift.NewTMemoryBufferLen(len(arg1008))
    defer mbTrans1009.Close()
    _, err1010 := mbTrans1009.WriteString(arg1008)
    if err1010 != nil {
      Usage()
      return
    }
    factory1011 := thrift.NewTJSONProtocolFactory()
    jsProt1012 := factory1011.GetProtocol(mbTrans1009)
    argvalue2 := interfaces.NewUint64()
    err1013 := argvalue2.Read(context.Background(), jsProt1012)
    if err1013 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx128End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Store requires 5 args")
      flag.Usage()
    }
    arg1014 := flag.Arg(1)
    mbTrans1015 := thrift.NewTMemoryBufferLen(len(arg1014))
    defer mbTrans1015.Close()
    _, err1016 := mbTrans1015.WriteString(arg1014)
    if err1016 != nil {
      Usage()
      return
    }
    factory1017 := thrift.NewTJSONProtocolFactory()
    jsProt1018 := factory1017.GetProtocol(mbTrans1015)
    argvalue0 := interfaces.NewUint64()
    err1019 := argvalue0.Read(context.Background(), jsProt1018)
    if err1019 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1020 := flag.Arg(2)
    mbTrans1021 := thrift.NewTMemoryBufferLen(len(arg1020))
    defer mbTrans1021.Close()
    _, err1022 := mbTrans1021.WriteString(arg1020)
    if err1022 != nil {
      Usage()
      return
    }
    factory1023 := thrift.NewTJSONProtocolFactory()
    jsProt1024 := factory1023.GetProtocol(mbTrans1021)
    argvalue1 := interfaces.NewUint64()
    err1025 := argvalue1.Read(context.Background(), jsProt1024)
    if err1025 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1026 := flag.Arg(3)
    mbTrans1027 := thrift.NewTMemoryBufferLen(len(arg1026))
    defer mbTrans1027.Close()
    _, err1028 := mbTrans1027.WriteString(arg1026)
    if err1028 != nil {
      Usage()
      return
    }
    factory1029 := thrift.NewTJSONProtocolFactory()
    jsProt1030 := factory1029.GetProtocol(mbTrans1027)
    argvalue2 := interfaces.NewUint64()
    err1031 := argvalue2.Read(context.Background(), jsProt1030)
    if err1031 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1032 := flag.Arg(4)
    mbTrans1033 := thrift.NewTMemoryBufferLen(len(arg1032))
    defer mbTrans1033.Close()
    _, err1034 := mbTrans1033.WriteString(arg1032)
    if err1034 != nil {
      Usage()
      return
    }
    factory1035 := thrift.NewTJSONProtocolFactory()
    jsProt1036 := factory1035.GetProtocol(mbTrans1033)
    argvalue3 := interfaces.NewUint64()
    err1037 := argvalue3.Read(context.Background(), jsProt1036)
    if err1037 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdx256Store(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256Update requires 3 args")
      flag.Usage()
    }
    tmp0, err1039 := (strconv.Atoi(flag.Arg(1)))
    if err1039 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1040 := flag.Arg(2)
    mbTrans1041 := thrift.NewTMemoryBufferLen(len(arg1040))
    defer mbTrans1041.Close()
    _, err1042 := mbTrans1041.WriteString(arg1040)
    if err1042 != nil {
      Usage()
      return
    }
    factory1043 := thrift.NewTJSONProtocolFactory()
    jsProt1044 := factory1043.GetProtocol(mbTrans1041)
    argvalue1 := interfaces.NewUint64()
    err1045 := argvalue1.Read(context.Background(), jsProt1044)
    if err1045 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdx256Update(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx256_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Remove requires 1 args")
      flag.Usage()
    }
    tmp0, err1047 := (strconv.Atoi(flag.Arg(1)))
    if err1047 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Remove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Next requires 1 args")
      flag.Usage()
    }
    tmp0, err1048 := (strconv.Atoi(flag.Arg(1)))
    if err1048 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Next(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdx256Previous requires 1 args")
      flag.Usage()
    }
    tmp0, err1049 := (strconv.Atoi(flag.Arg(1)))
    if err1049 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdx256Previous(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx256_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindPrimary requires 4 args")
      flag.Usage()
    }
    arg1050 := flag.Arg(1)
    mbTrans1051 := thrift.NewTMemoryBufferLen(len(arg1050))
    defer mbTrans1051.Close()
    _, err1052 := mbTrans1051.WriteString(arg1050)
    if err1052 != nil {
      Usage()
      return
    }
    factory1053 := thrift.NewTJSONProtocolFactory()
    jsProt1054 := factory1053.GetProtocol(mbTrans1051)
    argvalue0 := interfaces.NewUint64()
    err1055 := argvalue0.Read(context.Background(), jsProt1054)
    if err1055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1056 := flag.Arg(2)
    mbTrans1057 := thrift.NewTMemoryBufferLen(len(arg1056))
    defer mbTrans1057.Close()
    _, err1058 := mbTrans1057.WriteString(arg1056)
    if err1058 != nil {
      Usage()
      return
    }
    factory1059 := thrift.NewTJSONProtocolFactory()
    jsProt1060 := factory1059.GetProtocol(mbTrans1057)
    argvalue1 := interfaces.NewUint64()
    err1061 := argvalue1.Read(context.Background(), jsProt1060)
    if err1061 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1062 := flag.Arg(3)
    mbTrans1063 := thrift.NewTMemoryBufferLen(len(arg1062))
    defer mbTrans1063.Close()
    _, err1064 := mbTrans1063.WriteString(arg1062)
    if err1064 != nil {
      Usage()
      return
    }
    factory1065 := thrift.NewTJSONProtocolFactory()
    jsProt1066 := factory1065.GetProtocol(mbTrans1063)
    argvalue2 := interfaces.NewUint64()
    err1067 := argvalue2.Read(context.Background(), jsProt1066)
    if err1067 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1068 := flag.Arg(4)
    mbTrans1069 := thrift.NewTMemoryBufferLen(len(arg1068))
    defer mbTrans1069.Close()
    _, err1070 := mbTrans1069.WriteString(arg1068)
    if err1070 != nil {
      Usage()
      return
    }
    factory1071 := thrift.NewTJSONProtocolFactory()
    jsProt1072 := factory1071.GetProtocol(mbTrans1069)
    argvalue3 := interfaces.NewUint64()
    err1073 := argvalue3.Read(context.Background(), jsProt1072)
    if err1073 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdx256FindSecondary requires 4 args")
      flag.Usage()
    }
    arg1074 := flag.Arg(1)
    mbTrans1075 := thrift.NewTMemoryBufferLen(len(arg1074))
    defer mbTrans1075.Close()
    _, err1076 := mbTrans1075.WriteString(arg1074)
    if err1076 != nil {
      Usage()
      return
    }
    factory1077 := thrift.NewTJSONProtocolFactory()
    jsProt1078 := factory1077.GetProtocol(mbTrans1075)
    argvalue0 := interfaces.NewUint64()
    err1079 := argvalue0.Read(context.Background(), jsProt1078)
    if err1079 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1080 := flag.Arg(2)
    mbTrans1081 := thrift.NewTMemoryBufferLen(len(arg1080))
    defer mbTrans1081.Close()
    _, err1082 := mbTrans1081.WriteString(arg1080)
    if err1082 != nil {
      Usage()
      return
    }
    factory1083 := thrift.NewTJSONProtocolFactory()
    jsProt1084 := factory1083.GetProtocol(mbTrans1081)
    argvalue1 := interfaces.NewUint64()
    err1085 := argvalue1.Read(context.Background(), jsProt1084)
    if err1085 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1086 := flag.Arg(3)
    mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
    defer mbTrans1087.Close()
    _, err1088 := mbTrans1087.WriteString(arg1086)
    if err1088 != nil {
      Usage()
      return
    }
    factory1089 := thrift.NewTJSONProtocolFactory()
    jsProt1090 := factory1089.GetProtocol(mbTrans1087)
    argvalue2 := interfaces.NewUint64()
    err1091 := argvalue2.Read(context.Background(), jsProt1090)
    if err1091 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdx256FindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx256_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Lowerbound requires 5 args")
      flag.Usage()
    }
    arg1093 := flag.Arg(1)
    mbTrans1094 := thrift.NewTMemoryBufferLen(len(arg1093))
    defer mbTrans1094.Close()
    _, err1095 := mbTrans1094.WriteString(arg1093)
    if err1095 != nil {
      Usage()
      return
    }
    factory1096 := thrift.NewTJSONProtocolFactory()
    jsProt1097 := factory1096.GetProtocol(mbTrans1094)
    argvalue0 := interfaces.NewUint64()
    err1098 := argvalue0.Read(context.Background(), jsProt1097)
    if err1098 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1099 := flag.Arg(2)
    mbTrans1100 := thrift.NewTMemoryBufferLen(len(arg1099))
    defer mbTrans1100.Close()
    _, err1101 := mbTrans1100.WriteString(arg1099)
    if err1101 != nil {
      Usage()
      return
    }
    factory1102 := thrift.NewTJSONProtocolFactory()
    jsProt1103 := factory1102.GetProtocol(mbTrans1100)
    argvalue1 := interfaces.NewUint64()
    err1104 := argvalue1.Read(context.Background(), jsProt1103)
    if err1104 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1105 := flag.Arg(3)
    mbTrans1106 := thrift.NewTMemoryBufferLen(len(arg1105))
    defer mbTrans1106.Close()
    _, err1107 := mbTrans1106.WriteString(arg1105)
    if err1107 != nil {
      Usage()
      return
    }
    factory1108 := thrift.NewTJSONProtocolFactory()
    jsProt1109 := factory1108.GetProtocol(mbTrans1106)
    argvalue2 := interfaces.NewUint64()
    err1110 := argvalue2.Read(context.Background(), jsProt1109)
    if err1110 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1112 := flag.Arg(5)
    mbTrans1113 := thrift.NewTMemoryBufferLen(len(arg1112))
    defer mbTrans1113.Close()
    _, err1114 := mbTrans1113.WriteString(arg1112)
    if err1114 != nil {
      Usage()
      return
    }
    factory1115 := thrift.NewTJSONProtocolFactory()
    jsProt1116 := factory1115.GetProtocol(mbTrans1113)
    argvalue4 := interfaces.NewUint64()
    err1117 := argvalue4.Read(context.Background(), jsProt1116)
    if err1117 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Lowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdx256Upperbound requires 5 args")
      flag.Usage()
    }
    arg1118 := flag.Arg(1)
    mbTrans1119 := thrift.NewTMemoryBufferLen(len(arg1118))
    defer mbTrans1119.Close()
    _, err1120 := mbTrans1119.WriteString(arg1118)
    if err1120 != nil {
      Usage()
      return
    }
    factory1121 := thrift.NewTJSONProtocolFactory()
    jsProt1122 := factory1121.GetProtocol(mbTrans1119)
    argvalue0 := interfaces.NewUint64()
    err1123 := argvalue0.Read(context.Background(), jsProt1122)
    if err1123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1124 := flag.Arg(2)
    mbTrans1125 := thrift.NewTMemoryBufferLen(len(arg1124))
    defer mbTrans1125.Close()
    _, err1126 := mbTrans1125.WriteString(arg1124)
    if err1126 != nil {
      Usage()
      return
    }
    factory1127 := thrift.NewTJSONProtocolFactory()
    jsProt1128 := factory1127.GetProtocol(mbTrans1125)
    argvalue1 := interfaces.NewUint64()
    err1129 := argvalue1.Read(context.Background(), jsProt1128)
    if err1129 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1130 := flag.Arg(3)
    mbTrans1131 := thrift.NewTMemoryBufferLen(len(arg1130))
    defer mbTrans1131.Close()
    _, err1132 := mbTrans1131.WriteString(arg1130)
    if err1132 != nil {
      Usage()
      return
    }
    factory1133 := thrift.NewTJSONProtocolFactory()
    jsProt1134 := factory1133.GetProtocol(mbTrans1131)
    argvalue2 := interfaces.NewUint64()
    err1135 := argvalue2.Read(context.Background(), jsProt1134)
    if err1135 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1137 := flag.Arg(5)
    mbTrans1138 := thrift.NewTMemoryBufferLen(len(arg1137))
    defer mbTrans1138.Close()
    _, err1139 := mbTrans1138.WriteString(arg1137)
    if err1139 != nil {
      Usage()
      return
    }
    factory1140 := thrift.NewTJSONProtocolFactory()
    jsProt1141 := factory1140.GetProtocol(mbTrans1138)
    argvalue4 := interfaces.NewUint64()
    err1142 := argvalue4.Read(context.Background(), jsProt1141)
    if err1142 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdx256Upperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx256_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdx256End requires 3 args")
      flag.Usage()
    }
    arg1143 := flag.Arg(1)
    mbTrans1144 := thrift.NewTMemoryBufferLen(len(arg1143))
    defer mbTrans1144.Close()
    _, err1145 := mbTrans1144.WriteString(arg1143)
    if err1145 != nil {
      Usage()
      return
    }
    factory1146 := thrift.NewTJSONProtocolFactory()
    jsProt1147 := factory1146.GetProtocol(mbTrans1144)
    argvalue0 := interfaces.NewUint64()
    err1148 := argvalue0.Read(context.Background(), jsProt1147)
    if err1148 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1149 := flag.Arg(2)
    mbTrans1150 := thrift.NewTMemoryBufferLen(len(arg1149))
    defer mbTrans1150.Close()
    _, err1151 := mbTrans1150.WriteString(arg1149)
    if err1151 != nil {
      Usage()
      return
    }
    factory1152 := thrift.NewTJSONProtocolFactory()
    jsProt1153 := factory1152.GetProtocol(mbTrans1150)
    argvalue1 := interfaces.NewUint64()
    err1154 := argvalue1.Read(context.Background(), jsProt1153)
    if err1154 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1155 := flag.Arg(3)
    mbTrans1156 := thrift.NewTMemoryBufferLen(len(arg1155))
    defer mbTrans1156.Close()
    _, err1157 := mbTrans1156.WriteString(arg1155)
    if err1157 != nil {
      Usage()
      return
    }
    factory1158 := thrift.NewTJSONProtocolFactory()
    jsProt1159 := factory1158.GetProtocol(mbTrans1156)
    argvalue2 := interfaces.NewUint64()
    err1160 := argvalue2.Read(context.Background(), jsProt1159)
    if err1160 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdx256End(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1161 := flag.Arg(1)
    mbTrans1162 := thrift.NewTMemoryBufferLen(len(arg1161))
    defer mbTrans1162.Close()
    _, err1163 := mbTrans1162.WriteString(arg1161)
    if err1163 != nil {
      Usage()
      return
    }
    factory1164 := thrift.NewTJSONProtocolFactory()
    jsProt1165 := factory1164.GetProtocol(mbTrans1162)
    argvalue0 := interfaces.NewUint64()
    err1166 := argvalue0.Read(context.Background(), jsProt1165)
    if err1166 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1167 := flag.Arg(2)
    mbTrans1168 := thrift.NewTMemoryBufferLen(len(arg1167))
    defer mbTrans1168.Close()
    _, err1169 := mbTrans1168.WriteString(arg1167)
    if err1169 != nil {
      Usage()
      return
    }
    factory1170 := thrift.NewTJSONProtocolFactory()
    jsProt1171 := factory1170.GetProtocol(mbTrans1168)
    argvalue1 := interfaces.NewUint64()
    err1172 := argvalue1.Read(context.Background(), jsProt1171)
    if err1172 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1173 := flag.Arg(3)
    mbTrans1174 := thrift.NewTMemoryBufferLen(len(arg1173))
    defer mbTrans1174.Close()
    _, err1175 := mbTrans1174.WriteString(arg1173)
    if err1175 != nil {
      Usage()
      return
    }
    factory1176 := thrift.NewTJSONProtocolFactory()
    jsProt1177 := factory1176.GetProtocol(mbTrans1174)
    argvalue2 := interfaces.NewUint64()
    err1178 := argvalue2.Read(context.Background(), jsProt1177)
    if err1178 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1179 := flag.Arg(4)
    mbTrans1180 := thrift.NewTMemoryBufferLen(len(arg1179))
    defer mbTrans1180.Close()
    _, err1181 := mbTrans1180.WriteString(arg1179)
    if err1181 != nil {
      Usage()
      return
    }
    factory1182 := thrift.NewTJSONProtocolFactory()
    jsProt1183 := factory1182.GetProtocol(mbTrans1180)
    argvalue3 := interfaces.NewUint64()
    err1184 := argvalue3.Read(context.Background(), jsProt1183)
    if err1184 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1186 := (strconv.Atoi(flag.Arg(1)))
    if err1186 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1187 := flag.Arg(2)
    mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
    defer mbTrans1188.Close()
    _, err1189 := mbTrans1188.WriteString(arg1187)
    if err1189 != nil {
      Usage()
      return
    }
    factory1190 := thrift.NewTJSONProtocolFactory()
    jsProt1191 := factory1190.GetProtocol(mbTrans1188)
    argvalue1 := interfaces.NewUint64()
    err1192 := argvalue1.Read(context.Background(), jsProt1191)
    if err1192 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1194 := (strconv.Atoi(flag.Arg(1)))
    if err1194 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1195 := (strconv.Atoi(flag.Arg(1)))
    if err1195 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1196 := (strconv.Atoi(flag.Arg(1)))
    if err1196 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1197 := flag.Arg(1)
    mbTrans1198 := thrift.NewTMemoryBufferLen(len(arg1197))
    defer mbTrans1198.Close()
    _, err1199 := mbTrans1198.WriteString(arg1197)
    if err1199 != nil {
      Usage()
      return
    }
    factory1200 := thrift.NewTJSONProtocolFactory()
    jsProt1201 := factory1200.GetProtocol(mbTrans1198)
    argvalue0 := interfaces.NewUint64()
    err1202 := argvalue0.Read(context.Background(), jsProt1201)
    if err1202 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1203 := flag.Arg(2)
    mbTrans1204 := thrift.NewTMemoryBufferLen(len(arg1203))
    defer mbTrans1204.Close()
    _, err1205 := mbTrans1204.WriteString(arg1203)
    if err1205 != nil {
      Usage()
      return
    }
    factory1206 := thrift.NewTJSONProtocolFactory()
    jsProt1207 := factory1206.GetProtocol(mbTrans1204)
    argvalue1 := interfaces.NewUint64()
    err1208 := argvalue1.Read(context.Background(), jsProt1207)
    if err1208 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1209 := flag.Arg(3)
    mbTrans1210 := thrift.NewTMemoryBufferLen(len(arg1209))
    defer mbTrans1210.Close()
    _, err1211 := mbTrans1210.WriteString(arg1209)
    if err1211 != nil {
      Usage()
      return
    }
    factory1212 := thrift.NewTJSONProtocolFactory()
    jsProt1213 := factory1212.GetProtocol(mbTrans1210)
    argvalue2 := interfaces.NewUint64()
    err1214 := argvalue2.Read(context.Background(), jsProt1213)
    if err1214 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1215 := flag.Arg(4)
    mbTrans1216 := thrift.NewTMemoryBufferLen(len(arg1215))
    defer mbTrans1216.Close()
    _, err1217 := mbTrans1216.WriteString(arg1215)
    if err1217 != nil {
      Usage()
      return
    }
    factory1218 := thrift.NewTJSONProtocolFactory()
    jsProt1219 := factory1218.GetProtocol(mbTrans1216)
    argvalue3 := interfaces.NewUint64()
    err1220 := argvalue3.Read(context.Background(), jsProt1219)
    if err1220 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1221 := flag.Arg(1)
    mbTrans1222 := thrift.NewTMemoryBufferLen(len(arg1221))
    defer mbTrans1222.Close()
    _, err1223 := mbTrans1222.WriteString(arg1221)
    if err1223 != nil {
      Usage()
      return
    }
    factory1224 := thrift.NewTJSONProtocolFactory()
    jsProt1225 := factory1224.GetProtocol(mbTrans1222)
    argvalue0 := interfaces.NewUint64()
    err1226 := argvalue0.Read(context.Background(), jsProt1225)
    if err1226 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1227 := flag.Arg(2)
    mbTrans1228 := thrift.NewTMemoryBufferLen(len(arg1227))
    defer mbTrans1228.Close()
    _, err1229 := mbTrans1228.WriteString(arg1227)
    if err1229 != nil {
      Usage()
      return
    }
    factory1230 := thrift.NewTJSONProtocolFactory()
    jsProt1231 := factory1230.GetProtocol(mbTrans1228)
    argvalue1 := interfaces.NewUint64()
    err1232 := argvalue1.Read(context.Background(), jsProt1231)
    if err1232 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1233 := flag.Arg(3)
    mbTrans1234 := thrift.NewTMemoryBufferLen(len(arg1233))
    defer mbTrans1234.Close()
    _, err1235 := mbTrans1234.WriteString(arg1233)
    if err1235 != nil {
      Usage()
      return
    }
    factory1236 := thrift.NewTJSONProtocolFactory()
    jsProt1237 := factory1236.GetProtocol(mbTrans1234)
    argvalue2 := interfaces.NewUint64()
    err1238 := argvalue2.Read(context.Background(), jsProt1237)
    if err1238 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1240 := flag.Arg(1)
    mbTrans1241 := thrift.NewTMemoryBufferLen(len(arg1240))
    defer mbTrans1241.Close()
    _, err1242 := mbTrans1241.WriteString(arg1240)
    if err1242 != nil {
      Usage()
      return
    }
    factory1243 := thrift.NewTJSONProtocolFactory()
    jsProt1244 := factory1243.GetProtocol(mbTrans1241)
    argvalue0 := interfaces.NewUint64()
    err1245 := argvalue0.Read(context.Background(), jsProt1244)
    if err1245 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1246 := flag.Arg(2)
    mbTrans1247 := thrift.NewTMemoryBufferLen(len(arg1246))
    defer mbTrans1247.Close()
    _, err1248 := mbTrans1247.WriteString(arg1246)
    if err1248 != nil {
      Usage()
      return
    }
    factory1249 := thrift.NewTJSONProtocolFactory()
    jsProt1250 := factory1249.GetProtocol(mbTrans1247)
    argvalue1 := interfaces.NewUint64()
    err1251 := argvalue1.Read(context.Background(), jsProt1250)
    if err1251 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1252 := flag.Arg(3)
    mbTrans1253 := thrift.NewTMemoryBufferLen(len(arg1252))
    defer mbTrans1253.Close()
    _, err1254 := mbTrans1253.WriteString(arg1252)
    if err1254 != nil {
      Usage()
      return
    }
    factory1255 := thrift.NewTJSONProtocolFactory()
    jsProt1256 := factory1255.GetProtocol(mbTrans1253)
    argvalue2 := interfaces.NewUint64()
    err1257 := argvalue2.Read(context.Background(), jsProt1256)
    if err1257 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1259 := flag.Arg(5)
    mbTrans1260 := thrift.NewTMemoryBufferLen(len(arg1259))
    defer mbTrans1260.Close()
    _, err1261 := mbTrans1260.WriteString(arg1259)
    if err1261 != nil {
      Usage()
      return
    }
    factory1262 := thrift.NewTJSONProtocolFactory()
    jsProt1263 := factory1262.GetProtocol(mbTrans1260)
    argvalue4 := interfaces.NewUint64()
    err1264 := argvalue4.Read(context.Background(), jsProt1263)
    if err1264 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1265 := flag.Arg(1)
    mbTrans1266 := thrift.NewTMemoryBufferLen(len(arg1265))
    defer mbTrans1266.Close()
    _, err1267 := mbTrans1266.WriteString(arg1265)
    if err1267 != nil {
      Usage()
      return
    }
    factory1268 := thrift.NewTJSONProtocolFactory()
    jsProt1269 := factory1268.GetProtocol(mbTrans1266)
    argvalue0 := interfaces.NewUint64()
    err1270 := argvalue0.Read(context.Background(), jsProt1269)
    if err1270 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1271 := flag.Arg(2)
    mbTrans1272 := thrift.NewTMemoryBufferLen(len(arg1271))
    defer mbTrans1272.Close()
    _, err1273 := mbTrans1272.WriteString(arg1271)
    if err1273 != nil {
      Usage()
      return
    }
    factory1274 := thrift.NewTJSONProtocolFactory()
    jsProt1275 := factory1274.GetProtocol(mbTrans1272)
    argvalue1 := interfaces.NewUint64()
    err1276 := argvalue1.Read(context.Background(), jsProt1275)
    if err1276 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1277 := flag.Arg(3)
    mbTrans1278 := thrift.NewTMemoryBufferLen(len(arg1277))
    defer mbTrans1278.Close()
    _, err1279 := mbTrans1278.WriteString(arg1277)
    if err1279 != nil {
      Usage()
      return
    }
    factory1280 := thrift.NewTJSONProtocolFactory()
    jsProt1281 := factory1280.GetProtocol(mbTrans1278)
    argvalue2 := interfaces.NewUint64()
    err1282 := argvalue2.Read(context.Background(), jsProt1281)
    if err1282 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1284 := flag.Arg(5)
    mbTrans1285 := thrift.NewTMemoryBufferLen(len(arg1284))
    defer mbTrans1285.Close()
    _, err1286 := mbTrans1285.WriteString(arg1284)
    if err1286 != nil {
      Usage()
      return
    }
    factory1287 := thrift.NewTJSONProtocolFactory()
    jsProt1288 := factory1287.GetProtocol(mbTrans1285)
    argvalue4 := interfaces.NewUint64()
    err1289 := argvalue4.Read(context.Background(), jsProt1288)
    if err1289 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1290 := flag.Arg(1)
    mbTrans1291 := thrift.NewTMemoryBufferLen(len(arg1290))
    defer mbTrans1291.Close()
    _, err1292 := mbTrans1291.WriteString(arg1290)
    if err1292 != nil {
      Usage()
      return
    }
    factory1293 := thrift.NewTJSONProtocolFactory()
    jsProt1294 := factory1293.GetProtocol(mbTrans1291)
    argvalue0 := interfaces.NewUint64()
    err1295 := argvalue0.Read(context.Background(), jsProt1294)
    if err1295 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1296 := flag.Arg(2)
    mbTrans1297 := thrift.NewTMemoryBufferLen(len(arg1296))
    defer mbTrans1297.Close()
    _, err1298 := mbTrans1297.WriteString(arg1296)
    if err1298 != nil {
      Usage()
      return
    }
    factory1299 := thrift.NewTJSONProtocolFactory()
    jsProt1300 := factory1299.GetProtocol(mbTrans1297)
    argvalue1 := interfaces.NewUint64()
    err1301 := argvalue1.Read(context.Background(), jsProt1300)
    if err1301 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1302 := flag.Arg(3)
    mbTrans1303 := thrift.NewTMemoryBufferLen(len(arg1302))
    defer mbTrans1303.Close()
    _, err1304 := mbTrans1303.WriteString(arg1302)
    if err1304 != nil {
      Usage()
      return
    }
    factory1305 := thrift.NewTJSONProtocolFactory()
    jsProt1306 := factory1305.GetProtocol(mbTrans1303)
    argvalue2 := interfaces.NewUint64()
    err1307 := argvalue2.Read(context.Background(), jsProt1306)
    if err1307 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_store":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleStore requires 5 args")
      flag.Usage()
    }
    arg1308 := flag.Arg(1)
    mbTrans1309 := thrift.NewTMemoryBufferLen(len(arg1308))
    defer mbTrans1309.Close()
    _, err1310 := mbTrans1309.WriteString(arg1308)
    if err1310 != nil {
      Usage()
      return
    }
    factory1311 := thrift.NewTJSONProtocolFactory()
    jsProt1312 := factory1311.GetProtocol(mbTrans1309)
    argvalue0 := interfaces.NewUint64()
    err1313 := argvalue0.Read(context.Background(), jsProt1312)
    if err1313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1314 := flag.Arg(2)
    mbTrans1315 := thrift.NewTMemoryBufferLen(len(arg1314))
    defer mbTrans1315.Close()
    _, err1316 := mbTrans1315.WriteString(arg1314)
    if err1316 != nil {
      Usage()
      return
    }
    factory1317 := thrift.NewTJSONProtocolFactory()
    jsProt1318 := factory1317.GetProtocol(mbTrans1315)
    argvalue1 := interfaces.NewUint64()
    err1319 := argvalue1.Read(context.Background(), jsProt1318)
    if err1319 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1320 := flag.Arg(3)
    mbTrans1321 := thrift.NewTMemoryBufferLen(len(arg1320))
    defer mbTrans1321.Close()
    _, err1322 := mbTrans1321.WriteString(arg1320)
    if err1322 != nil {
      Usage()
      return
    }
    factory1323 := thrift.NewTJSONProtocolFactory()
    jsProt1324 := factory1323.GetProtocol(mbTrans1321)
    argvalue2 := interfaces.NewUint64()
    err1325 := argvalue2.Read(context.Background(), jsProt1324)
    if err1325 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1326 := flag.Arg(4)
    mbTrans1327 := thrift.NewTMemoryBufferLen(len(arg1326))
    defer mbTrans1327.Close()
    _, err1328 := mbTrans1327.WriteString(arg1326)
    if err1328 != nil {
      Usage()
      return
    }
    factory1329 := thrift.NewTJSONProtocolFactory()
    jsProt1330 := factory1329.GetProtocol(mbTrans1327)
    argvalue3 := interfaces.NewUint64()
    err1331 := argvalue3.Read(context.Background(), jsProt1330)
    if err1331 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleStore(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_update":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpdate requires 3 args")
      flag.Usage()
    }
    tmp0, err1333 := (strconv.Atoi(flag.Arg(1)))
    if err1333 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1334 := flag.Arg(2)
    mbTrans1335 := thrift.NewTMemoryBufferLen(len(arg1334))
    defer mbTrans1335.Close()
    _, err1336 := mbTrans1335.WriteString(arg1334)
    if err1336 != nil {
      Usage()
      return
    }
    factory1337 := thrift.NewTJSONProtocolFactory()
    jsProt1338 := factory1337.GetProtocol(mbTrans1335)
    argvalue1 := interfaces.NewUint64()
    err1339 := argvalue1.Read(context.Background(), jsProt1338)
    if err1339 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleUpdate(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "db_idx_long_double_remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleRemove requires 1 args")
      flag.Usage()
    }
    tmp0, err1341 := (strconv.Atoi(flag.Arg(1)))
    if err1341 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleRemove(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_next":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleNext requires 1 args")
      flag.Usage()
    }
    tmp0, err1342 := (strconv.Atoi(flag.Arg(1)))
    if err1342 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoubleNext(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_previous":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoublePrevious requires 1 args")
      flag.Usage()
    }
    tmp0, err1343 := (strconv.Atoi(flag.Arg(1)))
    if err1343 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DbIdxLongDoublePrevious(context.Background(), value0))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_primary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindPrimary requires 4 args")
      flag.Usage()
    }
    arg1344 := flag.Arg(1)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue0 := interfaces.NewUint64()
    err1349 := argvalue0.Read(context.Background(), jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1350 := flag.Arg(2)
    mbTrans1351 := thrift.NewTMemoryBufferLen(len(arg1350))
    defer mbTrans1351.Close()
    _, err1352 := mbTrans1351.WriteString(arg1350)
    if err1352 != nil {
      Usage()
      return
    }
    factory1353 := thrift.NewTJSONProtocolFactory()
    jsProt1354 := factory1353.GetProtocol(mbTrans1351)
    argvalue1 := interfaces.NewUint64()
    err1355 := argvalue1.Read(context.Background(), jsProt1354)
    if err1355 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1356 := flag.Arg(3)
    mbTrans1357 := thrift.NewTMemoryBufferLen(len(arg1356))
    defer mbTrans1357.Close()
    _, err1358 := mbTrans1357.WriteString(arg1356)
    if err1358 != nil {
      Usage()
      return
    }
    factory1359 := thrift.NewTJSONProtocolFactory()
    jsProt1360 := factory1359.GetProtocol(mbTrans1357)
    argvalue2 := interfaces.NewUint64()
    err1361 := argvalue2.Read(context.Background(), jsProt1360)
    if err1361 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1362 := flag.Arg(4)
    mbTrans1363 := thrift.NewTMemoryBufferLen(len(arg1362))
    defer mbTrans1363.Close()
    _, err1364 := mbTrans1363.WriteString(arg1362)
    if err1364 != nil {
      Usage()
      return
    }
    factory1365 := thrift.NewTJSONProtocolFactory()
    jsProt1366 := factory1365.GetProtocol(mbTrans1363)
    argvalue3 := interfaces.NewUint64()
    err1367 := argvalue3.Read(context.Background(), jsProt1366)
    if err1367 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindPrimary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_find_secondary":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleFindSecondary requires 4 args")
      flag.Usage()
    }
    arg1368 := flag.Arg(1)
    mbTrans1369 := thrift.NewTMemoryBufferLen(len(arg1368))
    defer mbTrans1369.Close()
    _, err1370 := mbTrans1369.WriteString(arg1368)
    if err1370 != nil {
      Usage()
      return
    }
    factory1371 := thrift.NewTJSONProtocolFactory()
    jsProt1372 := factory1371.GetProtocol(mbTrans1369)
    argvalue0 := interfaces.NewUint64()
    err1373 := argvalue0.Read(context.Background(), jsProt1372)
    if err1373 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1374 := flag.Arg(2)
    mbTrans1375 := thrift.NewTMemoryBufferLen(len(arg1374))
    defer mbTrans1375.Close()
    _, err1376 := mbTrans1375.WriteString(arg1374)
    if err1376 != nil {
      Usage()
      return
    }
    factory1377 := thrift.NewTJSONProtocolFactory()
    jsProt1378 := factory1377.GetProtocol(mbTrans1375)
    argvalue1 := interfaces.NewUint64()
    err1379 := argvalue1.Read(context.Background(), jsProt1378)
    if err1379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1380 := flag.Arg(3)
    mbTrans1381 := thrift.NewTMemoryBufferLen(len(arg1380))
    defer mbTrans1381.Close()
    _, err1382 := mbTrans1381.WriteString(arg1380)
    if err1382 != nil {
      Usage()
      return
    }
    factory1383 := thrift.NewTJSONProtocolFactory()
    jsProt1384 := factory1383.GetProtocol(mbTrans1381)
    argvalue2 := interfaces.NewUint64()
    err1385 := argvalue2.Read(context.Background(), jsProt1384)
    if err1385 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.DbIdxLongDoubleFindSecondary(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "db_idx_long_double_lowerbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleLowerbound requires 5 args")
      flag.Usage()
    }
    arg1387 := flag.Arg(1)
    mbTrans1388 := thrift.NewTMemoryBufferLen(len(arg1387))
    defer mbTrans1388.Close()
    _, err1389 := mbTrans1388.WriteString(arg1387)
    if err1389 != nil {
      Usage()
      return
    }
    factory1390 := thrift.NewTJSONProtocolFactory()
    jsProt1391 := factory1390.GetProtocol(mbTrans1388)
    argvalue0 := interfaces.NewUint64()
    err1392 := argvalue0.Read(context.Background(), jsProt1391)
    if err1392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1393 := flag.Arg(2)
    mbTrans1394 := thrift.NewTMemoryBufferLen(len(arg1393))
    defer mbTrans1394.Close()
    _, err1395 := mbTrans1394.WriteString(arg1393)
    if err1395 != nil {
      Usage()
      return
    }
    factory1396 := thrift.NewTJSONProtocolFactory()
    jsProt1397 := factory1396.GetProtocol(mbTrans1394)
    argvalue1 := interfaces.NewUint64()
    err1398 := argvalue1.Read(context.Background(), jsProt1397)
    if err1398 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1399 := flag.Arg(3)
    mbTrans1400 := thrift.NewTMemoryBufferLen(len(arg1399))
    defer mbTrans1400.Close()
    _, err1401 := mbTrans1400.WriteString(arg1399)
    if err1401 != nil {
      Usage()
      return
    }
    factory1402 := thrift.NewTJSONProtocolFactory()
    jsProt1403 := factory1402.GetProtocol(mbTrans1400)
    argvalue2 := interfaces.NewUint64()
    err1404 := argvalue2.Read(context.Background(), jsProt1403)
    if err1404 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1406 := flag.Arg(5)
    mbTrans1407 := thrift.NewTMemoryBufferLen(len(arg1406))
    defer mbTrans1407.Close()
    _, err1408 := mbTrans1407.WriteString(arg1406)
    if err1408 != nil {
      Usage()
      return
    }
    factory1409 := thrift.NewTJSONProtocolFactory()
    jsProt1410 := factory1409.GetProtocol(mbTrans1407)
    argvalue4 := interfaces.NewUint64()
    err1411 := argvalue4.Read(context.Background(), jsProt1410)
    if err1411 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleLowerbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_upperbound":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleUpperbound requires 5 args")
      flag.Usage()
    }
    arg1412 := flag.Arg(1)
    mbTrans1413 := thrift.NewTMemoryBufferLen(len(arg1412))
    defer mbTrans1413.Close()
    _, err1414 := mbTrans1413.WriteString(arg1412)
    if err1414 != nil {
      Usage()
      return
    }
    factory1415 := thrift.NewTJSONProtocolFactory()
    jsProt1416 := factory1415.GetProtocol(mbTrans1413)
    argvalue0 := interfaces.NewUint64()
    err1417 := argvalue0.Read(context.Background(), jsProt1416)
    if err1417 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1418 := flag.Arg(2)
    mbTrans1419 := thrift.NewTMemoryBufferLen(len(arg1418))
    defer mbTrans1419.Close()
    _, err1420 := mbTrans1419.WriteString(arg1418)
    if err1420 != nil {
      Usage()
      return
    }
    factory1421 := thrift.NewTJSONProtocolFactory()
    jsProt1422 := factory1421.GetProtocol(mbTrans1419)
    argvalue1 := interfaces.NewUint64()
    err1423 := argvalue1.Read(context.Background(), jsProt1422)
    if err1423 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1424 := flag.Arg(3)
    mbTrans1425 := thrift.NewTMemoryBufferLen(len(arg1424))
    defer mbTrans1425.Close()
    _, err1426 := mbTrans1425.WriteString(arg1424)
    if err1426 != nil {
      Usage()
      return
    }
    factory1427 := thrift.NewTJSONProtocolFactory()
    jsProt1428 := factory1427.GetProtocol(mbTrans1425)
    argvalue2 := interfaces.NewUint64()
    err1429 := argvalue2.Read(context.Background(), jsProt1428)
    if err1429 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    arg1431 := flag.Arg(5)
    mbTrans1432 := thrift.NewTMemoryBufferLen(len(arg1431))
    defer mbTrans1432.Close()
    _, err1433 := mbTrans1432.WriteString(arg1431)
    if err1433 != nil {
      Usage()
      return
    }
    factory1434 := thrift.NewTJSONProtocolFactory()
    jsProt1435 := factory1434.GetProtocol(mbTrans1432)
    argvalue4 := interfaces.NewUint64()
    err1436 := argvalue4.Read(context.Background(), jsProt1435)
    if err1436 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DbIdxLongDoubleUpperbound(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "db_idx_long_double_end":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DbIdxLongDoubleEnd requires 3 args")
      flag.Usage()
    }
    arg1437 := flag.Arg(1)
    mbTrans1438 := thrift.NewTMemoryBufferLen(len(arg1437))
    defer mbTrans1438.Close()
    _, err1439 := mbTrans1438.WriteString(arg1437)
    if err1439 != nil {
      Usage()
      return
    }
    factory1440 := thrift.NewTJSONProtocolFactory()
    jsProt1441 := factory1440.GetProtocol(mbTrans1438)
    argvalue0 := interfaces.NewUint64()
    err1442 := argvalue0.Read(context.Background(), jsProt1441)
    if err1442 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1443 := flag.Arg(2)
    mbTrans1444 := thrift.NewTMemoryBufferLen(len(arg1443))
    defer mbTrans1444.Close()
    _, err1445 := mbTrans1444.WriteString(arg1443)
    if err1445 != nil {
      Usage()
      return
    }
    factory1446 := thrift.NewTJSONProtocolFactory()
    jsProt1447 := factory1446.GetProtocol(mbTrans1444)
    argvalue1 := interfaces.NewUint64()
    err1448 := argvalue1.Read(context.Background(), jsProt1447)
    if err1448 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1449 := flag.Arg(3)
    mbTrans1450 := thrift.NewTMemoryBufferLen(len(arg1449))
    defer mbTrans1450.Close()
    _, err1451 := mbTrans1450.WriteString(arg1449)
    if err1451 != nil {
      Usage()
      return
    }
    factory1452 := thrift.NewTJSONProtocolFactory()
    jsProt1453 := factory1452.GetProtocol(mbTrans1450)
    argvalue2 := interfaces.NewUint64()
    err1454 := argvalue2.Read(context.Background(), jsProt1453)
    if err1454 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DbIdxLongDoubleEnd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
